; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\sdio_sdcard.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\sdio_sdcard.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\ATK-ESP8266 -I..\CORE -I..\FATFS\src -I..\FATFS\exfuns -I..\HARDWARE\24CXX -I..\HARDWARE\IIC -I..\HARDWARE\KEY -I..\HARDWARE\LCD -I..\HARDWARE\LED -I..\HARDWARE\SDIO -I..\HARDWARE\SPI -I..\HARDWARE\TIMER -I..\HARDWARE\TOUCH -I..\HARDWARE\USART3 -I..\HARDWARE\W25QXX -I..\MALLOC -I..\STM32F10x_FWLib\inc -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\TEXT -I..\USER -I..\USMART -I..\PICTURE -I..\HARDWARE\OV7725 -I..\HARDWARE\EXTI -I..\HARDWARE\BEEP -I..\HARDWARE\DHT11 -I.\RTE\_Target_1 -ID:\Users\86132\AppData\Local\Arm\Packs\Keil\STM32F1xx_DFP\2.3.0\Device\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=529 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\sdio_sdcard.crf ..\HARDWARE\SDIO\sdio_sdcard.c]
                          THUMB

                          AREA ||i.CmdError||, CODE, READONLY, ALIGN=1

                  CmdError PROC
;;;1179   //返回值:sd卡错误码
;;;1180   SD_Error CmdError(void)
000000  b570              PUSH     {r4-r6,lr}
;;;1181   {
;;;1182   	SD_Error errorstatus = SD_OK;
000002  2500              MOVS     r5,#0
;;;1183   	u32 timeout=SDIO_CMD0TIMEOUT;	   
000004  f44f3480          MOV      r4,#0x10000
;;;1184   	while(timeout--)
000008  e004              B        |L1.20|
                  |L1.10|
;;;1185   	{
;;;1186   	  if(SDIO_GetFlagStatus(SDIO_FLAG_CMDSENT) != RESET)break;	//命令已发送(无需响应)	 
00000a  2080              MOVS     r0,#0x80
00000c  f7fffffe          BL       SDIO_GetFlagStatus
000010  b100              CBZ      r0,|L1.20|
000012  e003              B        |L1.28|
                  |L1.20|
000014  1e20              SUBS     r0,r4,#0              ;1184
000016  f1a40401          SUB      r4,r4,#1              ;1184
00001a  d1f6              BNE      |L1.10|
                  |L1.28|
00001c  bf00              NOP      
;;;1187   	}	    
;;;1188   	if(timeout==0)return SD_CMD_RSP_TIMEOUT;  
00001e  b90c              CBNZ     r4,|L1.36|
000020  2003              MOVS     r0,#3
                  |L1.34|
;;;1189   	SDIO_ClearFlag(SDIO_STATIC_FLAGS);//清除所有标记
;;;1190   	return errorstatus;
;;;1191   }	 
000022  bd70              POP      {r4-r6,pc}
                  |L1.36|
000024  f24050ff          MOV      r0,#0x5ff             ;1189
000028  f7fffffe          BL       SDIO_ClearFlag
00002c  4628              MOV      r0,r5                 ;1190
00002e  e7f8              B        |L1.34|
;;;1192   //检查R7响应的错误状态
                          ENDP


                          AREA ||i.CmdResp1Error||, CODE, READONLY, ALIGN=2

                  CmdResp1Error PROC
;;;1219   //返回值:sd卡错误码
;;;1220   SD_Error CmdResp1Error(u8 cmd)
000000  b570              PUSH     {r4-r6,lr}
;;;1221   {	  
000002  4604              MOV      r4,r0
;;;1222      	u32 status; 
;;;1223   	while(1)
000004  e005              B        |L2.18|
                  |L2.6|
;;;1224   	{
;;;1225   		status=SDIO->STA;
000006  4815              LDR      r0,|L2.92|
000008  6b45              LDR      r5,[r0,#0x34]
;;;1226   		if(status&((1<<0)|(1<<2)|(1<<6)))break;//CRC错误/命令响应超时/已经收到响应(CRC校验成功)
00000a  f0050045          AND      r0,r5,#0x45
00000e  b100              CBZ      r0,|L2.18|
000010  e000              B        |L2.20|
                  |L2.18|
000012  e7f8              B        |L2.6|
                  |L2.20|
000014  bf00              NOP      
;;;1227   	} 
;;;1228   	if(SDIO_GetFlagStatus(SDIO_FLAG_CTIMEOUT) != RESET)					//响应超时
000016  2004              MOVS     r0,#4
000018  f7fffffe          BL       SDIO_GetFlagStatus
00001c  b120              CBZ      r0,|L2.40|
;;;1229   	{																				    
;;;1230    		SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT); 				//清除命令响应超时标志
00001e  2004              MOVS     r0,#4
000020  f7fffffe          BL       SDIO_ClearFlag
;;;1231   		return SD_CMD_RSP_TIMEOUT;
000024  2003              MOVS     r0,#3
                  |L2.38|
;;;1232   	}	
;;;1233    	if(SDIO_GetFlagStatus(SDIO_FLAG_CCRCFAIL) != RESET)					//CRC错误
;;;1234   	{																				    
;;;1235    		SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL); 				//清除标志
;;;1236   		return SD_CMD_CRC_FAIL;
;;;1237   	}		
;;;1238   	if(SDIO->RESPCMD!=cmd)return SD_ILLEGAL_CMD;//命令不匹配 
;;;1239     	SDIO->ICR=0X5FF;	 				//清除标记
;;;1240   	return (SD_Error)(SDIO->RESP1&SD_OCR_ERRORBITS);//返回卡响应
;;;1241   }
000026  bd70              POP      {r4-r6,pc}
                  |L2.40|
000028  2001              MOVS     r0,#1                 ;1233
00002a  f7fffffe          BL       SDIO_GetFlagStatus
00002e  b120              CBZ      r0,|L2.58|
000030  2001              MOVS     r0,#1                 ;1235
000032  f7fffffe          BL       SDIO_ClearFlag
000036  2001              MOVS     r0,#1                 ;1236
000038  e7f5              B        |L2.38|
                  |L2.58|
00003a  4808              LDR      r0,|L2.92|
00003c  6900              LDR      r0,[r0,#0x10]         ;1238
00003e  42a0              CMP      r0,r4                 ;1238
000040  d001              BEQ      |L2.70|
000042  2010              MOVS     r0,#0x10              ;1238
000044  e7ef              B        |L2.38|
                  |L2.70|
000046  f24050ff          MOV      r0,#0x5ff             ;1239
00004a  4904              LDR      r1,|L2.92|
00004c  6388              STR      r0,[r1,#0x38]         ;1239
00004e  4608              MOV      r0,r1                 ;1240
000050  6940              LDR      r0,[r0,#0x14]         ;1240
000052  2108              MOVS     r1,#8                 ;1240
000054  4008              ANDS     r0,r0,r1              ;1240
000056  b2c0              UXTB     r0,r0                 ;1240
000058  e7e5              B        |L2.38|
;;;1242   //检查R3响应的错误状态
                          ENDP

00005a  0000              DCW      0x0000
                  |L2.92|
                          DCD      0x40018000

                          AREA ||i.CmdResp2Error||, CODE, READONLY, ALIGN=2

                  CmdResp2Error PROC
;;;1261   //返回值:错误状态
;;;1262   SD_Error CmdResp2Error(void)
000000  b570              PUSH     {r4-r6,lr}
;;;1263   {
;;;1264   	SD_Error errorstatus=SD_OK;
000002  2600              MOVS     r6,#0
;;;1265   	u32 status;
;;;1266   	u32 timeout=SDIO_CMD0TIMEOUT;
000004  f44f3580          MOV      r5,#0x10000
;;;1267    	while(timeout--)
000008  e005              B        |L3.22|
                  |L3.10|
;;;1268   	{
;;;1269   		status=SDIO->STA;
00000a  4811              LDR      r0,|L3.80|
00000c  6b44              LDR      r4,[r0,#0x34]
;;;1270   		if(status&((1<<0)|(1<<2)|(1<<6)))break;//CRC错误/命令响应超时/已经收到响应(CRC校验成功)	
00000e  f0040045          AND      r0,r4,#0x45
000012  b100              CBZ      r0,|L3.22|
000014  e003              B        |L3.30|
                  |L3.22|
000016  1e28              SUBS     r0,r5,#0              ;1267
000018  f1a50501          SUB      r5,r5,#1              ;1267
00001c  d1f5              BNE      |L3.10|
                  |L3.30|
00001e  bf00              NOP      
;;;1271   	}
;;;1272     	if((timeout==0)||(status&(1<<2)))	//响应超时
000020  b115              CBZ      r5,|L3.40|
000022  f0040004          AND      r0,r4,#4
000026  b128              CBZ      r0,|L3.52|
                  |L3.40|
;;;1273   	{																				    
;;;1274   		errorstatus=SD_CMD_RSP_TIMEOUT; 
000028  2603              MOVS     r6,#3
;;;1275   		SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT); 		//清除命令响应超时标志
00002a  2004              MOVS     r0,#4
00002c  f7fffffe          BL       SDIO_ClearFlag
;;;1276   		return errorstatus;
000030  4630              MOV      r0,r6
                  |L3.50|
;;;1277   	}	 
;;;1278   	if(SDIO_GetFlagStatus(SDIO_FLAG_CCRCFAIL) != RESET)						//CRC错误
;;;1279   	{								   
;;;1280   		errorstatus=SD_CMD_CRC_FAIL;
;;;1281   		SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);		//清除响应标志
;;;1282    	}
;;;1283   	SDIO_ClearFlag(SDIO_STATIC_FLAGS);//清除所有标记
;;;1284    	return errorstatus;								    		 
;;;1285   } 
000032  bd70              POP      {r4-r6,pc}
                  |L3.52|
000034  2001              MOVS     r0,#1                 ;1278
000036  f7fffffe          BL       SDIO_GetFlagStatus
00003a  b118              CBZ      r0,|L3.68|
00003c  2601              MOVS     r6,#1                 ;1280
00003e  2001              MOVS     r0,#1                 ;1281
000040  f7fffffe          BL       SDIO_ClearFlag
                  |L3.68|
000044  f24050ff          MOV      r0,#0x5ff             ;1283
000048  f7fffffe          BL       SDIO_ClearFlag
00004c  4630              MOV      r0,r6                 ;1284
00004e  e7f0              B        |L3.50|
;;;1286   //检查R6响应的错误状态
                          ENDP

                  |L3.80|
                          DCD      0x40018000

                          AREA ||i.CmdResp3Error||, CODE, READONLY, ALIGN=2

                  CmdResp3Error PROC
;;;1243   //返回值:错误状态
;;;1244   SD_Error CmdResp3Error(void)
000000  b510              PUSH     {r4,lr}
;;;1245   {
;;;1246   	u32 status;						 
;;;1247    	while(1)
000002  e005              B        |L4.16|
                  |L4.4|
;;;1248   	{
;;;1249   		status=SDIO->STA;
000004  480b              LDR      r0,|L4.52|
000006  6b44              LDR      r4,[r0,#0x34]
;;;1250   		if(status&((1<<0)|(1<<2)|(1<<6)))break;//CRC错误/命令响应超时/已经收到响应(CRC校验成功)	
000008  f0040045          AND      r0,r4,#0x45
00000c  b100              CBZ      r0,|L4.16|
00000e  e000              B        |L4.18|
                  |L4.16|
000010  e7f8              B        |L4.4|
                  |L4.18|
000012  bf00              NOP      
;;;1251   	}
;;;1252    	if(SDIO_GetFlagStatus(SDIO_FLAG_CTIMEOUT) != RESET)					//响应超时
000014  2004              MOVS     r0,#4
000016  f7fffffe          BL       SDIO_GetFlagStatus
00001a  b120              CBZ      r0,|L4.38|
;;;1253   	{											 
;;;1254   		SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);			//清除命令响应超时标志
00001c  2004              MOVS     r0,#4
00001e  f7fffffe          BL       SDIO_ClearFlag
;;;1255   		return SD_CMD_RSP_TIMEOUT;
000022  2003              MOVS     r0,#3
                  |L4.36|
;;;1256   	}	 
;;;1257      SDIO_ClearFlag(SDIO_STATIC_FLAGS);//清除所有标记
;;;1258    	return SD_OK;						  
;;;1259   }
000024  bd10              POP      {r4,pc}
                  |L4.38|
000026  f24050ff          MOV      r0,#0x5ff             ;1257
00002a  f7fffffe          BL       SDIO_ClearFlag
00002e  2000              MOVS     r0,#0                 ;1258
000030  e7f8              B        |L4.36|
;;;1260   //检查R2响应的错误状态
                          ENDP

000032  0000              DCW      0x0000
                  |L4.52|
                          DCD      0x40018000

                          AREA ||i.CmdResp6Error||, CODE, READONLY, ALIGN=2

                  CmdResp6Error PROC
;;;1289   //返回值:错误状态
;;;1290   SD_Error CmdResp6Error(u8 cmd,u16*prca)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1291   {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;1292   	SD_Error errorstatus=SD_OK;
000008  f04f0800          MOV      r8,#0
;;;1293   	u32 status;					    
;;;1294   	u32 rspr1;
;;;1295    	while(1)
00000c  e005              B        |L5.26|
                  |L5.14|
;;;1296   	{
;;;1297   		status=SDIO->STA;
00000e  481f              LDR      r0,|L5.140|
000010  6b47              LDR      r7,[r0,#0x34]
;;;1298   		if(status&((1<<0)|(1<<2)|(1<<6)))break;//CRC错误/命令响应超时/已经收到响应(CRC校验成功)	
000012  f0070045          AND      r0,r7,#0x45
000016  b100              CBZ      r0,|L5.26|
000018  e000              B        |L5.28|
                  |L5.26|
00001a  e7f8              B        |L5.14|
                  |L5.28|
00001c  bf00              NOP      
;;;1299   	}
;;;1300   	if(SDIO_GetFlagStatus(SDIO_FLAG_CTIMEOUT) != RESET)					//响应超时
00001e  2004              MOVS     r0,#4
000020  f7fffffe          BL       SDIO_GetFlagStatus
000024  b128              CBZ      r0,|L5.50|
;;;1301   	{																				    
;;;1302    		SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);			//清除命令响应超时标志
000026  2004              MOVS     r0,#4
000028  f7fffffe          BL       SDIO_ClearFlag
;;;1303   		return SD_CMD_RSP_TIMEOUT;
00002c  2003              MOVS     r0,#3
                  |L5.46|
;;;1304   	}	 	 
;;;1305   	if(SDIO_GetFlagStatus(SDIO_FLAG_CCRCFAIL) != RESET)						//CRC错误
;;;1306   	{								   
;;;1307   		SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);					//清除响应标志
;;;1308    		return SD_CMD_CRC_FAIL;
;;;1309   	}
;;;1310   	if(SDIO->RESPCMD!=cmd)				//判断是否响应cmd命令
;;;1311   	{
;;;1312    		return SD_ILLEGAL_CMD; 		
;;;1313   	}	    
;;;1314   	SDIO_ClearFlag(SDIO_STATIC_FLAGS);//清除所有标记
;;;1315   	
;;;1316   	rspr1=SDIO->RESP1;					//得到响应 	 
;;;1317   	if(SD_ALLZERO==(rspr1&(SD_R6_GENERAL_UNKNOWN_ERROR|SD_R6_ILLEGAL_CMD|SD_R6_COM_CRC_FAILED)))
;;;1318   	{
;;;1319   		*prca=(u16)(rspr1>>16);			//右移16位得到,rca
;;;1320   		return errorstatus;
;;;1321   	}
;;;1322      	if(rspr1&SD_R6_GENERAL_UNKNOWN_ERROR)return SD_GENERAL_UNKNOWN_ERROR;
;;;1323      	if(rspr1&SD_R6_ILLEGAL_CMD)return SD_ILLEGAL_CMD;
;;;1324      	if(rspr1&SD_R6_COM_CRC_FAILED)return SD_COM_CRC_FAILED;
;;;1325   	return errorstatus;
;;;1326   }
00002e  e8bd81f0          POP      {r4-r8,pc}
                  |L5.50|
000032  2001              MOVS     r0,#1                 ;1305
000034  f7fffffe          BL       SDIO_GetFlagStatus
000038  b120              CBZ      r0,|L5.68|
00003a  2001              MOVS     r0,#1                 ;1307
00003c  f7fffffe          BL       SDIO_ClearFlag
000040  2001              MOVS     r0,#1                 ;1308
000042  e7f4              B        |L5.46|
                  |L5.68|
000044  4811              LDR      r0,|L5.140|
000046  6900              LDR      r0,[r0,#0x10]         ;1310
000048  42a8              CMP      r0,r5                 ;1310
00004a  d001              BEQ      |L5.80|
00004c  2010              MOVS     r0,#0x10              ;1312
00004e  e7ee              B        |L5.46|
                  |L5.80|
000050  f24050ff          MOV      r0,#0x5ff             ;1314
000054  f7fffffe          BL       SDIO_ClearFlag
000058  480c              LDR      r0,|L5.140|
00005a  6944              LDR      r4,[r0,#0x14]         ;1316
00005c  f4044060          AND      r0,r4,#0xe000         ;1317
000060  b918              CBNZ     r0,|L5.106|
000062  0c20              LSRS     r0,r4,#16             ;1319
000064  8030              STRH     r0,[r6,#0]            ;1319
000066  4640              MOV      r0,r8                 ;1320
000068  e7e1              B        |L5.46|
                  |L5.106|
00006a  f4045000          AND      r0,r4,#0x2000         ;1322
00006e  b108              CBZ      r0,|L5.116|
000070  2013              MOVS     r0,#0x13              ;1322
000072  e7dc              B        |L5.46|
                  |L5.116|
000074  f4044080          AND      r0,r4,#0x4000         ;1323
000078  b108              CBZ      r0,|L5.126|
00007a  2010              MOVS     r0,#0x10              ;1323
00007c  e7d7              B        |L5.46|
                  |L5.126|
00007e  f4044000          AND      r0,r4,#0x8000         ;1324
000082  b108              CBZ      r0,|L5.136|
000084  200f              MOVS     r0,#0xf               ;1324
000086  e7d2              B        |L5.46|
                  |L5.136|
000088  4640              MOV      r0,r8                 ;1325
00008a  e7d0              B        |L5.46|
;;;1327   
                          ENDP

                  |L5.140|
                          DCD      0x40018000

                          AREA ||i.CmdResp7Error||, CODE, READONLY, ALIGN=2

                  CmdResp7Error PROC
;;;1193   //返回值:sd卡错误码
;;;1194   SD_Error CmdResp7Error(void)
000000  b570              PUSH     {r4-r6,lr}
;;;1195   {
;;;1196   	SD_Error errorstatus=SD_OK;
000002  2600              MOVS     r6,#0
;;;1197   	u32 status;
;;;1198   	u32 timeout=SDIO_CMD0TIMEOUT;
000004  f44f3580          MOV      r5,#0x10000
;;;1199    	while(timeout--)
000008  e005              B        |L6.22|
                  |L6.10|
;;;1200   	{
;;;1201   		status=SDIO->STA;
00000a  480f              LDR      r0,|L6.72|
00000c  6b44              LDR      r4,[r0,#0x34]
;;;1202   		if(status&((1<<0)|(1<<2)|(1<<6)))break;//CRC错误/命令响应超时/已经收到响应(CRC校验成功)	
00000e  f0040045          AND      r0,r4,#0x45
000012  b100              CBZ      r0,|L6.22|
000014  e003              B        |L6.30|
                  |L6.22|
000016  1e28              SUBS     r0,r5,#0              ;1199
000018  f1a50501          SUB      r5,r5,#1              ;1199
00001c  d1f5              BNE      |L6.10|
                  |L6.30|
00001e  bf00              NOP      
;;;1203   	}
;;;1204    	if((timeout==0)||(status&(1<<2)))	//响应超时
000020  b115              CBZ      r5,|L6.40|
000022  f0040004          AND      r0,r4,#4
000026  b128              CBZ      r0,|L6.52|
                  |L6.40|
;;;1205   	{																				    
;;;1206   		errorstatus=SD_CMD_RSP_TIMEOUT;	//当前卡不是2.0兼容卡,或者不支持设定的电压范围
000028  2603              MOVS     r6,#3
;;;1207   		SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT); 			//清除命令响应超时标志
00002a  2004              MOVS     r0,#4
00002c  f7fffffe          BL       SDIO_ClearFlag
;;;1208   		return errorstatus;
000030  4630              MOV      r0,r6
                  |L6.50|
;;;1209   	}	 
;;;1210   	if(status&1<<6)						//成功接收到响应
;;;1211   	{								   
;;;1212   		errorstatus=SD_OK;
;;;1213   		SDIO_ClearFlag(SDIO_FLAG_CMDREND); 				//清除响应标志
;;;1214    	}
;;;1215   	return errorstatus;
;;;1216   }	   
000032  bd70              POP      {r4-r6,pc}
                  |L6.52|
000034  f0040040          AND      r0,r4,#0x40           ;1210
000038  b118              CBZ      r0,|L6.66|
00003a  2600              MOVS     r6,#0                 ;1212
00003c  2040              MOVS     r0,#0x40              ;1213
00003e  f7fffffe          BL       SDIO_ClearFlag
                  |L6.66|
000042  4630              MOV      r0,r6                 ;1215
000044  e7f5              B        |L6.50|
;;;1217   //检查R1响应的错误状态
                          ENDP

000046  0000              DCW      0x0000
                  |L6.72|
                          DCD      0x40018000

                          AREA ||i.FindSCR||, CODE, READONLY, ALIGN=2

                  FindSCR PROC
;;;1438   //返回值:错误状态		   
;;;1439   SD_Error FindSCR(u16 rca,u32 *pscr)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;1440   { 
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
;;;1441   	u32 index = 0; 
000008  2600              MOVS     r6,#0
;;;1442   	SD_Error errorstatus = SD_OK;
00000a  2400              MOVS     r4,#0
;;;1443   	u32 tempscr[2]={0,0};  
00000c  2000              MOVS     r0,#0
00000e  9000              STR      r0,[sp,#0]
000010  9001              STR      r0,[sp,#4]
;;;1444    	
;;;1445   	
;;;1446   	SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)8;	 //发送CMD16,短响应,设置Block Size为8字节	
000012  2008              MOVS     r0,#8
000014  495b              LDR      r1,|L7.388|
000016  6008              STR      r0,[r1,#0]  ; SDIO_CmdInitStructure
;;;1447     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN; //	 cmd16
000018  2010              MOVS     r0,#0x10
00001a  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;1448     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;  //r1
00001c  2040              MOVS     r0,#0x40
00001e  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;1449     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
000020  2000              MOVS     r0,#0
000022  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;1450     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
000024  f44f6080          MOV      r0,#0x400
000028  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;1451     SDIO_SendCommand(&SDIO_CmdInitStructure);
00002a  4608              MOV      r0,r1
00002c  f7fffffe          BL       SDIO_SendCommand
;;;1452   	
;;;1453    	errorstatus=CmdResp1Error(SD_CMD_SET_BLOCKLEN);
000030  2010              MOVS     r0,#0x10
000032  f7fffffe          BL       CmdResp1Error
000036  4604              MOV      r4,r0
;;;1454   	
;;;1455    	if(errorstatus!=SD_OK)return errorstatus;	    
000038  b114              CBZ      r4,|L7.64|
00003a  4620              MOV      r0,r4
                  |L7.60|
;;;1456   	
;;;1457     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16; 
;;;1458     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;//发送CMD55,短响应 	
;;;1459     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1460     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1461     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1462     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1463   	
;;;1464    	errorstatus=CmdResp1Error(SD_CMD_APP_CMD);
;;;1465   	
;;;1466    	if(errorstatus!=SD_OK)return errorstatus;
;;;1467   	
;;;1468     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;1469     SDIO_DataInitStructure.SDIO_DataLength = 8;  //8个字节长度,block为8字节,SD卡到SDIO.
;;;1470     SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_8b  ;  //块大小8byte 
;;;1471     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
;;;1472     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;1473     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
;;;1474     SDIO_DataConfig(&SDIO_DataInitStructure);		
;;;1475   	
;;;1476     SDIO_CmdInitStructure.SDIO_Argument = 0x0;
;;;1477     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_APP_SEND_SCR;	//发送ACMD51,短响应,参数为0	
;;;1478     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;  //r1
;;;1479     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1480     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1481     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1482   	
;;;1483    	errorstatus=CmdResp1Error(SD_CMD_SD_APP_SEND_SCR);
;;;1484   	
;;;1485    	if(errorstatus!=SD_OK)return errorstatus;			
;;;1486   	
;;;1487    	while(!(SDIO->STA&(SDIO_FLAG_RXOVERR|SDIO_FLAG_DCRCFAIL|SDIO_FLAG_DTIMEOUT|SDIO_FLAG_DBCKEND|SDIO_FLAG_STBITERR)))
;;;1488   	{ 
;;;1489   		if(SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)//接收FIFO数据可用
;;;1490   		{
;;;1491   			*(tempscr+index)=SDIO_ReadData();	//读取FIFO内容
;;;1492   			index++;
;;;1493   			if(index>=2)break;
;;;1494   		}
;;;1495   	}
;;;1496   	if(SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)		//数据超时错误
;;;1497   		{										   
;;;1498   	 		SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT); 	//清错误标志
;;;1499   			return SD_DATA_TIMEOUT;
;;;1500   	 	}else if(SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)	//数据块CRC错误
;;;1501   		{
;;;1502   	 		SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);  		//清错误标志
;;;1503   			return SD_DATA_CRC_FAIL;		   
;;;1504   		}else if(SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET) 	//接收fifo上溢错误
;;;1505   		{
;;;1506   	 		SDIO_ClearFlag(SDIO_FLAG_RXOVERR);		//清错误标志
;;;1507   			return SD_RX_OVERRUN;		 
;;;1508   		}else if(SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET) 	//接收起始位错误
;;;1509   		{
;;;1510   	 		SDIO_ClearFlag(SDIO_FLAG_STBITERR);//清错误标志
;;;1511   			return SD_START_BIT_ERR;		 
;;;1512   		}  
;;;1513      SDIO_ClearFlag(SDIO_STATIC_FLAGS);//清除所有标记
;;;1514   	//把数据顺序按8位为单位倒过来.   	
;;;1515   	*(pscr+1)=((tempscr[0]&SD_0TO7BITS)<<24)|((tempscr[0]&SD_8TO15BITS)<<8)|((tempscr[0]&SD_16TO23BITS)>>8)|((tempscr[0]&SD_24TO31BITS)>>24);
;;;1516   	*(pscr)=((tempscr[1]&SD_0TO7BITS)<<24)|((tempscr[1]&SD_8TO15BITS)<<8)|((tempscr[1]&SD_16TO23BITS)>>8)|((tempscr[1]&SD_24TO31BITS)>>24);
;;;1517    	return errorstatus;
;;;1518   }
00003c  e8bd81fc          POP      {r2-r8,pc}
                  |L7.64|
000040  4851              LDR      r0,|L7.392|
000042  8800              LDRH     r0,[r0,#0]            ;1457  ; RCA
000044  0400              LSLS     r0,r0,#16             ;1457
000046  494f              LDR      r1,|L7.388|
000048  6008              STR      r0,[r1,#0]            ;1457  ; SDIO_CmdInitStructure
00004a  2037              MOVS     r0,#0x37              ;1458
00004c  6048              STR      r0,[r1,#4]            ;1458  ; SDIO_CmdInitStructure
00004e  2040              MOVS     r0,#0x40              ;1459
000050  6088              STR      r0,[r1,#8]            ;1459  ; SDIO_CmdInitStructure
000052  2000              MOVS     r0,#0                 ;1460
000054  60c8              STR      r0,[r1,#0xc]          ;1460  ; SDIO_CmdInitStructure
000056  f44f6080          MOV      r0,#0x400             ;1461
00005a  6108              STR      r0,[r1,#0x10]         ;1461  ; SDIO_CmdInitStructure
00005c  4608              MOV      r0,r1                 ;1462
00005e  f7fffffe          BL       SDIO_SendCommand
000062  2037              MOVS     r0,#0x37              ;1464
000064  f7fffffe          BL       CmdResp1Error
000068  4604              MOV      r4,r0                 ;1464
00006a  b10c              CBZ      r4,|L7.112|
00006c  4620              MOV      r0,r4                 ;1466
00006e  e7e5              B        |L7.60|
                  |L7.112|
000070  f04f30ff          MOV      r0,#0xffffffff        ;1468
000074  4945              LDR      r1,|L7.396|
000076  6008              STR      r0,[r1,#0]            ;1468  ; SDIO_DataInitStructure
000078  2008              MOVS     r0,#8                 ;1469
00007a  6048              STR      r0,[r1,#4]            ;1469  ; SDIO_DataInitStructure
00007c  2030              MOVS     r0,#0x30              ;1470
00007e  6088              STR      r0,[r1,#8]            ;1470  ; SDIO_DataInitStructure
000080  2002              MOVS     r0,#2                 ;1471
000082  60c8              STR      r0,[r1,#0xc]          ;1471  ; SDIO_DataInitStructure
000084  2000              MOVS     r0,#0                 ;1472
000086  6108              STR      r0,[r1,#0x10]         ;1472  ; SDIO_DataInitStructure
000088  2001              MOVS     r0,#1                 ;1473
00008a  6148              STR      r0,[r1,#0x14]         ;1473  ; SDIO_DataInitStructure
00008c  4608              MOV      r0,r1                 ;1474
00008e  f7fffffe          BL       SDIO_DataConfig
000092  2000              MOVS     r0,#0                 ;1476
000094  493b              LDR      r1,|L7.388|
000096  6008              STR      r0,[r1,#0]            ;1476  ; SDIO_CmdInitStructure
000098  2033              MOVS     r0,#0x33              ;1477
00009a  6048              STR      r0,[r1,#4]            ;1477  ; SDIO_CmdInitStructure
00009c  2040              MOVS     r0,#0x40              ;1478
00009e  6088              STR      r0,[r1,#8]            ;1478  ; SDIO_CmdInitStructure
0000a0  2000              MOVS     r0,#0                 ;1479
0000a2  60c8              STR      r0,[r1,#0xc]          ;1479  ; SDIO_CmdInitStructure
0000a4  f44f6080          MOV      r0,#0x400             ;1480
0000a8  6108              STR      r0,[r1,#0x10]         ;1480  ; SDIO_CmdInitStructure
0000aa  4608              MOV      r0,r1                 ;1481
0000ac  f7fffffe          BL       SDIO_SendCommand
0000b0  2033              MOVS     r0,#0x33              ;1483
0000b2  f7fffffe          BL       CmdResp1Error
0000b6  4604              MOV      r4,r0                 ;1483
0000b8  b10c              CBZ      r4,|L7.190|
0000ba  4620              MOV      r0,r4                 ;1485
0000bc  e7be              B        |L7.60|
                  |L7.190|
0000be  e00c              B        |L7.218|
                  |L7.192|
0000c0  f44f1000          MOV      r0,#0x200000          ;1489
0000c4  f7fffffe          BL       SDIO_GetFlagStatus
0000c8  b138              CBZ      r0,|L7.218|
0000ca  f7fffffe          BL       SDIO_ReadData
0000ce  f84d0026          STR      r0,[sp,r6,LSL #2]     ;1491
0000d2  1c76              ADDS     r6,r6,#1              ;1492
0000d4  2e02              CMP      r6,#2                 ;1493
0000d6  d300              BCC      |L7.218|
0000d8  e006              B        |L7.232|
                  |L7.218|
0000da  482d              LDR      r0,|L7.400|
0000dc  6b40              LDR      r0,[r0,#0x34]         ;1487
0000de  f240612a          MOV      r1,#0x62a             ;1487
0000e2  4008              ANDS     r0,r0,r1              ;1487
0000e4  2800              CMP      r0,#0                 ;1487
0000e6  d0eb              BEQ      |L7.192|
                  |L7.232|
0000e8  bf00              NOP                            ;1493
0000ea  2008              MOVS     r0,#8                 ;1496
0000ec  f7fffffe          BL       SDIO_GetFlagStatus
0000f0  b120              CBZ      r0,|L7.252|
0000f2  2008              MOVS     r0,#8                 ;1498
0000f4  f7fffffe          BL       SDIO_ClearFlag
0000f8  2004              MOVS     r0,#4                 ;1499
0000fa  e79f              B        |L7.60|
                  |L7.252|
0000fc  2002              MOVS     r0,#2                 ;1500
0000fe  f7fffffe          BL       SDIO_GetFlagStatus
000102  b120              CBZ      r0,|L7.270|
000104  2002              MOVS     r0,#2                 ;1502
000106  f7fffffe          BL       SDIO_ClearFlag
00010a  2002              MOVS     r0,#2                 ;1503
00010c  e796              B        |L7.60|
                  |L7.270|
00010e  2020              MOVS     r0,#0x20              ;1504
000110  f7fffffe          BL       SDIO_GetFlagStatus
000114  b120              CBZ      r0,|L7.288|
000116  2020              MOVS     r0,#0x20              ;1506
000118  f7fffffe          BL       SDIO_ClearFlag
00011c  2006              MOVS     r0,#6                 ;1507
00011e  e78d              B        |L7.60|
                  |L7.288|
000120  f44f7000          MOV      r0,#0x200             ;1508
000124  f7fffffe          BL       SDIO_GetFlagStatus
000128  b128              CBZ      r0,|L7.310|
00012a  f44f7000          MOV      r0,#0x200             ;1510
00012e  f7fffffe          BL       SDIO_ClearFlag
000132  2007              MOVS     r0,#7                 ;1511
000134  e782              B        |L7.60|
                  |L7.310|
000136  f24050ff          MOV      r0,#0x5ff             ;1513
00013a  f7fffffe          BL       SDIO_ClearFlag
00013e  9800              LDR      r0,[sp,#0]            ;1515
000140  0600              LSLS     r0,r0,#24             ;1515
000142  9900              LDR      r1,[sp,#0]            ;1515
000144  f401417f          AND      r1,r1,#0xff00         ;1515
000148  ea402001          ORR      r0,r0,r1,LSL #8       ;1515
00014c  9900              LDR      r1,[sp,#0]            ;1515
00014e  f401017f          AND      r1,r1,#0xff0000       ;1515
000152  ea402011          ORR      r0,r0,r1,LSR #8       ;1515
000156  9900              LDR      r1,[sp,#0]            ;1515
000158  ea406011          ORR      r0,r0,r1,LSR #24      ;1515
00015c  6068              STR      r0,[r5,#4]            ;1515
00015e  9801              LDR      r0,[sp,#4]            ;1516
000160  0600              LSLS     r0,r0,#24             ;1516
000162  9901              LDR      r1,[sp,#4]            ;1516
000164  f401417f          AND      r1,r1,#0xff00         ;1516
000168  ea402001          ORR      r0,r0,r1,LSL #8       ;1516
00016c  9901              LDR      r1,[sp,#4]            ;1516
00016e  f401017f          AND      r1,r1,#0xff0000       ;1516
000172  ea402011          ORR      r0,r0,r1,LSR #8       ;1516
000176  9901              LDR      r1,[sp,#4]            ;1516
000178  ea406011          ORR      r0,r0,r1,LSR #24      ;1516
00017c  6028              STR      r0,[r5,#0]            ;1516
00017e  4620              MOV      r0,r4                 ;1517
000180  e75c              B        |L7.60|
;;;1519   //得到NumberOfBytes以2为底的指数.
                          ENDP

000182  0000              DCW      0x0000
                  |L7.388|
                          DCD      SDIO_CmdInitStructure
                  |L7.392|
                          DCD      ||RCA||
                  |L7.396|
                          DCD      SDIO_DataInitStructure
                  |L7.400|
                          DCD      0x40018000

                          AREA ||i.IsCardProgramming||, CODE, READONLY, ALIGN=2

                  IsCardProgramming PROC
;;;1367   //返回值:错误代码
;;;1368   SD_Error IsCardProgramming(u8 *pstatus)
000000  b51c              PUSH     {r2-r4,lr}
;;;1369   {
000002  4604              MOV      r4,r0
;;;1370    	vu32 respR1 = 0, status = 0; 
000004  2000              MOVS     r0,#0
000006  9001              STR      r0,[sp,#4]
000008  9000              STR      r0,[sp,#0]
;;;1371     
;;;1372   	
;;;1373     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16; //卡相对地址参数
00000a  4821              LDR      r0,|L8.144|
00000c  8800              LDRH     r0,[r0,#0]  ; RCA
00000e  0400              LSLS     r0,r0,#16
000010  4920              LDR      r1,|L8.148|
000012  6008              STR      r0,[r1,#0]  ; SDIO_CmdInitStructure
;;;1374     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_STATUS;//发送CMD13 	
000014  200d              MOVS     r0,#0xd
000016  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;1375     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
000018  2040              MOVS     r0,#0x40
00001a  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;1376     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
00001c  2000              MOVS     r0,#0
00001e  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;1377     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
000020  f44f6080          MOV      r0,#0x400
000024  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;1378     SDIO_SendCommand(&SDIO_CmdInitStructure);	
000026  4608              MOV      r0,r1
000028  f7fffffe          BL       SDIO_SendCommand
;;;1379   	
;;;1380     status=SDIO->STA;
00002c  481a              LDR      r0,|L8.152|
00002e  6b40              LDR      r0,[r0,#0x34]
000030  9000              STR      r0,[sp,#0]
;;;1381   	
;;;1382   	while(!(status&((1<<0)|(1<<6)|(1<<2))))status=SDIO->STA;//等待操作完成
000032  e002              B        |L8.58|
                  |L8.52|
000034  4818              LDR      r0,|L8.152|
000036  6b40              LDR      r0,[r0,#0x34]
000038  9000              STR      r0,[sp,#0]
                  |L8.58|
00003a  9800              LDR      r0,[sp,#0]
00003c  f0000045          AND      r0,r0,#0x45
000040  2800              CMP      r0,#0
000042  d0f7              BEQ      |L8.52|
;;;1383   	
;;;1384    	if(SDIO_GetFlagStatus(SDIO_FLAG_CCRCFAIL) != RESET)			//CRC检测失败
000044  2001              MOVS     r0,#1
000046  f7fffffe          BL       SDIO_GetFlagStatus
00004a  b120              CBZ      r0,|L8.86|
;;;1385   	{  
;;;1386   	  SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);	//清除错误标记
00004c  2001              MOVS     r0,#1
00004e  f7fffffe          BL       SDIO_ClearFlag
;;;1387   		return SD_CMD_CRC_FAIL;
000052  2001              MOVS     r0,#1
                  |L8.84|
;;;1388   	}
;;;1389      if(SDIO_GetFlagStatus(SDIO_FLAG_CTIMEOUT) != RESET)			//命令超时 
;;;1390   	{
;;;1391   		SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);			//清除错误标记
;;;1392   		return SD_CMD_RSP_TIMEOUT;
;;;1393   	}
;;;1394    	if(SDIO->RESPCMD!=SD_CMD_SEND_STATUS)return SD_ILLEGAL_CMD;
;;;1395   	
;;;1396   	SDIO_ClearFlag(SDIO_STATIC_FLAGS);//清除所有标记
;;;1397   	
;;;1398   	respR1=SDIO->RESP1;
;;;1399   	
;;;1400   	*pstatus=(u8)((respR1>>9)&0x0000000F);
;;;1401   	return SD_OK;
;;;1402   }
000054  bd1c              POP      {r2-r4,pc}
                  |L8.86|
000056  2004              MOVS     r0,#4                 ;1389
000058  f7fffffe          BL       SDIO_GetFlagStatus
00005c  b120              CBZ      r0,|L8.104|
00005e  2004              MOVS     r0,#4                 ;1391
000060  f7fffffe          BL       SDIO_ClearFlag
000064  2003              MOVS     r0,#3                 ;1392
000066  e7f5              B        |L8.84|
                  |L8.104|
000068  480b              LDR      r0,|L8.152|
00006a  6900              LDR      r0,[r0,#0x10]         ;1394
00006c  280d              CMP      r0,#0xd               ;1394
00006e  d001              BEQ      |L8.116|
000070  2010              MOVS     r0,#0x10              ;1394
000072  e7ef              B        |L8.84|
                  |L8.116|
000074  f24050ff          MOV      r0,#0x5ff             ;1396
000078  f7fffffe          BL       SDIO_ClearFlag
00007c  4806              LDR      r0,|L8.152|
00007e  6940              LDR      r0,[r0,#0x14]         ;1398
000080  9001              STR      r0,[sp,#4]            ;1398
000082  9801              LDR      r0,[sp,#4]            ;1400
000084  f3c02043          UBFX     r0,r0,#9,#4           ;1400
000088  7020              STRB     r0,[r4,#0]            ;1400
00008a  2000              MOVS     r0,#0                 ;1401
00008c  e7e2              B        |L8.84|
;;;1403   //读取当前卡状态
                          ENDP

00008e  0000              DCW      0x0000
                  |L8.144|
                          DCD      ||RCA||
                  |L8.148|
                          DCD      SDIO_CmdInitStructure
                  |L8.152|
                          DCD      0x40018000

                          AREA ||i.SDEnWideBus||, CODE, READONLY, ALIGN=2

                  SDEnWideBus PROC
;;;1330   //返回值:错误状态
;;;1331   SD_Error SDEnWideBus(u8 enx)
000000  b57c              PUSH     {r2-r6,lr}
;;;1332   {
000002  4605              MOV      r5,r0
;;;1333   	SD_Error errorstatus = SD_OK;
000004  2400              MOVS     r4,#0
;;;1334    	u32 scr[2]={0,0};
000006  2000              MOVS     r0,#0
000008  9000              STR      r0,[sp,#0]
00000a  9001              STR      r0,[sp,#4]
;;;1335   	u8 arg=0X00;
00000c  2600              MOVS     r6,#0
;;;1336   	if(enx)arg=0X02;
00000e  b10d              CBZ      r5,|L9.20|
000010  2602              MOVS     r6,#2
000012  e000              B        |L9.22|
                  |L9.20|
;;;1337   	else arg=0X00;
000014  2600              MOVS     r6,#0
                  |L9.22|
;;;1338    	if(SDIO->RESP1&SD_CARD_LOCKED)return SD_LOCK_UNLOCK_FAILED;//SD卡处于LOCKED状态		    
000016  4822              LDR      r0,|L9.160|
000018  6940              LDR      r0,[r0,#0x14]
00001a  f0007000          AND      r0,r0,#0x2000000
00001e  b108              CBZ      r0,|L9.36|
000020  200e              MOVS     r0,#0xe
                  |L9.34|
;;;1339    	errorstatus=FindSCR(RCA,scr);						//得到SCR寄存器数据
;;;1340    	if(errorstatus!=SD_OK)return errorstatus;
;;;1341   	if((scr[1]&SD_WIDE_BUS_SUPPORT)!=SD_ALLZERO)		//支持宽总线
;;;1342   	{
;;;1343   	 SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;//发送CMD55+RCA,短响应	
;;;1344      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;1345      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1346      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1347      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1348      SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1349   		
;;;1350   	 errorstatus=CmdResp1Error(SD_CMD_APP_CMD);
;;;1351   		
;;;1352   	 if(errorstatus!=SD_OK)return errorstatus; 
;;;1353   	
;;;1354   	 SDIO_CmdInitStructure.SDIO_Argument = arg;//发送ACMD6,短响应,参数:10,4位;00,1位.	
;;;1355      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_SD_SET_BUSWIDTH;
;;;1356      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1357      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1358      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1359      SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1360   			
;;;1361   	 errorstatus=CmdResp1Error(SD_CMD_APP_SD_SET_BUSWIDTH);
;;;1362   	 return errorstatus;
;;;1363   	}else return SD_REQUEST_NOT_APPLICABLE;				//不支持宽总线设置 	 
;;;1364   }												   
000022  bd7c              POP      {r2-r6,pc}
                  |L9.36|
000024  491f              LDR      r1,|L9.164|
000026  8809              LDRH     r1,[r1,#0]            ;1339  ; RCA
000028  b288              UXTH     r0,r1                 ;1339
00002a  4669              MOV      r1,sp                 ;1339
00002c  f7fffffe          BL       FindSCR
000030  4604              MOV      r4,r0                 ;1339
000032  b10c              CBZ      r4,|L9.56|
000034  4620              MOV      r0,r4                 ;1340
000036  e7f4              B        |L9.34|
                  |L9.56|
000038  9801              LDR      r0,[sp,#4]            ;1341
00003a  f4002080          AND      r0,r0,#0x40000        ;1341
00003e  b360              CBZ      r0,|L9.154|
000040  4818              LDR      r0,|L9.164|
000042  8800              LDRH     r0,[r0,#0]            ;1343  ; RCA
000044  0400              LSLS     r0,r0,#16             ;1343
000046  4918              LDR      r1,|L9.168|
000048  6008              STR      r0,[r1,#0]            ;1343  ; SDIO_CmdInitStructure
00004a  2037              MOVS     r0,#0x37              ;1344
00004c  6048              STR      r0,[r1,#4]            ;1344  ; SDIO_CmdInitStructure
00004e  2040              MOVS     r0,#0x40              ;1345
000050  6088              STR      r0,[r1,#8]            ;1345  ; SDIO_CmdInitStructure
000052  2000              MOVS     r0,#0                 ;1346
000054  60c8              STR      r0,[r1,#0xc]          ;1346  ; SDIO_CmdInitStructure
000056  f44f6080          MOV      r0,#0x400             ;1347
00005a  6108              STR      r0,[r1,#0x10]         ;1347  ; SDIO_CmdInitStructure
00005c  4608              MOV      r0,r1                 ;1348
00005e  f7fffffe          BL       SDIO_SendCommand
000062  2037              MOVS     r0,#0x37              ;1350
000064  f7fffffe          BL       CmdResp1Error
000068  4604              MOV      r4,r0                 ;1350
00006a  b10c              CBZ      r4,|L9.112|
00006c  4620              MOV      r0,r4                 ;1352
00006e  e7d8              B        |L9.34|
                  |L9.112|
000070  480d              LDR      r0,|L9.168|
000072  6006              STR      r6,[r0,#0]            ;1354  ; SDIO_CmdInitStructure
000074  2006              MOVS     r0,#6                 ;1355
000076  490c              LDR      r1,|L9.168|
000078  6048              STR      r0,[r1,#4]            ;1355  ; SDIO_CmdInitStructure
00007a  2040              MOVS     r0,#0x40              ;1356
00007c  6088              STR      r0,[r1,#8]            ;1356  ; SDIO_CmdInitStructure
00007e  2000              MOVS     r0,#0                 ;1357
000080  60c8              STR      r0,[r1,#0xc]          ;1357  ; SDIO_CmdInitStructure
000082  f44f6080          MOV      r0,#0x400             ;1358
000086  6108              STR      r0,[r1,#0x10]         ;1358  ; SDIO_CmdInitStructure
000088  4608              MOV      r0,r1                 ;1359
00008a  f7fffffe          BL       SDIO_SendCommand
00008e  2006              MOVS     r0,#6                 ;1361
000090  f7fffffe          BL       CmdResp1Error
000094  4604              MOV      r4,r0                 ;1361
000096  4620              MOV      r0,r4                 ;1362
000098  e7c3              B        |L9.34|
                  |L9.154|
00009a  2025              MOVS     r0,#0x25              ;1363
00009c  e7c1              B        |L9.34|
;;;1365   //检查卡是否正在执行写操作
                          ENDP

00009e  0000              DCW      0x0000
                  |L9.160|
                          DCD      0x40018000
                  |L9.164|
                          DCD      ||RCA||
                  |L9.168|
                          DCD      SDIO_CmdInitStructure

                          AREA ||i.SDIO_Clock_Set||, CODE, READONLY, ALIGN=2

                  SDIO_Clock_Set PROC
;;;101    //CK时钟=SDIOCLK/[clkdiv+2];(SDIOCLK时钟固定为48Mhz)
;;;102    void SDIO_Clock_Set(u8 clkdiv)
000000  4601              MOV      r1,r0
;;;103    {
;;;104    	u32 tmpreg=SDIO->CLKCR; 
000002  4a03              LDR      r2,|L10.16|
000004  6850              LDR      r0,[r2,#4]
;;;105      tmpreg&=0XFFFFFF00; 
000006  f02000ff          BIC      r0,r0,#0xff
;;;106     	tmpreg|=clkdiv;   
00000a  4308              ORRS     r0,r0,r1
;;;107    	SDIO->CLKCR=tmpreg;
00000c  6050              STR      r0,[r2,#4]
;;;108    } 
00000e  4770              BX       lr
;;;109     
                          ENDP

                  |L10.16|
                          DCD      0x40018000

                          AREA ||i.SDIO_IRQHandler||, CODE, READONLY, ALIGN=1

                  SDIO_IRQHandler PROC
;;;1112   //SDIO中断服务函数		  
;;;1113   void SDIO_IRQHandler(void) 
000000  b510              PUSH     {r4,lr}
;;;1114   {											
;;;1115    	SD_ProcessIRQSrc();//处理所有SDIO相关中断
000002  f7fffffe          BL       SD_ProcessIRQSrc
;;;1116   }	 																    
000006  bd10              POP      {r4,pc}
;;;1117   //SDIO中断处理函数
                          ENDP


                          AREA ||i.SD_DMA_Config||, CODE, READONLY, ALIGN=2

                  SD_DMA_Config PROC
;;;1535   //DMA_DIR:方向; @ref DMA_data_transfer_direction      DMA_DIR_PeripheralDST ,存储器-->SDIO(写数据);DMA_DIR_PeripheralSRC,SDIO-->存储器(读数据);
;;;1536   void SD_DMA_Config(u32*mbuf,u32 bufsize,u32 DMA_DIR)
000000  b570              PUSH     {r4-r6,lr}
;;;1537   {		 
000002  b08c              SUB      sp,sp,#0x30
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;1538     DMA_InitTypeDef DMA_InitStructure;
;;;1539   	
;;;1540   	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA2, ENABLE);	//使能DMA2时钟
00000a  2101              MOVS     r1,#1
00000c  2002              MOVS     r0,#2
00000e  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;1541   	
;;;1542     DMA_DeInit(DMA2_Channel4);   //将DMA2的通道4寄存器重设为缺省值
000012  4813              LDR      r0,|L12.96|
000014  f7fffffe          BL       DMA_DeInit
;;;1543   	DMA_Cmd(DMA2_Channel4, DISABLE ); //关闭DMA2 通道4
000018  2100              MOVS     r1,#0
00001a  4811              LDR      r0,|L12.96|
00001c  f7fffffe          BL       DMA_Cmd
;;;1544   
;;;1545   	DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&SDIO->FIFO;  //DMA外设基地址
000020  4810              LDR      r0,|L12.100|
000022  9001              STR      r0,[sp,#4]
;;;1546   	DMA_InitStructure.DMA_MemoryBaseAddr = (u32)mbuf;  //DMA内存基地址
000024  9602              STR      r6,[sp,#8]
;;;1547   	DMA_InitStructure.DMA_DIR = DMA_DIR;  //数据传输方向，从内存读取发送到外设
000026  9503              STR      r5,[sp,#0xc]
;;;1548   	DMA_InitStructure.DMA_BufferSize = bufsize/4;  //DMA通道的DMA缓存的大小
000028  08a0              LSRS     r0,r4,#2
00002a  9004              STR      r0,[sp,#0x10]
;;;1549   	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;  //外设地址寄存器不变
00002c  2000              MOVS     r0,#0
00002e  9005              STR      r0,[sp,#0x14]
;;;1550   	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;  //内存地址寄存器递增
000030  2080              MOVS     r0,#0x80
000032  9006              STR      r0,[sp,#0x18]
;;;1551   	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;  //数据宽度为32位
000034  0080              LSLS     r0,r0,#2
000036  9007              STR      r0,[sp,#0x1c]
;;;1552   	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word; //数据宽度为32位
000038  0080              LSLS     r0,r0,#2
00003a  9008              STR      r0,[sp,#0x20]
;;;1553   	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;  //工作在正常缓存模式
00003c  2000              MOVS     r0,#0
00003e  9009              STR      r0,[sp,#0x24]
;;;1554   	DMA_InitStructure.DMA_Priority = DMA_Priority_High; //DMA通道 x拥有高优先级 
000040  f44f5000          MOV      r0,#0x2000
000044  900a              STR      r0,[sp,#0x28]
;;;1555   	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;  //DMA通道x没有设置为内存到内存传输
000046  2000              MOVS     r0,#0
000048  900b              STR      r0,[sp,#0x2c]
;;;1556   	DMA_Init(DMA2_Channel4, &DMA_InitStructure);  //根据DMA_InitStruct中指定的参数初始化DMA的通道USART1_Tx_DMA_Channel所标识的寄存器
00004a  a901              ADD      r1,sp,#4
00004c  4804              LDR      r0,|L12.96|
00004e  f7fffffe          BL       DMA_Init
;;;1557   	
;;;1558   	DMA_Cmd(DMA2_Channel4, DISABLE ); //开启DMA2 通道4
000052  2100              MOVS     r1,#0
000054  4802              LDR      r0,|L12.96|
000056  f7fffffe          BL       DMA_Cmd
;;;1559   }   
00005a  b00c              ADD      sp,sp,#0x30
00005c  bd70              POP      {r4-r6,pc}
;;;1560   //读SD卡
                          ENDP

00005e  0000              DCW      0x0000
                  |L12.96|
                          DCD      0x40020444
                  |L12.100|
                          DCD      0x40018080

                          AREA ||i.SD_EnableWideBusOperation||, CODE, READONLY, ALIGN=2

                  SD_EnableWideBusOperation PROC
;;;431    //返回值:SD卡错误状态
;;;432    SD_Error SD_EnableWideBusOperation(u32 wmode)
000000  b570              PUSH     {r4-r6,lr}
;;;433    {
000002  4604              MOV      r4,r0
;;;434      	SD_Error errorstatus=SD_OK;
000004  2500              MOVS     r5,#0
;;;435     	if(SDIO_MULTIMEDIA_CARD==CardType)
000006  4816              LDR      r0,|L13.96|
000008  7800              LDRB     r0,[r0,#0]  ; CardType
00000a  2803              CMP      r0,#3
00000c  d101              BNE      |L13.18|
;;;436    		return SD_UNSUPPORTED_FEATURE;//MMC卡不支持
00000e  2027              MOVS     r0,#0x27
                  |L13.16|
;;;437     	else if((SDIO_STD_CAPACITY_SD_CARD_V1_1==CardType)||(SDIO_STD_CAPACITY_SD_CARD_V2_0==CardType)||(SDIO_HIGH_CAPACITY_SD_CARD==CardType))
;;;438    	{
;;;439    		if(wmode>=2)return SD_UNSUPPORTED_FEATURE;//不支持8位模式
;;;440     		else   
;;;441    		{
;;;442    			errorstatus=SDEnWideBus(wmode);
;;;443     			if(SD_OK==errorstatus)
;;;444    			{
;;;445    				SDIO->CLKCR&=~(3<<11);		//清除之前的位宽设置    
;;;446    				SDIO->CLKCR|=(u16)wmode<<11;//1位/4位总线宽度 
;;;447    				SDIO->CLKCR|=0<<14;			//不开启硬件流控制
;;;448    			}
;;;449    		}  
;;;450    	}
;;;451    	return errorstatus; 
;;;452    }
000010  bd70              POP      {r4-r6,pc}
                  |L13.18|
000012  4813              LDR      r0,|L13.96|
000014  7800              LDRB     r0,[r0,#0]            ;437  ; CardType
000016  b138              CBZ      r0,|L13.40|
000018  4811              LDR      r0,|L13.96|
00001a  7800              LDRB     r0,[r0,#0]            ;437  ; CardType
00001c  2801              CMP      r0,#1                 ;437
00001e  d003              BEQ      |L13.40|
000020  480f              LDR      r0,|L13.96|
000022  7800              LDRB     r0,[r0,#0]            ;437  ; CardType
000024  2802              CMP      r0,#2                 ;437
000026  d118              BNE      |L13.90|
                  |L13.40|
000028  2c02              CMP      r4,#2                 ;439
00002a  d301              BCC      |L13.48|
00002c  2027              MOVS     r0,#0x27              ;439
00002e  e7ef              B        |L13.16|
                  |L13.48|
000030  b2e0              UXTB     r0,r4                 ;442
000032  f7fffffe          BL       SDEnWideBus
000036  4605              MOV      r5,r0                 ;442
000038  b97d              CBNZ     r5,|L13.90|
00003a  480a              LDR      r0,|L13.100|
00003c  6840              LDR      r0,[r0,#4]            ;445
00003e  f42050c0          BIC      r0,r0,#0x1800         ;445
000042  4908              LDR      r1,|L13.100|
000044  6048              STR      r0,[r1,#4]            ;445
000046  4608              MOV      r0,r1                 ;446
000048  6840              LDR      r0,[r0,#4]            ;446
00004a  b2a1              UXTH     r1,r4                 ;446
00004c  ea4020c1          ORR      r0,r0,r1,LSL #11      ;446
000050  4904              LDR      r1,|L13.100|
000052  6048              STR      r0,[r1,#4]            ;446
000054  4608              MOV      r0,r1                 ;447
000056  6840              LDR      r0,[r0,#4]            ;447
000058  6048              STR      r0,[r1,#4]            ;447
                  |L13.90|
00005a  4628              MOV      r0,r5                 ;451
00005c  e7d8              B        |L13.16|
;;;453    //设置SD卡工作模式
                          ENDP

00005e  0000              DCW      0x0000
                  |L13.96|
                          DCD      CardType
                  |L13.100|
                          DCD      0x40018000

                          AREA ||i.SD_GetCardInfo||, CODE, READONLY, ALIGN=2

                  SD_GetCardInfo PROC
;;;309    //返回值:错误状态
;;;310    SD_Error SD_GetCardInfo(SD_CardInfo *cardinfo)
000000  b5f0              PUSH     {r4-r7,lr}
;;;311    {
000002  4601              MOV      r1,r0
;;;312     	SD_Error errorstatus=SD_OK;
000004  2000              MOVS     r0,#0
;;;313    	u8 tmp=0;	   
000006  2200              MOVS     r2,#0
;;;314    	cardinfo->CardType=(u8)CardType; 				//卡类型
000008  4bbe              LDR      r3,|L14.772|
00000a  781b              LDRB     r3,[r3,#0]  ; CardType
00000c  f8813056          STRB     r3,[r1,#0x56]
;;;315    	cardinfo->RCA=(u16)RCA;							//卡RCA值
000010  4bbd              LDR      r3,|L14.776|
000012  881b              LDRH     r3,[r3,#0]  ; RCA
000014  f8a13054          STRH     r3,[r1,#0x54]
;;;316    	tmp=(u8)((CSD_Tab[0]&0xFF000000)>>24);
000018  4bbc              LDR      r3,|L14.780|
00001a  681b              LDR      r3,[r3,#0]  ; CSD_Tab
00001c  0e1a              LSRS     r2,r3,#24
;;;317    	cardinfo->SD_csd.CSDStruct=(tmp&0xC0)>>6;		//CSD结构
00001e  0993              LSRS     r3,r2,#6
000020  700b              STRB     r3,[r1,#0]
;;;318    	cardinfo->SD_csd.SysSpecVersion=(tmp&0x3C)>>2;	//2.0协议还没定义这部分(为保留),应该是后续协议定义的
000022  f3c20383          UBFX     r3,r2,#2,#4
000026  704b              STRB     r3,[r1,#1]
;;;319    	cardinfo->SD_csd.Reserved1=tmp&0x03;			//2个保留位  
000028  f0020303          AND      r3,r2,#3
00002c  708b              STRB     r3,[r1,#2]
;;;320    	tmp=(u8)((CSD_Tab[0]&0x00FF0000)>>16);			//第1个字节
00002e  4bb7              LDR      r3,|L14.780|
000030  681b              LDR      r3,[r3,#0]  ; CSD_Tab
000032  f3c34207          UBFX     r2,r3,#16,#8
;;;321    	cardinfo->SD_csd.TAAC=tmp;				   		//数据读时间1
000036  70ca              STRB     r2,[r1,#3]
;;;322    	tmp=(u8)((CSD_Tab[0]&0x0000FF00)>>8);	  		//第2个字节
000038  4bb4              LDR      r3,|L14.780|
00003a  881b              LDRH     r3,[r3,#0]  ; CSD_Tab
00003c  f3c32207          UBFX     r2,r3,#8,#8
;;;323    	cardinfo->SD_csd.NSAC=tmp;		  				//数据读时间2
000040  710a              STRB     r2,[r1,#4]
;;;324    	tmp=(u8)(CSD_Tab[0]&0x000000FF);				//第3个字节
000042  4bb2              LDR      r3,|L14.780|
000044  781a              LDRB     r2,[r3,#0]  ; CSD_Tab
;;;325    	cardinfo->SD_csd.MaxBusClkFrec=tmp;		  		//传输速度	   
000046  714a              STRB     r2,[r1,#5]
;;;326    	tmp=(u8)((CSD_Tab[1]&0xFF000000)>>24);			//第4个字节
000048  685b              LDR      r3,[r3,#4]  ; CSD_Tab
00004a  0e1a              LSRS     r2,r3,#24
;;;327    	cardinfo->SD_csd.CardComdClasses=tmp<<4;    	//卡指令类高四位
00004c  0113              LSLS     r3,r2,#4
00004e  80cb              STRH     r3,[r1,#6]
;;;328    	tmp=(u8)((CSD_Tab[1]&0x00FF0000)>>16);	 		//第5个字节
000050  4bae              LDR      r3,|L14.780|
000052  685b              LDR      r3,[r3,#4]  ; CSD_Tab
000054  f3c34207          UBFX     r2,r3,#16,#8
;;;329    	cardinfo->SD_csd.CardComdClasses|=(tmp&0xF0)>>4;//卡指令类低四位
000058  88cb              LDRH     r3,[r1,#6]
00005a  ea431312          ORR      r3,r3,r2,LSR #4
00005e  80cb              STRH     r3,[r1,#6]
;;;330    	cardinfo->SD_csd.RdBlockLen=tmp&0x0F;	    	//最大读取数据长度
000060  f002030f          AND      r3,r2,#0xf
000064  720b              STRB     r3,[r1,#8]
;;;331    	tmp=(u8)((CSD_Tab[1]&0x0000FF00)>>8);			//第6个字节
000066  4ba9              LDR      r3,|L14.780|
000068  889b              LDRH     r3,[r3,#4]  ; CSD_Tab
00006a  f3c32207          UBFX     r2,r3,#8,#8
;;;332    	cardinfo->SD_csd.PartBlockRead=(tmp&0x80)>>7;	//允许分块读
00006e  09d3              LSRS     r3,r2,#7
000070  724b              STRB     r3,[r1,#9]
;;;333    	cardinfo->SD_csd.WrBlockMisalign=(tmp&0x40)>>6;	//写块错位
000072  f3c21380          UBFX     r3,r2,#6,#1
000076  728b              STRB     r3,[r1,#0xa]
;;;334    	cardinfo->SD_csd.RdBlockMisalign=(tmp&0x20)>>5;	//读块错位
000078  f3c21340          UBFX     r3,r2,#5,#1
00007c  72cb              STRB     r3,[r1,#0xb]
;;;335    	cardinfo->SD_csd.DSRImpl=(tmp&0x10)>>4;
00007e  f3c21300          UBFX     r3,r2,#4,#1
000082  730b              STRB     r3,[r1,#0xc]
;;;336    	cardinfo->SD_csd.Reserved2=0; 					//保留
000084  2300              MOVS     r3,#0
000086  734b              STRB     r3,[r1,#0xd]
;;;337     	if((CardType==SDIO_STD_CAPACITY_SD_CARD_V1_1)||(CardType==SDIO_STD_CAPACITY_SD_CARD_V2_0)||(SDIO_MULTIMEDIA_CARD==CardType))//标准1.1/2.0卡/MMC卡
000088  4b9e              LDR      r3,|L14.772|
00008a  781b              LDRB     r3,[r3,#0]  ; CardType
00008c  b13b              CBZ      r3,|L14.158|
00008e  4b9d              LDR      r3,|L14.772|
000090  781b              LDRB     r3,[r3,#0]  ; CardType
000092  2b01              CMP      r3,#1
000094  d003              BEQ      |L14.158|
000096  4b9b              LDR      r3,|L14.772|
000098  781b              LDRB     r3,[r3,#0]  ; CardType
00009a  2b03              CMP      r3,#3
00009c  d14f              BNE      |L14.318|
                  |L14.158|
;;;338    	{
;;;339    		cardinfo->SD_csd.DeviceSize=(tmp&0x03)<<10;	//C_SIZE(12位)
00009e  0793              LSLS     r3,r2,#30
0000a0  0d1b              LSRS     r3,r3,#20
0000a2  610b              STR      r3,[r1,#0x10]
;;;340    	 	tmp=(u8)(CSD_Tab[1]&0x000000FF); 			//第7个字节	
0000a4  4b99              LDR      r3,|L14.780|
0000a6  791a              LDRB     r2,[r3,#4]  ; CSD_Tab
;;;341    		cardinfo->SD_csd.DeviceSize|=(tmp)<<2;
0000a8  690b              LDR      r3,[r1,#0x10]
0000aa  ea430382          ORR      r3,r3,r2,LSL #2
0000ae  610b              STR      r3,[r1,#0x10]
;;;342     		tmp=(u8)((CSD_Tab[2]&0xFF000000)>>24);		//第8个字节	
0000b0  4b96              LDR      r3,|L14.780|
0000b2  689b              LDR      r3,[r3,#8]  ; CSD_Tab
0000b4  0e1a              LSRS     r2,r3,#24
;;;343    		cardinfo->SD_csd.DeviceSize|=(tmp&0xC0)>>6;
0000b6  690b              LDR      r3,[r1,#0x10]
0000b8  ea431392          ORR      r3,r3,r2,LSR #6
0000bc  610b              STR      r3,[r1,#0x10]
;;;344     		cardinfo->SD_csd.MaxRdCurrentVDDMin=(tmp&0x38)>>3;
0000be  f3c203c2          UBFX     r3,r2,#3,#3
0000c2  750b              STRB     r3,[r1,#0x14]
;;;345    		cardinfo->SD_csd.MaxRdCurrentVDDMax=(tmp&0x07);
0000c4  f0020307          AND      r3,r2,#7
0000c8  754b              STRB     r3,[r1,#0x15]
;;;346     		tmp=(u8)((CSD_Tab[2]&0x00FF0000)>>16);		//第9个字节	
0000ca  4b90              LDR      r3,|L14.780|
0000cc  689b              LDR      r3,[r3,#8]  ; CSD_Tab
0000ce  f3c34207          UBFX     r2,r3,#16,#8
;;;347    		cardinfo->SD_csd.MaxWrCurrentVDDMin=(tmp&0xE0)>>5;
0000d2  0953              LSRS     r3,r2,#5
0000d4  758b              STRB     r3,[r1,#0x16]
;;;348    		cardinfo->SD_csd.MaxWrCurrentVDDMax=(tmp&0x1C)>>2;
0000d6  f3c20382          UBFX     r3,r2,#2,#3
0000da  75cb              STRB     r3,[r1,#0x17]
;;;349    		cardinfo->SD_csd.DeviceSizeMul=(tmp&0x03)<<1;//C_SIZE_MULT
0000dc  0793              LSLS     r3,r2,#30
0000de  0f5b              LSRS     r3,r3,#29
0000e0  760b              STRB     r3,[r1,#0x18]
;;;350     		tmp=(u8)((CSD_Tab[2]&0x0000FF00)>>8);	  	//第10个字节	
0000e2  4b8a              LDR      r3,|L14.780|
0000e4  891b              LDRH     r3,[r3,#8]  ; CSD_Tab
0000e6  f3c32207          UBFX     r2,r3,#8,#8
;;;351    		cardinfo->SD_csd.DeviceSizeMul|=(tmp&0x80)>>7;
0000ea  7e0b              LDRB     r3,[r1,#0x18]
0000ec  ea4313d2          ORR      r3,r3,r2,LSR #7
0000f0  760b              STRB     r3,[r1,#0x18]
;;;352     		cardinfo->CardCapacity=(cardinfo->SD_csd.DeviceSize+1);//计算卡容量
0000f2  690b              LDR      r3,[r1,#0x10]
0000f4  1c5b              ADDS     r3,r3,#1
0000f6  2400              MOVS     r4,#0
0000f8  e9c13412          STRD     r3,r4,[r1,#0x48]
;;;353    		cardinfo->CardCapacity*=(1<<(cardinfo->SD_csd.DeviceSizeMul+2));
0000fc  7e0b              LDRB     r3,[r1,#0x18]
0000fe  1c9b              ADDS     r3,r3,#2
000100  2401              MOVS     r4,#1
000102  fa04f303          LSL      r3,r4,r3
000106  17dc              ASRS     r4,r3,#31
000108  e9d15612          LDRD     r5,r6,[r1,#0x48]
00010c  fba57c03          UMULL    r7,r12,r5,r3
000110  fb06c303          MLA      r3,r6,r3,r12
000114  fb053304          MLA      r3,r5,r4,r3
000118  e9c17312          STRD     r7,r3,[r1,#0x48]
;;;354    		cardinfo->CardBlockSize=1<<(cardinfo->SD_csd.RdBlockLen);//块大小
00011c  7a0c              LDRB     r4,[r1,#8]
00011e  2301              MOVS     r3,#1
000120  40a3              LSLS     r3,r3,r4
000122  650b              STR      r3,[r1,#0x50]
;;;355    		cardinfo->CardCapacity*=cardinfo->CardBlockSize;
000124  2400              MOVS     r4,#0
000126  e9d16512          LDRD     r6,r5,[r1,#0x48]
00012a  6d0b              LDR      r3,[r1,#0x50]
00012c  fba67c03          UMULL    r7,r12,r6,r3
000130  fb05c303          MLA      r3,r5,r3,r12
000134  fb063304          MLA      r3,r6,r4,r3
000138  e9c17312          STRD     r7,r3,[r1,#0x48]
00013c  e02e              B        |L14.412|
                  |L14.318|
;;;356    	}else if(CardType==SDIO_HIGH_CAPACITY_SD_CARD)	//高容量卡
00013e  4b71              LDR      r3,|L14.772|
000140  781b              LDRB     r3,[r3,#0]  ; CardType
000142  2b02              CMP      r3,#2
000144  d12a              BNE      |L14.412|
;;;357    	{
;;;358     		tmp=(u8)(CSD_Tab[1]&0x000000FF); 		//第7个字节	
000146  4b71              LDR      r3,|L14.780|
000148  791a              LDRB     r2,[r3,#4]  ; CSD_Tab
;;;359    		cardinfo->SD_csd.DeviceSize=(tmp&0x3F)<<16;//C_SIZE
00014a  0693              LSLS     r3,r2,#26
00014c  0a9b              LSRS     r3,r3,#10
00014e  610b              STR      r3,[r1,#0x10]
;;;360     		tmp=(u8)((CSD_Tab[2]&0xFF000000)>>24); 	//第8个字节	
000150  4b6e              LDR      r3,|L14.780|
000152  689b              LDR      r3,[r3,#8]  ; CSD_Tab
000154  0e1a              LSRS     r2,r3,#24
;;;361     		cardinfo->SD_csd.DeviceSize|=(tmp<<8);
000156  690b              LDR      r3,[r1,#0x10]
000158  ea432302          ORR      r3,r3,r2,LSL #8
00015c  610b              STR      r3,[r1,#0x10]
;;;362     		tmp=(u8)((CSD_Tab[2]&0x00FF0000)>>16);	//第9个字节	
00015e  4b6b              LDR      r3,|L14.780|
000160  689b              LDR      r3,[r3,#8]  ; CSD_Tab
000162  f3c34207          UBFX     r2,r3,#16,#8
;;;363     		cardinfo->SD_csd.DeviceSize|=(tmp);
000166  690b              LDR      r3,[r1,#0x10]
000168  4313              ORRS     r3,r3,r2
00016a  610b              STR      r3,[r1,#0x10]
;;;364     		tmp=(u8)((CSD_Tab[2]&0x0000FF00)>>8); 	//第10个字节	
00016c  4b67              LDR      r3,|L14.780|
00016e  891b              LDRH     r3,[r3,#8]  ; CSD_Tab
000170  f3c32207          UBFX     r2,r3,#8,#8
;;;365     		cardinfo->CardCapacity=(long long)(cardinfo->SD_csd.DeviceSize+1)*512*1024;//计算卡容量
000174  690b              LDR      r3,[r1,#0x10]
000176  1c5b              ADDS     r3,r3,#1
000178  f44f7400          MOV      r4,#0x200
00017c  fba34604          UMULL    r4,r6,r3,r4
000180  f44f6380          MOV      r3,#0x400
000184  2500              MOVS     r5,#0
000186  fba47c03          UMULL    r7,r12,r4,r3
00018a  fb06c303          MLA      r3,r6,r3,r12
00018e  fb043305          MLA      r3,r4,r5,r3
000192  e9c17312          STRD     r7,r3,[r1,#0x48]
;;;366    		cardinfo->CardBlockSize=512; 			//块大小固定为512字节
000196  f44f7300          MOV      r3,#0x200
00019a  650b              STR      r3,[r1,#0x50]
                  |L14.412|
;;;367    	}	  
;;;368    	cardinfo->SD_csd.EraseGrSize=(tmp&0x40)>>6;
00019c  f3c21380          UBFX     r3,r2,#6,#1
0001a0  f8013f19          STRB     r3,[r1,#0x19]!
;;;369    	cardinfo->SD_csd.EraseGrMul=(tmp&0x3F)<<1;	   
0001a4  0693              LSLS     r3,r2,#26
0001a6  0e5b              LSRS     r3,r3,#25
0001a8  704b              STRB     r3,[r1,#1]
;;;370    	tmp=(u8)(CSD_Tab[2]&0x000000FF);			//第11个字节	
0001aa  4b58              LDR      r3,|L14.780|
0001ac  7a1a              LDRB     r2,[r3,#8]  ; CSD_Tab
;;;371    	cardinfo->SD_csd.EraseGrMul|=(tmp&0x80)>>7;
0001ae  784b              LDRB     r3,[r1,#1]
0001b0  ea4313d2          ORR      r3,r3,r2,LSR #7
0001b4  704b              STRB     r3,[r1,#1]
;;;372    	cardinfo->SD_csd.WrProtectGrSize=(tmp&0x7F);
0001b6  f002037f          AND      r3,r2,#0x7f
0001ba  708b              STRB     r3,[r1,#2]
;;;373     	tmp=(u8)((CSD_Tab[3]&0xFF000000)>>24);		//第12个字节	
0001bc  4b53              LDR      r3,|L14.780|
0001be  68db              LDR      r3,[r3,#0xc]  ; CSD_Tab
0001c0  0e1a              LSRS     r2,r3,#24
;;;374    	cardinfo->SD_csd.WrProtectGrEnable=(tmp&0x80)>>7;
0001c2  09d3              LSRS     r3,r2,#7
0001c4  70cb              STRB     r3,[r1,#3]
;;;375    	cardinfo->SD_csd.ManDeflECC=(tmp&0x60)>>5;
0001c6  f3c21341          UBFX     r3,r2,#5,#2
0001ca  710b              STRB     r3,[r1,#4]
;;;376    	cardinfo->SD_csd.WrSpeedFact=(tmp&0x1C)>>2;
0001cc  f3c20382          UBFX     r3,r2,#2,#3
0001d0  714b              STRB     r3,[r1,#5]
;;;377    	cardinfo->SD_csd.MaxWrBlockLen=(tmp&0x03)<<2;	 
0001d2  0793              LSLS     r3,r2,#30
0001d4  0f1b              LSRS     r3,r3,#28
0001d6  718b              STRB     r3,[r1,#6]
;;;378    	tmp=(u8)((CSD_Tab[3]&0x00FF0000)>>16);		//第13个字节
0001d8  4b4c              LDR      r3,|L14.780|
0001da  68db              LDR      r3,[r3,#0xc]  ; CSD_Tab
0001dc  f3c34207          UBFX     r2,r3,#16,#8
;;;379    	cardinfo->SD_csd.MaxWrBlockLen|=(tmp&0xC0)>>6;
0001e0  798b              LDRB     r3,[r1,#6]
0001e2  ea431392          ORR      r3,r3,r2,LSR #6
0001e6  718b              STRB     r3,[r1,#6]
;;;380    	cardinfo->SD_csd.WriteBlockPaPartial=(tmp&0x20)>>5;
0001e8  f3c21340          UBFX     r3,r2,#5,#1
0001ec  71cb              STRB     r3,[r1,#7]
;;;381    	cardinfo->SD_csd.Reserved3=0;
0001ee  2300              MOVS     r3,#0
0001f0  720b              STRB     r3,[r1,#8]
;;;382    	cardinfo->SD_csd.ContentProtectAppli=(tmp&0x01);  
0001f2  f0020301          AND      r3,r2,#1
0001f6  724b              STRB     r3,[r1,#9]
;;;383    	tmp=(u8)((CSD_Tab[3]&0x0000FF00)>>8);		//第14个字节
0001f8  4b44              LDR      r3,|L14.780|
0001fa  899b              LDRH     r3,[r3,#0xc]  ; CSD_Tab
0001fc  f3c32207          UBFX     r2,r3,#8,#8
;;;384    	cardinfo->SD_csd.FileFormatGrouop=(tmp&0x80)>>7;
000200  09d3              LSRS     r3,r2,#7
000202  728b              STRB     r3,[r1,#0xa]
;;;385    	cardinfo->SD_csd.CopyFlag=(tmp&0x40)>>6;
000204  f3c21380          UBFX     r3,r2,#6,#1
000208  72cb              STRB     r3,[r1,#0xb]
;;;386    	cardinfo->SD_csd.PermWrProtect=(tmp&0x20)>>5;
00020a  f3c21340          UBFX     r3,r2,#5,#1
00020e  730b              STRB     r3,[r1,#0xc]
;;;387    	cardinfo->SD_csd.TempWrProtect=(tmp&0x10)>>4;
000210  f3c21300          UBFX     r3,r2,#4,#1
000214  734b              STRB     r3,[r1,#0xd]
;;;388    	cardinfo->SD_csd.FileFormat=(tmp&0x0C)>>2;
000216  f3c20381          UBFX     r3,r2,#2,#2
00021a  738b              STRB     r3,[r1,#0xe]
;;;389    	cardinfo->SD_csd.ECC=(tmp&0x03);  
00021c  f0020303          AND      r3,r2,#3
000220  73cb              STRB     r3,[r1,#0xf]
;;;390    	tmp=(u8)(CSD_Tab[3]&0x000000FF);			//第15个字节
000222  4b3a              LDR      r3,|L14.780|
000224  7b1a              LDRB     r2,[r3,#0xc]  ; CSD_Tab
;;;391    	cardinfo->SD_csd.CSD_CRC=(tmp&0xFE)>>1;
000226  0853              LSRS     r3,r2,#1
000228  740b              STRB     r3,[r1,#0x10]
;;;392    	cardinfo->SD_csd.Reserved4=1;		 
00022a  2301              MOVS     r3,#1
00022c  744b              STRB     r3,[r1,#0x11]
;;;393    	tmp=(u8)((CID_Tab[0]&0xFF000000)>>24);		//第0个字节
00022e  4b38              LDR      r3,|L14.784|
000230  681b              LDR      r3,[r3,#0]  ; CID_Tab
000232  0e1a              LSRS     r2,r3,#24
;;;394    	cardinfo->SD_cid.ManufacturerID=tmp;		    
000234  74ca              STRB     r2,[r1,#0x13]
000236  3919              SUBS     r1,r1,#0x19
;;;395    	tmp=(u8)((CID_Tab[0]&0x00FF0000)>>16);		//第1个字节
000238  4b35              LDR      r3,|L14.784|
00023a  681b              LDR      r3,[r3,#0]  ; CID_Tab
00023c  f3c34207          UBFX     r2,r3,#16,#8
;;;396    	cardinfo->SD_cid.OEM_AppliID=tmp<<8;	  
000240  0214              LSLS     r4,r2,#8
000242  85cc              STRH     r4,[r1,#0x2e]
;;;397    	tmp=(u8)((CID_Tab[0]&0x000000FF00)>>8);		//第2个字节
000244  4b32              LDR      r3,|L14.784|
000246  881b              LDRH     r3,[r3,#0]  ; CID_Tab
000248  f3c32207          UBFX     r2,r3,#8,#8
;;;398    	cardinfo->SD_cid.OEM_AppliID|=tmp;	    
00024c  8dcb              LDRH     r3,[r1,#0x2e]
00024e  4313              ORRS     r3,r3,r2
000250  85cb              STRH     r3,[r1,#0x2e]
;;;399    	tmp=(u8)(CID_Tab[0]&0x000000FF);			//第3个字节	
000252  4b2f              LDR      r3,|L14.784|
000254  781a              LDRB     r2,[r3,#0]  ; CID_Tab
;;;400    	cardinfo->SD_cid.ProdName1=tmp<<24;				  
000256  0614              LSLS     r4,r2,#24
000258  630c              STR      r4,[r1,#0x30]
;;;401    	tmp=(u8)((CID_Tab[1]&0xFF000000)>>24); 		//第4个字节
00025a  685b              LDR      r3,[r3,#4]  ; CID_Tab
00025c  0e1a              LSRS     r2,r3,#24
;;;402    	cardinfo->SD_cid.ProdName1|=tmp<<16;	  
00025e  6b0b              LDR      r3,[r1,#0x30]
000260  ea434402          ORR      r4,r3,r2,LSL #16
000264  630c              STR      r4,[r1,#0x30]
;;;403    	tmp=(u8)((CID_Tab[1]&0x00FF0000)>>16);	   	//第5个字节
000266  4b2a              LDR      r3,|L14.784|
000268  685b              LDR      r3,[r3,#4]  ; CID_Tab
00026a  f3c34207          UBFX     r2,r3,#16,#8
;;;404    	cardinfo->SD_cid.ProdName1|=tmp<<8;		 
00026e  6b0b              LDR      r3,[r1,#0x30]
000270  ea432402          ORR      r4,r3,r2,LSL #8
000274  630c              STR      r4,[r1,#0x30]
;;;405    	tmp=(u8)((CID_Tab[1]&0x0000FF00)>>8);		//第6个字节
000276  4b26              LDR      r3,|L14.784|
000278  889b              LDRH     r3,[r3,#4]  ; CID_Tab
00027a  f3c32207          UBFX     r2,r3,#8,#8
;;;406    	cardinfo->SD_cid.ProdName1|=tmp;		   
00027e  6b0b              LDR      r3,[r1,#0x30]
000280  4313              ORRS     r3,r3,r2
000282  630b              STR      r3,[r1,#0x30]
;;;407    	tmp=(u8)(CID_Tab[1]&0x000000FF);	  		//第7个字节
000284  4b22              LDR      r3,|L14.784|
000286  791a              LDRB     r2,[r3,#4]  ; CID_Tab
;;;408    	cardinfo->SD_cid.ProdName2=tmp;			  
000288  2334              MOVS     r3,#0x34
00028a  545a              STRB     r2,[r3,r1]
;;;409    	tmp=(u8)((CID_Tab[2]&0xFF000000)>>24); 		//第8个字节
00028c  4b20              LDR      r3,|L14.784|
00028e  689b              LDR      r3,[r3,#8]  ; CID_Tab
000290  0e1a              LSRS     r2,r3,#24
;;;410    	cardinfo->SD_cid.ProdRev=tmp;		 
000292  2335              MOVS     r3,#0x35
000294  545a              STRB     r2,[r3,r1]
;;;411    	tmp=(u8)((CID_Tab[2]&0x00FF0000)>>16);		//第9个字节
000296  4b1e              LDR      r3,|L14.784|
000298  689b              LDR      r3,[r3,#8]  ; CID_Tab
00029a  f3c34207          UBFX     r2,r3,#16,#8
;;;412    	cardinfo->SD_cid.ProdSN=tmp<<24;	   
00029e  0614              LSLS     r4,r2,#24
0002a0  638c              STR      r4,[r1,#0x38]
;;;413    	tmp=(u8)((CID_Tab[2]&0x0000FF00)>>8); 		//第10个字节
0002a2  4b1b              LDR      r3,|L14.784|
0002a4  891b              LDRH     r3,[r3,#8]  ; CID_Tab
0002a6  f3c32207          UBFX     r2,r3,#8,#8
;;;414    	cardinfo->SD_cid.ProdSN|=tmp<<16;	   
0002aa  6b8b              LDR      r3,[r1,#0x38]
0002ac  ea434402          ORR      r4,r3,r2,LSL #16
0002b0  638c              STR      r4,[r1,#0x38]
;;;415    	tmp=(u8)(CID_Tab[2]&0x000000FF);   			//第11个字节
0002b2  4b17              LDR      r3,|L14.784|
0002b4  7a1a              LDRB     r2,[r3,#8]  ; CID_Tab
;;;416    	cardinfo->SD_cid.ProdSN|=tmp<<8;		   
0002b6  6b8b              LDR      r3,[r1,#0x38]
0002b8  ea432402          ORR      r4,r3,r2,LSL #8
0002bc  638c              STR      r4,[r1,#0x38]
;;;417    	tmp=(u8)((CID_Tab[3]&0xFF000000)>>24); 		//第12个字节
0002be  4b14              LDR      r3,|L14.784|
0002c0  68db              LDR      r3,[r3,#0xc]  ; CID_Tab
0002c2  0e1a              LSRS     r2,r3,#24
;;;418    	cardinfo->SD_cid.ProdSN|=tmp;			     
0002c4  6b8b              LDR      r3,[r1,#0x38]
0002c6  4313              ORRS     r3,r3,r2
0002c8  638b              STR      r3,[r1,#0x38]
;;;419    	tmp=(u8)((CID_Tab[3]&0x00FF0000)>>16);	 	//第13个字节
0002ca  4b11              LDR      r3,|L14.784|
0002cc  68db              LDR      r3,[r3,#0xc]  ; CID_Tab
0002ce  f3c34207          UBFX     r2,r3,#16,#8
;;;420    	cardinfo->SD_cid.Reserved1|=(tmp&0xF0)>>4;
0002d2  233c              MOVS     r3,#0x3c
0002d4  5c5b              LDRB     r3,[r3,r1]
0002d6  ea431412          ORR      r4,r3,r2,LSR #4
0002da  233c              MOVS     r3,#0x3c
0002dc  545c              STRB     r4,[r3,r1]
;;;421    	cardinfo->SD_cid.ManufactDate=(tmp&0x0F)<<8;    
0002de  0713              LSLS     r3,r2,#28
0002e0  0d1c              LSRS     r4,r3,#20
0002e2  87cc              STRH     r4,[r1,#0x3e]
;;;422    	tmp=(u8)((CID_Tab[3]&0x0000FF00)>>8);		//第14个字节
0002e4  4b0a              LDR      r3,|L14.784|
0002e6  899b              LDRH     r3,[r3,#0xc]  ; CID_Tab
0002e8  f3c32207          UBFX     r2,r3,#8,#8
;;;423    	cardinfo->SD_cid.ManufactDate|=tmp;		 	  
0002ec  8fcb              LDRH     r3,[r1,#0x3e]
0002ee  4313              ORRS     r3,r3,r2
0002f0  87cb              STRH     r3,[r1,#0x3e]
;;;424    	tmp=(u8)(CID_Tab[3]&0x000000FF);			//第15个字节
0002f2  4b07              LDR      r3,|L14.784|
0002f4  7b1a              LDRB     r2,[r3,#0xc]  ; CID_Tab
;;;425    	cardinfo->SD_cid.CID_CRC=(tmp&0xFE)>>1;
0002f6  0854              LSRS     r4,r2,#1
0002f8  2340              MOVS     r3,#0x40
0002fa  545c              STRB     r4,[r3,r1]
;;;426    	cardinfo->SD_cid.Reserved2=1;	 
0002fc  2401              MOVS     r4,#1
0002fe  2341              MOVS     r3,#0x41
000300  545c              STRB     r4,[r3,r1]
;;;427    	return errorstatus;
;;;428    }
000302  bdf0              POP      {r4-r7,pc}
;;;429    //设置SDIO总线宽度(MMC卡不支持4bit模式)
                          ENDP

                  |L14.772|
                          DCD      CardType
                  |L14.776|
                          DCD      ||RCA||
                  |L14.780|
                          DCD      CSD_Tab
                  |L14.784|
                          DCD      CID_Tab

                          AREA ||i.SD_GetState||, CODE, READONLY, ALIGN=1

                  SD_GetState PROC
;;;1428   //返回值:SD卡状态
;;;1429   SDCardState SD_GetState(void)
000000  b508              PUSH     {r3,lr}
;;;1430   {
;;;1431   	u32 resp1=0;
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
;;;1432   	if(SD_SendStatus(&resp1)!=SD_OK)return SD_CARD_ERROR;
000006  4668              MOV      r0,sp
000008  f7fffffe          BL       SD_SendStatus
00000c  b108              CBZ      r0,|L15.18|
00000e  20ff              MOVS     r0,#0xff
                  |L15.16|
;;;1433   	else return (SDCardState)((resp1>>9) & 0x0F);
;;;1434   }
000010  bd08              POP      {r3,pc}
                  |L15.18|
000012  9800              LDR      r0,[sp,#0]            ;1433
000014  f3c02043          UBFX     r0,r0,#9,#4           ;1433
000018  e7fa              B        |L15.16|
;;;1435   //查找SD卡的SCR寄存器值
                          ENDP


                          AREA ||i.SD_Init||, CODE, READONLY, ALIGN=2

                  SD_Init PROC
;;;34     //返回值:错误代码;(0,无错误)
;;;35     SD_Error SD_Init(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;36     {
;;;37     	NVIC_InitTypeDef NVIC_InitStructure;
;;;38       GPIO_InitTypeDef  GPIO_InitStructure;
;;;39     	
;;;40     	u8 clkdiv=0;
000002  2500              MOVS     r5,#0
;;;41     	SD_Error errorstatus=SD_OK;	 
000004  2400              MOVS     r4,#0
;;;42       
;;;43     	//SDIO IO口初始化
;;;44     
;;;45     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC|RCC_APB2Periph_GPIOD,ENABLE);//使能PORTC,PORTD时钟
000006  2101              MOVS     r1,#1
000008  2030              MOVS     r0,#0x30
00000a  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;46     	
;;;47     	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_SDIO|RCC_AHBPeriph_DMA2,ENABLE);//使能SDIO,DMA2时钟	 
00000e  2101              MOVS     r1,#1
000010  f2404002          MOV      r0,#0x402
000014  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;48       
;;;49       GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8|GPIO_Pin_9|GPIO_Pin_10|GPIO_Pin_11|GPIO_Pin_12;	//PC.8~12 复用输出
000018  f44f50f8          MOV      r0,#0x1f00
00001c  f8ad0000          STRH     r0,[sp,#0]
;;;50       GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP; 		 //复用推挽输出
000020  2018              MOVS     r0,#0x18
000022  f88d0003          STRB     r0,[sp,#3]
;;;51       GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;		 //IO口速度为50MHz
000026  2003              MOVS     r0,#3
000028  f88d0002          STRB     r0,[sp,#2]
;;;52       GPIO_Init(GPIOC, &GPIO_InitStructure);					 //根据设定参数初始化PC.8~12 
00002c  4669              MOV      r1,sp
00002e  4830              LDR      r0,|L16.240|
000030  f7fffffe          BL       GPIO_Init
;;;53      
;;;54       GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;	//PD2 复用输出
000034  2004              MOVS     r0,#4
000036  f8ad0000          STRH     r0,[sp,#0]
;;;55       GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP; 		 //复用推挽输出
00003a  2018              MOVS     r0,#0x18
00003c  f88d0003          STRB     r0,[sp,#3]
;;;56       GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;		 //IO口速度为50MHz
000040  2003              MOVS     r0,#3
000042  f88d0002          STRB     r0,[sp,#2]
;;;57       GPIO_Init(GPIOD, &GPIO_InitStructure);					 //根据设定参数初始化PD2
000046  4669              MOV      r1,sp
000048  482a              LDR      r0,|L16.244|
00004a  f7fffffe          BL       GPIO_Init
;;;58     
;;;59       GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;	//PD7 上拉输入
00004e  2080              MOVS     r0,#0x80
000050  f8ad0000          STRH     r0,[sp,#0]
;;;60       GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU; 		 //复用推挽输出
000054  2048              MOVS     r0,#0x48
000056  f88d0003          STRB     r0,[sp,#3]
;;;61       GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;		 //IO口速度为50MHz
00005a  2003              MOVS     r0,#3
00005c  f88d0002          STRB     r0,[sp,#2]
;;;62       GPIO_Init(GPIOD, &GPIO_InitStructure);					 //根据设定参数初始化PD7
000060  4669              MOV      r1,sp
000062  4824              LDR      r0,|L16.244|
000064  f7fffffe          BL       GPIO_Init
;;;63      
;;;64      	//SDIO外设寄存器设置为默认值 			   	   
;;;65     	SDIO_DeInit();
000068  f7fffffe          BL       SDIO_DeInit
;;;66      
;;;67     	NVIC_InitStructure.NVIC_IRQChannel = SDIO_IRQn;			//SDIO中断配置
00006c  2031              MOVS     r0,#0x31
00006e  f88d0004          STRB     r0,[sp,#4]
;;;68       NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;	//抢占优先级0 
000072  2000              MOVS     r0,#0
000074  f88d0005          STRB     r0,[sp,#5]
;;;69       NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;					//子优先级0 
000078  f88d0006          STRB     r0,[sp,#6]
;;;70       NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;								//使能外部中断通道
00007c  2001              MOVS     r0,#1
00007e  f88d0007          STRB     r0,[sp,#7]
;;;71       NVIC_Init(&NVIC_InitStructure);  	  //根据NVIC_InitStruct中指定的参数初始化外设NVIC寄存器
000082  a801              ADD      r0,sp,#4
000084  f7fffffe          BL       NVIC_Init
;;;72     
;;;73       errorstatus=SD_PowerON();			//SD卡上电
000088  f7fffffe          BL       SD_PowerON
00008c  4604              MOV      r4,r0
;;;74     
;;;75      	if(errorstatus==SD_OK)
00008e  b914              CBNZ     r4,|L16.150|
;;;76     		errorstatus=SD_InitializeCards();			//初始化SD卡	
000090  f7fffffe          BL       SD_InitializeCards
000094  4604              MOV      r4,r0
                  |L16.150|
;;;77     	
;;;78       if(errorstatus==SD_OK)
000096  b91c              CBNZ     r4,|L16.160|
;;;79     		errorstatus=SD_GetCardInfo(&SDCardInfo);	//获取卡信息
000098  4817              LDR      r0,|L16.248|
00009a  f7fffffe          BL       SD_GetCardInfo
00009e  4604              MOV      r4,r0
                  |L16.160|
;;;80     	
;;;81      	if(errorstatus==SD_OK)
0000a0  b934              CBNZ     r4,|L16.176|
;;;82     		errorstatus=SD_SelectDeselect((u32)(SDCardInfo.RCA<<16));//选中SD卡
0000a2  4915              LDR      r1,|L16.248|
0000a4  f8b11054          LDRH     r1,[r1,#0x54]  ; SDCardInfo
0000a8  0408              LSLS     r0,r1,#16
0000aa  f7fffffe          BL       SD_SelectDeselect
0000ae  4604              MOV      r4,r0
                  |L16.176|
;;;83     	
;;;84       if(errorstatus==SD_OK)
0000b0  b91c              CBNZ     r4,|L16.186|
;;;85     		errorstatus=SD_EnableWideBusOperation(1);	//4位宽度,如果是MMC卡,则不能用4位模式 
0000b2  2001              MOVS     r0,#1
0000b4  f7fffffe          BL       SD_EnableWideBusOperation
0000b8  4604              MOV      r4,r0
                  |L16.186|
;;;86     	
;;;87       if((errorstatus==SD_OK)||(SDIO_MULTIMEDIA_CARD==CardType))
0000ba  b11c              CBZ      r4,|L16.196|
0000bc  480f              LDR      r0,|L16.252|
0000be  7800              LDRB     r0,[r0,#0]  ; CardType
0000c0  2803              CMP      r0,#3
0000c2  d112              BNE      |L16.234|
                  |L16.196|
;;;88     	{  		    
;;;89     		if(SDCardInfo.CardType==SDIO_STD_CAPACITY_SD_CARD_V1_1||SDCardInfo.CardType==SDIO_STD_CAPACITY_SD_CARD_V2_0)
0000c4  480c              LDR      r0,|L16.248|
0000c6  f8900056          LDRB     r0,[r0,#0x56]  ; SDCardInfo
0000ca  b120              CBZ      r0,|L16.214|
0000cc  480a              LDR      r0,|L16.248|
0000ce  f8900056          LDRB     r0,[r0,#0x56]  ; SDCardInfo
0000d2  2801              CMP      r0,#1
0000d4  d101              BNE      |L16.218|
                  |L16.214|
;;;90     		{
;;;91     			clkdiv=SDIO_TRANSFER_CLK_DIV+6;	//V1.1/V2.0卡，设置最高72/12=6Mhz
0000d6  250a              MOVS     r5,#0xa
0000d8  e000              B        |L16.220|
                  |L16.218|
;;;92     		}else clkdiv=SDIO_TRANSFER_CLK_DIV;	//SDHC等其他卡，设置最高72/6=12Mhz
0000da  2504              MOVS     r5,#4
                  |L16.220|
;;;93     		SDIO_Clock_Set(clkdiv);				//设置时钟频率,SDIO时钟计算公式:SDIO_CK时钟=SDIOCLK/[clkdiv+2];其中,SDIOCLK固定为48Mhz 
0000dc  4628              MOV      r0,r5
0000de  f7fffffe          BL       SDIO_Clock_Set
;;;94     		//errorstatus=SD_SetDeviceMode(SD_DMA_MODE);	//设置为DMA模式
;;;95     		errorstatus=SD_SetDeviceMode(SD_POLLING_MODE);	//设置为查询模式
0000e2  2000              MOVS     r0,#0
0000e4  f7fffffe          BL       SD_SetDeviceMode
0000e8  4604              MOV      r4,r0
                  |L16.234|
;;;96      	}
;;;97     	return errorstatus;		 
0000ea  4620              MOV      r0,r4
;;;98     }
0000ec  bd7c              POP      {r2-r6,pc}
;;;99     //SDIO时钟初始化设置
                          ENDP

0000ee  0000              DCW      0x0000
                  |L16.240|
                          DCD      0x40011000
                  |L16.244|
                          DCD      0x40011400
                  |L16.248|
                          DCD      SDCardInfo
                  |L16.252|
                          DCD      CardType

                          AREA ||i.SD_InitializeCards||, CODE, READONLY, ALIGN=2

                  SD_InitializeCards PROC
;;;242    //返回值:错误代码
;;;243    SD_Error SD_InitializeCards(void)
000000  b538              PUSH     {r3-r5,lr}
;;;244    {
;;;245     	SD_Error errorstatus=SD_OK;
000002  2400              MOVS     r4,#0
;;;246    	u16 rca = 0x01;
000004  2001              MOVS     r0,#1
000006  9000              STR      r0,[sp,#0]
;;;247     	if(SDIO_GetPowerState()==0)return SD_REQUEST_NOT_APPLICABLE;//检查电源状态,确保为上电状态
000008  f7fffffe          BL       SDIO_GetPowerState
00000c  b908              CBNZ     r0,|L17.18|
00000e  2025              MOVS     r0,#0x25
                  |L17.16|
;;;248     	if(SDIO_SECURE_DIGITAL_IO_CARD!=CardType)			//非SECURE_DIGITAL_IO_CARD
;;;249    	{
;;;250    		SDIO_CmdInitStructure.SDIO_Argument = 0x0;//发送CMD2,取得CID,长响应
;;;251        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_ALL_SEND_CID;
;;;252        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Long;
;;;253        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;254        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;255        SDIO_SendCommand(&SDIO_CmdInitStructure);//发送CMD2,取得CID,长响应	
;;;256    		
;;;257    		errorstatus=CmdResp2Error(); 					//等待R2响应   
;;;258    		if(errorstatus!=SD_OK)return errorstatus;   	//响应错误		    
;;;259     		CID_Tab[0]=SDIO->RESP1;
;;;260    		CID_Tab[1]=SDIO->RESP2;
;;;261    		CID_Tab[2]=SDIO->RESP3;
;;;262    		CID_Tab[3]=SDIO->RESP4;
;;;263    	}
;;;264    	if((SDIO_STD_CAPACITY_SD_CARD_V1_1==CardType)||(SDIO_STD_CAPACITY_SD_CARD_V2_0==CardType)||(SDIO_SECURE_DIGITAL_IO_COMBO_CARD==CardType)||(SDIO_HIGH_CAPACITY_SD_CARD==CardType))//判断卡类型
;;;265    	{
;;;266    		SDIO_CmdInitStructure.SDIO_Argument = 0x00;//发送CMD3,短响应 
;;;267        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_REL_ADDR;	//cmd3
;;;268        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short; //r6
;;;269        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;270        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;271        SDIO_SendCommand(&SDIO_CmdInitStructure);	//发送CMD3,短响应 
;;;272    		
;;;273    		errorstatus=CmdResp6Error(SD_CMD_SET_REL_ADDR,&rca);//等待R6响应 
;;;274    		if(errorstatus!=SD_OK)return errorstatus;   	//响应错误		    
;;;275    	}   
;;;276        if (SDIO_MULTIMEDIA_CARD==CardType)
;;;277        {
;;;278    		  SDIO_CmdInitStructure.SDIO_Argument = (u32)(rca<<16);//发送CMD3,短响应 
;;;279          SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_REL_ADDR;	//cmd3
;;;280          SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short; //r6
;;;281          SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;282          SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;283          SDIO_SendCommand(&SDIO_CmdInitStructure);	//发送CMD3,短响应 	
;;;284    			
;;;285    		errorstatus=CmdResp2Error(); 					//等待R2响应   
;;;286    		if(errorstatus!=SD_OK)return errorstatus;   	//响应错误	 
;;;287        }
;;;288    	if (SDIO_SECURE_DIGITAL_IO_CARD!=CardType)			//非SECURE_DIGITAL_IO_CARD
;;;289    	{
;;;290    		RCA = rca;
;;;291        SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)(rca << 16);//发送CMD9+卡RCA,取得CSD,长响应 
;;;292        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_CSD;
;;;293        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Long;
;;;294        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;295        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;296        SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;297    		
;;;298    		errorstatus=CmdResp2Error(); 					//等待R2响应   
;;;299    		if(errorstatus!=SD_OK)return errorstatus;   	//响应错误		    
;;;300      		CSD_Tab[0]=SDIO->RESP1;
;;;301    		CSD_Tab[1]=SDIO->RESP2;
;;;302    		CSD_Tab[2]=SDIO->RESP3;						
;;;303    		CSD_Tab[3]=SDIO->RESP4;					    
;;;304    	}
;;;305    	return SD_OK;//卡初始化成功
;;;306    } 
000010  bd38              POP      {r3-r5,pc}
                  |L17.18|
000012  484a              LDR      r0,|L17.316|
000014  7800              LDRB     r0,[r0,#0]            ;248  ; CardType
000016  2804              CMP      r0,#4                 ;248
000018  d021              BEQ      |L17.94|
00001a  2000              MOVS     r0,#0                 ;250
00001c  4948              LDR      r1,|L17.320|
00001e  6008              STR      r0,[r1,#0]            ;250  ; SDIO_CmdInitStructure
000020  2002              MOVS     r0,#2                 ;251
000022  6048              STR      r0,[r1,#4]            ;251  ; SDIO_CmdInitStructure
000024  20c0              MOVS     r0,#0xc0              ;252
000026  6088              STR      r0,[r1,#8]            ;252  ; SDIO_CmdInitStructure
000028  2000              MOVS     r0,#0                 ;253
00002a  60c8              STR      r0,[r1,#0xc]          ;253  ; SDIO_CmdInitStructure
00002c  f44f6080          MOV      r0,#0x400             ;254
000030  6108              STR      r0,[r1,#0x10]         ;254  ; SDIO_CmdInitStructure
000032  4608              MOV      r0,r1                 ;255
000034  f7fffffe          BL       SDIO_SendCommand
000038  f7fffffe          BL       CmdResp2Error
00003c  4604              MOV      r4,r0                 ;257
00003e  b10c              CBZ      r4,|L17.68|
000040  4620              MOV      r0,r4                 ;258
000042  e7e5              B        |L17.16|
                  |L17.68|
000044  483f              LDR      r0,|L17.324|
000046  6940              LDR      r0,[r0,#0x14]         ;259
000048  493f              LDR      r1,|L17.328|
00004a  6008              STR      r0,[r1,#0]            ;259  ; CID_Tab
00004c  483d              LDR      r0,|L17.324|
00004e  6980              LDR      r0,[r0,#0x18]         ;260
000050  6048              STR      r0,[r1,#4]            ;260  ; CID_Tab
000052  483c              LDR      r0,|L17.324|
000054  69c0              LDR      r0,[r0,#0x1c]         ;261
000056  6088              STR      r0,[r1,#8]            ;261  ; CID_Tab
000058  483a              LDR      r0,|L17.324|
00005a  6a00              LDR      r0,[r0,#0x20]         ;262
00005c  60c8              STR      r0,[r1,#0xc]          ;262  ; CID_Tab
                  |L17.94|
00005e  4837              LDR      r0,|L17.316|
000060  7800              LDRB     r0,[r0,#0]            ;264  ; CardType
000062  b158              CBZ      r0,|L17.124|
000064  4835              LDR      r0,|L17.316|
000066  7800              LDRB     r0,[r0,#0]            ;264  ; CardType
000068  2801              CMP      r0,#1                 ;264
00006a  d007              BEQ      |L17.124|
00006c  4833              LDR      r0,|L17.316|
00006e  7800              LDRB     r0,[r0,#0]            ;264  ; CardType
000070  2806              CMP      r0,#6                 ;264
000072  d003              BEQ      |L17.124|
000074  4831              LDR      r0,|L17.316|
000076  7800              LDRB     r0,[r0,#0]            ;264  ; CardType
000078  2802              CMP      r0,#2                 ;264
00007a  d116              BNE      |L17.170|
                  |L17.124|
00007c  2000              MOVS     r0,#0                 ;266
00007e  4930              LDR      r1,|L17.320|
000080  6008              STR      r0,[r1,#0]            ;266  ; SDIO_CmdInitStructure
000082  2003              MOVS     r0,#3                 ;267
000084  6048              STR      r0,[r1,#4]            ;267  ; SDIO_CmdInitStructure
000086  2040              MOVS     r0,#0x40              ;268
000088  6088              STR      r0,[r1,#8]            ;268  ; SDIO_CmdInitStructure
00008a  2000              MOVS     r0,#0                 ;269
00008c  60c8              STR      r0,[r1,#0xc]          ;269  ; SDIO_CmdInitStructure
00008e  f44f6080          MOV      r0,#0x400             ;270
000092  6108              STR      r0,[r1,#0x10]         ;270  ; SDIO_CmdInitStructure
000094  4608              MOV      r0,r1                 ;271
000096  f7fffffe          BL       SDIO_SendCommand
00009a  4669              MOV      r1,sp                 ;273
00009c  2003              MOVS     r0,#3                 ;273
00009e  f7fffffe          BL       CmdResp6Error
0000a2  4604              MOV      r4,r0                 ;273
0000a4  b10c              CBZ      r4,|L17.170|
0000a6  4620              MOV      r0,r4                 ;274
0000a8  e7b2              B        |L17.16|
                  |L17.170|
0000aa  4824              LDR      r0,|L17.316|
0000ac  7800              LDRB     r0,[r0,#0]            ;276  ; CardType
0000ae  2803              CMP      r0,#3                 ;276
0000b0  d116              BNE      |L17.224|
0000b2  f8bd0000          LDRH     r0,[sp,#0]            ;278
0000b6  0400              LSLS     r0,r0,#16             ;278
0000b8  4921              LDR      r1,|L17.320|
0000ba  6008              STR      r0,[r1,#0]            ;278  ; SDIO_CmdInitStructure
0000bc  2003              MOVS     r0,#3                 ;279
0000be  6048              STR      r0,[r1,#4]            ;279  ; SDIO_CmdInitStructure
0000c0  2040              MOVS     r0,#0x40              ;280
0000c2  6088              STR      r0,[r1,#8]            ;280  ; SDIO_CmdInitStructure
0000c4  2000              MOVS     r0,#0                 ;281
0000c6  60c8              STR      r0,[r1,#0xc]          ;281  ; SDIO_CmdInitStructure
0000c8  f44f6080          MOV      r0,#0x400             ;282
0000cc  6108              STR      r0,[r1,#0x10]         ;282  ; SDIO_CmdInitStructure
0000ce  4608              MOV      r0,r1                 ;283
0000d0  f7fffffe          BL       SDIO_SendCommand
0000d4  f7fffffe          BL       CmdResp2Error
0000d8  4604              MOV      r4,r0                 ;285
0000da  b10c              CBZ      r4,|L17.224|
0000dc  4620              MOV      r0,r4                 ;286
0000de  e797              B        |L17.16|
                  |L17.224|
0000e0  4816              LDR      r0,|L17.316|
0000e2  7800              LDRB     r0,[r0,#0]            ;288  ; CardType
0000e4  2804              CMP      r0,#4                 ;288
0000e6  d027              BEQ      |L17.312|
0000e8  f8bd0000          LDRH     r0,[sp,#0]            ;290
0000ec  4917              LDR      r1,|L17.332|
0000ee  6008              STR      r0,[r1,#0]            ;290  ; RCA
0000f0  f8bd0000          LDRH     r0,[sp,#0]            ;291
0000f4  0400              LSLS     r0,r0,#16             ;291
0000f6  4912              LDR      r1,|L17.320|
0000f8  6008              STR      r0,[r1,#0]            ;291  ; SDIO_CmdInitStructure
0000fa  2009              MOVS     r0,#9                 ;292
0000fc  6048              STR      r0,[r1,#4]            ;292  ; SDIO_CmdInitStructure
0000fe  20c0              MOVS     r0,#0xc0              ;293
000100  6088              STR      r0,[r1,#8]            ;293  ; SDIO_CmdInitStructure
000102  2000              MOVS     r0,#0                 ;294
000104  60c8              STR      r0,[r1,#0xc]          ;294  ; SDIO_CmdInitStructure
000106  f44f6080          MOV      r0,#0x400             ;295
00010a  6108              STR      r0,[r1,#0x10]         ;295  ; SDIO_CmdInitStructure
00010c  4608              MOV      r0,r1                 ;296
00010e  f7fffffe          BL       SDIO_SendCommand
000112  f7fffffe          BL       CmdResp2Error
000116  4604              MOV      r4,r0                 ;298
000118  b10c              CBZ      r4,|L17.286|
00011a  4620              MOV      r0,r4                 ;299
00011c  e778              B        |L17.16|
                  |L17.286|
00011e  4809              LDR      r0,|L17.324|
000120  6940              LDR      r0,[r0,#0x14]         ;300
000122  490b              LDR      r1,|L17.336|
000124  6008              STR      r0,[r1,#0]            ;300  ; CSD_Tab
000126  4807              LDR      r0,|L17.324|
000128  6980              LDR      r0,[r0,#0x18]         ;301
00012a  6048              STR      r0,[r1,#4]            ;301  ; CSD_Tab
00012c  4805              LDR      r0,|L17.324|
00012e  69c0              LDR      r0,[r0,#0x1c]         ;302
000130  6088              STR      r0,[r1,#8]            ;302  ; CSD_Tab
000132  4804              LDR      r0,|L17.324|
000134  6a00              LDR      r0,[r0,#0x20]         ;303
000136  60c8              STR      r0,[r1,#0xc]          ;303  ; CSD_Tab
                  |L17.312|
000138  2000              MOVS     r0,#0                 ;305
00013a  e769              B        |L17.16|
;;;307    //得到卡信息
                          ENDP

                  |L17.316|
                          DCD      CardType
                  |L17.320|
                          DCD      SDIO_CmdInitStructure
                  |L17.324|
                          DCD      0x40018000
                  |L17.328|
                          DCD      CID_Tab
                  |L17.332|
                          DCD      ||RCA||
                  |L17.336|
                          DCD      CSD_Tab

                          AREA ||i.SD_PowerOFF||, CODE, READONLY, ALIGN=1

                  SD_PowerOFF PROC
;;;235    //返回值:错误代码;(0,无错误)
;;;236    SD_Error SD_PowerOFF(void)
000000  b510              PUSH     {r4,lr}
;;;237    {
;;;238      SDIO_SetPowerState(SDIO_PowerState_OFF);//SDIO电源关闭,时钟停止	
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       SDIO_SetPowerState
;;;239    	return SD_OK;		  
000008  2000              MOVS     r0,#0
;;;240    }   
00000a  bd10              POP      {r4,pc}
;;;241    //初始化所有的卡,并让卡进入就绪状态
                          ENDP


                          AREA ||i.SD_PowerON||, CODE, READONLY, ALIGN=2

                  SD_PowerON PROC
;;;112    //返回值:错误代码;(0,无错误)
;;;113    SD_Error SD_PowerON(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;114    {
;;;115     	u8 i=0;
000004  2700              MOVS     r7,#0
;;;116    	SD_Error errorstatus=SD_OK;
000006  2400              MOVS     r4,#0
;;;117    	u32 response=0,count=0,validvoltage=0;
000008  2600              MOVS     r6,#0
00000a  2500              MOVS     r5,#0
00000c  46a0              MOV      r8,r4
;;;118    	u32 SDType=SD_STD_CAPACITY;
00000e  46a1              MOV      r9,r4
;;;119     
;;;120    	/*初始化时的时钟不能大于400KHz*/ 
;;;121      SDIO_InitStructure.SDIO_ClockDiv = SDIO_INIT_CLK_DIV;	/* HCLK = 72MHz, SDIOCLK = 72MHz, SDIO_CK = HCLK/(178 + 2) = 400 KHz */
000010  20b2              MOVS     r0,#0xb2
000012  496c              LDR      r1,|L19.452|
000014  7508              STRB     r0,[r1,#0x14]
;;;122      SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
000016  2000              MOVS     r0,#0
000018  6008              STR      r0,[r1,#0]  ; SDIO_InitStructure
;;;123      SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;  //不使用bypass模式，直接用HCLK进行分频得到SDIO_CK
00001a  6048              STR      r0,[r1,#4]  ; SDIO_InitStructure
;;;124      SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;	// 空闲时不关闭时钟电源
00001c  6088              STR      r0,[r1,#8]  ; SDIO_InitStructure
;;;125      SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;	 				//1位数据线
00001e  60c8              STR      r0,[r1,#0xc]  ; SDIO_InitStructure
;;;126      SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;//硬件流
000020  6108              STR      r0,[r1,#0x10]  ; SDIO_InitStructure
;;;127      SDIO_Init(&SDIO_InitStructure);
000022  4608              MOV      r0,r1
000024  f7fffffe          BL       SDIO_Init
;;;128     
;;;129    	SDIO_SetPowerState(SDIO_PowerState_ON);	//上电状态,开启卡时钟
000028  2003              MOVS     r0,#3
00002a  f7fffffe          BL       SDIO_SetPowerState
;;;130     	  
;;;131    	SDIO_ClockCmd(ENABLE);//SDIOCK使能 
00002e  2001              MOVS     r0,#1
000030  f7fffffe          BL       SDIO_ClockCmd
;;;132    	
;;;133     	for(i=0;i<74;i++)
000034  bf00              NOP      
000036  e012              B        |L19.94|
                  |L19.56|
;;;134    	{
;;;135    		SDIO_CmdInitStructure.SDIO_Argument = 0x0;//发送CMD0进入IDLE STAGE模式命令.
000038  2000              MOVS     r0,#0
00003a  4963              LDR      r1,|L19.456|
00003c  6008              STR      r0,[r1,#0]  ; SDIO_CmdInitStructure
;;;136        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_GO_IDLE_STATE; //cmd0
00003e  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;137        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_No;  //无响应
000040  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;138        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
000042  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;139        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;  //则CPSM在开始发送命令之前等待数据传输结束。 
000044  f44f6080          MOV      r0,#0x400
000048  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;140        SDIO_SendCommand(&SDIO_CmdInitStructure);	  		//写命令进命令寄存器
00004a  4608              MOV      r0,r1
00004c  f7fffffe          BL       SDIO_SendCommand
;;;141    		
;;;142    		errorstatus=CmdError();
000050  f7fffffe          BL       CmdError
000054  4604              MOV      r4,r0
;;;143    		if(errorstatus==SD_OK)break;
000056  b904              CBNZ     r4,|L19.90|
000058  e003              B        |L19.98|
                  |L19.90|
00005a  1c78              ADDS     r0,r7,#1              ;133
00005c  b2c7              UXTB     r7,r0                 ;133
                  |L19.94|
00005e  2f4a              CMP      r7,#0x4a              ;133
000060  dbea              BLT      |L19.56|
                  |L19.98|
000062  bf00              NOP      
;;;144     	}
;;;145     	if(errorstatus)return errorstatus;//返回错误状态
000064  b114              CBZ      r4,|L19.108|
000066  4620              MOV      r0,r4
                  |L19.104|
;;;146    
;;;147    	SDIO_CmdInitStructure.SDIO_Argument = SD_CHECK_PATTERN;	//发送CMD8,短响应,检查SD卡接口特性
;;;148      SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_IF_COND;	//cmd8
;;;149      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;	 //r7
;;;150      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;			 //关闭等待中断
;;;151      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;152      SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;153    	
;;;154      	errorstatus=CmdResp7Error();						//等待R7响应
;;;155     	if(errorstatus==SD_OK) 								//R7响应正常
;;;156    	{
;;;157    		CardType=SDIO_STD_CAPACITY_SD_CARD_V2_0;		//SD 2.0卡
;;;158    		SDType=SD_HIGH_CAPACITY;			   			//高容量卡
;;;159    	}
;;;160    	  SDIO_CmdInitStructure.SDIO_Argument = 0x00;//发送CMD55,短响应	
;;;161        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;162        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;163        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;164        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;165        SDIO_SendCommand(&SDIO_CmdInitStructure);		//发送CMD55,短响应	 
;;;166    	
;;;167    	errorstatus=CmdResp1Error(SD_CMD_APP_CMD); 		 	//等待R1响应   
;;;168    	if(errorstatus==SD_OK)//SD2.0/SD 1.1,否则为MMC卡
;;;169    	{																  
;;;170    		//SD卡,发送ACMD41 SD_APP_OP_COND,参数为:0x80100000 
;;;171    		while((!validvoltage)&&(count<SD_MAX_VOLT_TRIAL))
;;;172    		{	   										   
;;;173    		  SDIO_CmdInitStructure.SDIO_Argument = 0x00;//发送CMD55,短响应
;;;174          SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;	  //CMD55
;;;175          SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;176          SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;177          SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;178          SDIO_SendCommand(&SDIO_CmdInitStructure);			//发送CMD55,短响应	 
;;;179    			
;;;180    			errorstatus=CmdResp1Error(SD_CMD_APP_CMD); 	 	//等待R1响应   
;;;181     			if(errorstatus!=SD_OK)return errorstatus;   	//响应错误
;;;182    			
;;;183          //acmd41，命令参数由支持的电压范围及HCS位组成，HCS位置一来区分卡是SDSc还是sdhc
;;;184          SDIO_CmdInitStructure.SDIO_Argument = SD_VOLTAGE_WINDOW_SD | SDType;	//发送ACMD41,短响应	
;;;185          SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_APP_OP_COND;
;;;186          SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;  //r3
;;;187          SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;188          SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;189          SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;190    			
;;;191    			errorstatus=CmdResp3Error(); 					//等待R3响应
;;;192    			
;;;193     			if(errorstatus!=SD_OK)return errorstatus;   	//响应错误  
;;;194    			response=SDIO->RESP1;;			   				//得到响应
;;;195    			validvoltage=(((response>>31)==1)?1:0);			//判断SD卡上电是否完成
;;;196    			count++;
;;;197    		}
;;;198    		if(count>=SD_MAX_VOLT_TRIAL)
;;;199    		{
;;;200    			errorstatus=SD_INVALID_VOLTRANGE;
;;;201    			return errorstatus;
;;;202    		}	 
;;;203    		if(response&=SD_HIGH_CAPACITY)
;;;204    		{
;;;205    			CardType=SDIO_HIGH_CAPACITY_SD_CARD;
;;;206    		}
;;;207     	}else//MMC卡
;;;208    	{
;;;209    		//MMC卡,发送CMD1 SDIO_SEND_OP_COND,参数为:0x80FF8000 
;;;210    		while((!validvoltage)&&(count<SD_MAX_VOLT_TRIAL))
;;;211    		{	   										   				   
;;;212    			SDIO_CmdInitStructure.SDIO_Argument = SD_VOLTAGE_WINDOW_MMC;//发送CMD1,短响应	   
;;;213          SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_OP_COND;
;;;214          SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;  //r3
;;;215          SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;216          SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;217          SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;218    			
;;;219    			errorstatus=CmdResp3Error(); 					//等待R3响应   
;;;220     			if(errorstatus!=SD_OK)return errorstatus;   	//响应错误  
;;;221    			response=SDIO->RESP1;;			   				//得到响应
;;;222    			validvoltage=(((response>>31)==1)?1:0);
;;;223    			count++;
;;;224    		}
;;;225    		if(count>=SD_MAX_VOLT_TRIAL)
;;;226    		{
;;;227    			errorstatus=SD_INVALID_VOLTRANGE;
;;;228    			return errorstatus;
;;;229    		}	 			    
;;;230    		CardType=SDIO_MULTIMEDIA_CARD;	  
;;;231      	}  
;;;232      	return(errorstatus);		
;;;233    }
000068  e8bd87f0          POP      {r4-r10,pc}
                  |L19.108|
00006c  f44f70d5          MOV      r0,#0x1aa             ;147
000070  4955              LDR      r1,|L19.456|
000072  6008              STR      r0,[r1,#0]            ;147  ; SDIO_CmdInitStructure
000074  2008              MOVS     r0,#8                 ;148
000076  6048              STR      r0,[r1,#4]            ;148  ; SDIO_CmdInitStructure
000078  2040              MOVS     r0,#0x40              ;149
00007a  6088              STR      r0,[r1,#8]            ;149  ; SDIO_CmdInitStructure
00007c  2000              MOVS     r0,#0                 ;150
00007e  60c8              STR      r0,[r1,#0xc]          ;150  ; SDIO_CmdInitStructure
000080  f44f6080          MOV      r0,#0x400             ;151
000084  6108              STR      r0,[r1,#0x10]         ;151  ; SDIO_CmdInitStructure
000086  4608              MOV      r0,r1                 ;152
000088  f7fffffe          BL       SDIO_SendCommand
00008c  f7fffffe          BL       CmdResp7Error
000090  4604              MOV      r4,r0                 ;154
000092  b924              CBNZ     r4,|L19.158|
000094  2001              MOVS     r0,#1                 ;157
000096  494d              LDR      r1,|L19.460|
000098  7008              STRB     r0,[r1,#0]            ;157
00009a  f04f4980          MOV      r9,#0x40000000        ;158
                  |L19.158|
00009e  2000              MOVS     r0,#0                 ;160
0000a0  4949              LDR      r1,|L19.456|
0000a2  6008              STR      r0,[r1,#0]            ;160  ; SDIO_CmdInitStructure
0000a4  2037              MOVS     r0,#0x37              ;161
0000a6  6048              STR      r0,[r1,#4]            ;161  ; SDIO_CmdInitStructure
0000a8  2040              MOVS     r0,#0x40              ;162
0000aa  6088              STR      r0,[r1,#8]            ;162  ; SDIO_CmdInitStructure
0000ac  2000              MOVS     r0,#0                 ;163
0000ae  60c8              STR      r0,[r1,#0xc]          ;163  ; SDIO_CmdInitStructure
0000b0  f44f6080          MOV      r0,#0x400             ;164
0000b4  6108              STR      r0,[r1,#0x10]         ;164  ; SDIO_CmdInitStructure
0000b6  4608              MOV      r0,r1                 ;165
0000b8  f7fffffe          BL       SDIO_SendCommand
0000bc  2037              MOVS     r0,#0x37              ;167
0000be  f7fffffe          BL       CmdResp1Error
0000c2  4604              MOV      r4,r0                 ;167
0000c4  2c00              CMP      r4,#0                 ;168
0000c6  d14b              BNE      |L19.352|
0000c8  e034              B        |L19.308|
                  |L19.202|
0000ca  2000              MOVS     r0,#0                 ;173
0000cc  493e              LDR      r1,|L19.456|
0000ce  6008              STR      r0,[r1,#0]            ;173  ; SDIO_CmdInitStructure
0000d0  2037              MOVS     r0,#0x37              ;174
0000d2  6048              STR      r0,[r1,#4]            ;174  ; SDIO_CmdInitStructure
0000d4  2040              MOVS     r0,#0x40              ;175
0000d6  6088              STR      r0,[r1,#8]            ;175  ; SDIO_CmdInitStructure
0000d8  2000              MOVS     r0,#0                 ;176
0000da  60c8              STR      r0,[r1,#0xc]          ;176  ; SDIO_CmdInitStructure
0000dc  f44f6080          MOV      r0,#0x400             ;177
0000e0  6108              STR      r0,[r1,#0x10]         ;177  ; SDIO_CmdInitStructure
0000e2  4608              MOV      r0,r1                 ;178
0000e4  f7fffffe          BL       SDIO_SendCommand
0000e8  2037              MOVS     r0,#0x37              ;180
0000ea  f7fffffe          BL       CmdResp1Error
0000ee  4604              MOV      r4,r0                 ;180
0000f0  b10c              CBZ      r4,|L19.246|
0000f2  4620              MOV      r0,r4                 ;181
0000f4  e7b8              B        |L19.104|
                  |L19.246|
0000f6  4836              LDR      r0,|L19.464|
0000f8  ea490000          ORR      r0,r9,r0              ;184
0000fc  4932              LDR      r1,|L19.456|
0000fe  6008              STR      r0,[r1,#0]            ;184  ; SDIO_CmdInitStructure
000100  2029              MOVS     r0,#0x29              ;185
000102  6048              STR      r0,[r1,#4]            ;185  ; SDIO_CmdInitStructure
000104  2040              MOVS     r0,#0x40              ;186
000106  6088              STR      r0,[r1,#8]            ;186  ; SDIO_CmdInitStructure
000108  2000              MOVS     r0,#0                 ;187
00010a  60c8              STR      r0,[r1,#0xc]          ;187  ; SDIO_CmdInitStructure
00010c  f44f6080          MOV      r0,#0x400             ;188
000110  6108              STR      r0,[r1,#0x10]         ;188  ; SDIO_CmdInitStructure
000112  4608              MOV      r0,r1                 ;189
000114  f7fffffe          BL       SDIO_SendCommand
000118  f7fffffe          BL       CmdResp3Error
00011c  4604              MOV      r4,r0                 ;191
00011e  b10c              CBZ      r4,|L19.292|
000120  4620              MOV      r0,r4                 ;193
000122  e7a1              B        |L19.104|
                  |L19.292|
000124  482b              LDR      r0,|L19.468|
000126  6946              LDR      r6,[r0,#0x14]         ;194
000128  2001              MOVS     r0,#1                 ;195
00012a  ea8070d6          EOR      r0,r0,r6,LSR #31      ;195
00012e  f0800801          EOR      r8,r0,#1              ;195
000132  1c6d              ADDS     r5,r5,#1              ;196
                  |L19.308|
000134  f1b80f00          CMP      r8,#0                 ;171
000138  d103              BNE      |L19.322|
00013a  f64f70ff          MOV      r0,#0xffff            ;171
00013e  4285              CMP      r5,r0                 ;171
000140  d3c3              BCC      |L19.202|
                  |L19.322|
000142  f64f70ff          MOV      r0,#0xffff            ;198
000146  4285              CMP      r5,r0                 ;198
000148  d302              BCC      |L19.336|
00014a  241b              MOVS     r4,#0x1b              ;200
00014c  4620              MOV      r0,r4                 ;201
00014e  e78b              B        |L19.104|
                  |L19.336|
000150  f0064080          AND      r0,r6,#0x40000000     ;203
000154  1e06              SUBS     r6,r0,#0              ;203
000156  d032              BEQ      |L19.446|
000158  2002              MOVS     r0,#2                 ;205
00015a  491c              LDR      r1,|L19.460|
00015c  7008              STRB     r0,[r1,#0]            ;205
00015e  e02e              B        |L19.446|
                  |L19.352|
000160  e01c              B        |L19.412|
                  |L19.354|
000162  481d              LDR      r0,|L19.472|
000164  4918              LDR      r1,|L19.456|
000166  6008              STR      r0,[r1,#0]            ;212  ; SDIO_CmdInitStructure
000168  2001              MOVS     r0,#1                 ;213
00016a  6048              STR      r0,[r1,#4]            ;213  ; SDIO_CmdInitStructure
00016c  2040              MOVS     r0,#0x40              ;214
00016e  6088              STR      r0,[r1,#8]            ;214  ; SDIO_CmdInitStructure
000170  2000              MOVS     r0,#0                 ;215
000172  60c8              STR      r0,[r1,#0xc]          ;215  ; SDIO_CmdInitStructure
000174  f44f6080          MOV      r0,#0x400             ;216
000178  6108              STR      r0,[r1,#0x10]         ;216  ; SDIO_CmdInitStructure
00017a  4608              MOV      r0,r1                 ;217
00017c  f7fffffe          BL       SDIO_SendCommand
000180  f7fffffe          BL       CmdResp3Error
000184  4604              MOV      r4,r0                 ;219
000186  b10c              CBZ      r4,|L19.396|
000188  4620              MOV      r0,r4                 ;220
00018a  e76d              B        |L19.104|
                  |L19.396|
00018c  4811              LDR      r0,|L19.468|
00018e  6946              LDR      r6,[r0,#0x14]         ;221
000190  2001              MOVS     r0,#1                 ;222
000192  ea8070d6          EOR      r0,r0,r6,LSR #31      ;222
000196  f0800801          EOR      r8,r0,#1              ;222
00019a  1c6d              ADDS     r5,r5,#1              ;223
                  |L19.412|
00019c  f1b80f00          CMP      r8,#0                 ;210
0001a0  d103              BNE      |L19.426|
0001a2  f64f70ff          MOV      r0,#0xffff            ;210
0001a6  4285              CMP      r5,r0                 ;210
0001a8  d3db              BCC      |L19.354|
                  |L19.426|
0001aa  f64f70ff          MOV      r0,#0xffff            ;225
0001ae  4285              CMP      r5,r0                 ;225
0001b0  d302              BCC      |L19.440|
0001b2  241b              MOVS     r4,#0x1b              ;227
0001b4  4620              MOV      r0,r4                 ;228
0001b6  e757              B        |L19.104|
                  |L19.440|
0001b8  2003              MOVS     r0,#3                 ;230
0001ba  4904              LDR      r1,|L19.460|
0001bc  7008              STRB     r0,[r1,#0]            ;230
                  |L19.446|
0001be  4620              MOV      r0,r4                 ;232
0001c0  e752              B        |L19.104|
;;;234    //SD卡 Power OFF
                          ENDP

0001c2  0000              DCW      0x0000
                  |L19.452|
                          DCD      SDIO_InitStructure
                  |L19.456|
                          DCD      SDIO_CmdInitStructure
                  |L19.460|
                          DCD      CardType
                  |L19.464|
                          DCD      0x80100000
                  |L19.468|
                          DCD      0x40018000
                  |L19.472|
                          DCD      0x80ff8000

                          AREA ||i.SD_ProcessIRQSrc||, CODE, READONLY, ALIGN=2

                  SD_ProcessIRQSrc PROC
;;;1119   //返回值:错误代码
;;;1120   SD_Error SD_ProcessIRQSrc(void)
000000  b510              PUSH     {r4,lr}
;;;1121   {
;;;1122   	if(SDIO->STA&(1<<8))//接收完成中断
000002  4849              LDR      r0,|L20.296|
000004  6b40              LDR      r0,[r0,#0x34]
000006  f4007080          AND      r0,r0,#0x100
00000a  b370              CBZ      r0,|L20.106|
;;;1123   	{	 
;;;1124   		if (StopCondition==1)
00000c  4847              LDR      r0,|L20.300|
00000e  7800              LDRB     r0,[r0,#0]  ; StopCondition
000010  2801              CMP      r0,#1
000012  d114              BNE      |L20.62|
;;;1125   		{
;;;1126   			SDIO_CmdInitStructure.SDIO_Argument =0;//发送CMD12+结束传输 	  
000014  2000              MOVS     r0,#0
000016  4946              LDR      r1,|L20.304|
000018  6008              STR      r0,[r1,#0]  ; SDIO_CmdInitStructure
;;;1127   			SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_STOP_TRANSMISSION;
00001a  200c              MOVS     r0,#0xc
00001c  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;1128   			SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
00001e  2040              MOVS     r0,#0x40
000020  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;1129   			SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
000022  2000              MOVS     r0,#0
000024  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;1130   			SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
000026  f44f6080          MOV      r0,#0x400
00002a  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;1131   			SDIO_SendCommand(&SDIO_CmdInitStructure);	
00002c  4608              MOV      r0,r1
00002e  f7fffffe          BL       SDIO_SendCommand
;;;1132   			
;;;1133   			TransferError=CmdResp1Error(SD_CMD_STOP_TRANSMISSION);
000032  200c              MOVS     r0,#0xc
000034  f7fffffe          BL       CmdResp1Error
000038  493e              LDR      r1,|L20.308|
00003a  7008              STRB     r0,[r1,#0]
00003c  e002              B        |L20.68|
                  |L20.62|
;;;1134   		}else TransferError = SD_OK;	
00003e  2000              MOVS     r0,#0
000040  493c              LDR      r1,|L20.308|
000042  7008              STRB     r0,[r1,#0]
                  |L20.68|
;;;1135    		SDIO->ICR|=1<<8;//清除完成中断标记
000044  4838              LDR      r0,|L20.296|
000046  6b80              LDR      r0,[r0,#0x38]
000048  f4407080          ORR      r0,r0,#0x100
00004c  4936              LDR      r1,|L20.296|
00004e  6388              STR      r0,[r1,#0x38]
;;;1136   		SDIO->MASK&=~((1<<1)|(1<<3)|(1<<8)|(1<<14)|(1<<15)|(1<<4)|(1<<5)|(1<<9));//关闭相关中断
000050  4608              MOV      r0,r1
000052  6bc0              LDR      r0,[r0,#0x3c]
000054  f24c313a          MOV      r1,#0xc33a
000058  4388              BICS     r0,r0,r1
00005a  4933              LDR      r1,|L20.296|
00005c  63c8              STR      r0,[r1,#0x3c]
;;;1137    		TransferEnd = 1;
00005e  2001              MOVS     r0,#1
000060  4935              LDR      r1,|L20.312|
000062  7008              STRB     r0,[r1,#0]
;;;1138   		return(TransferError);
000064  4833              LDR      r0,|L20.308|
000066  7800              LDRB     r0,[r0,#0]  ; TransferError
                  |L20.104|
;;;1139   	}
;;;1140    	if(SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)//数据CRC错误
;;;1141   	{
;;;1142   		SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);  		//清错误标志
;;;1143   		SDIO->MASK&=~((1<<1)|(1<<3)|(1<<8)|(1<<14)|(1<<15)|(1<<4)|(1<<5)|(1<<9));//关闭相关中断
;;;1144   	    TransferError = SD_DATA_CRC_FAIL;
;;;1145   	    return(SD_DATA_CRC_FAIL);
;;;1146   	}
;;;1147    	if(SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)//数据超时错误
;;;1148   	{
;;;1149   		SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);  			//清中断标志
;;;1150   		SDIO->MASK&=~((1<<1)|(1<<3)|(1<<8)|(1<<14)|(1<<15)|(1<<4)|(1<<5)|(1<<9));//关闭相关中断
;;;1151   	    TransferError = SD_DATA_TIMEOUT;
;;;1152   	    return(SD_DATA_TIMEOUT);
;;;1153   	}
;;;1154     	if(SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)//FIFO上溢错误
;;;1155   	{
;;;1156   		SDIO_ClearFlag(SDIO_FLAG_RXOVERR);  			//清中断标志
;;;1157   		SDIO->MASK&=~((1<<1)|(1<<3)|(1<<8)|(1<<14)|(1<<15)|(1<<4)|(1<<5)|(1<<9));//关闭相关中断
;;;1158   	    TransferError = SD_RX_OVERRUN;
;;;1159   	    return(SD_RX_OVERRUN);
;;;1160   	}
;;;1161      	if(SDIO_GetFlagStatus(SDIO_FLAG_TXUNDERR) != RESET)//FIFO下溢错误
;;;1162   	{
;;;1163   		SDIO_ClearFlag(SDIO_FLAG_TXUNDERR);  			//清中断标志
;;;1164   		SDIO->MASK&=~((1<<1)|(1<<3)|(1<<8)|(1<<14)|(1<<15)|(1<<4)|(1<<5)|(1<<9));//关闭相关中断
;;;1165   	    TransferError = SD_TX_UNDERRUN;
;;;1166   	    return(SD_TX_UNDERRUN);
;;;1167   	}
;;;1168   	if(SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)//起始位错误
;;;1169   	{
;;;1170   		SDIO_ClearFlag(SDIO_FLAG_STBITERR);  		//清中断标志
;;;1171   		SDIO->MASK&=~((1<<1)|(1<<3)|(1<<8)|(1<<14)|(1<<15)|(1<<4)|(1<<5)|(1<<9));//关闭相关中断
;;;1172   	    TransferError = SD_START_BIT_ERR;
;;;1173   	    return(SD_START_BIT_ERR);
;;;1174   	}
;;;1175   	return(SD_OK);
;;;1176   }
000068  bd10              POP      {r4,pc}
                  |L20.106|
00006a  e7ff              B        |L20.108|
                  |L20.108|
00006c  2002              MOVS     r0,#2                 ;1140
00006e  f7fffffe          BL       SDIO_GetFlagStatus
000072  b168              CBZ      r0,|L20.144|
000074  2002              MOVS     r0,#2                 ;1142
000076  f7fffffe          BL       SDIO_ClearFlag
00007a  482b              LDR      r0,|L20.296|
00007c  6bc0              LDR      r0,[r0,#0x3c]         ;1143
00007e  f24c313a          MOV      r1,#0xc33a            ;1143
000082  4388              BICS     r0,r0,r1              ;1143
000084  4928              LDR      r1,|L20.296|
000086  63c8              STR      r0,[r1,#0x3c]         ;1143
000088  2002              MOVS     r0,#2                 ;1144
00008a  492a              LDR      r1,|L20.308|
00008c  7008              STRB     r0,[r1,#0]            ;1144
00008e  e7eb              B        |L20.104|
                  |L20.144|
000090  2008              MOVS     r0,#8                 ;1147
000092  f7fffffe          BL       SDIO_GetFlagStatus
000096  b168              CBZ      r0,|L20.180|
000098  2008              MOVS     r0,#8                 ;1149
00009a  f7fffffe          BL       SDIO_ClearFlag
00009e  4822              LDR      r0,|L20.296|
0000a0  6bc0              LDR      r0,[r0,#0x3c]         ;1150
0000a2  f24c313a          MOV      r1,#0xc33a            ;1150
0000a6  4388              BICS     r0,r0,r1              ;1150
0000a8  491f              LDR      r1,|L20.296|
0000aa  63c8              STR      r0,[r1,#0x3c]         ;1150
0000ac  2004              MOVS     r0,#4                 ;1151
0000ae  4921              LDR      r1,|L20.308|
0000b0  7008              STRB     r0,[r1,#0]            ;1151
0000b2  e7d9              B        |L20.104|
                  |L20.180|
0000b4  2020              MOVS     r0,#0x20              ;1154
0000b6  f7fffffe          BL       SDIO_GetFlagStatus
0000ba  b168              CBZ      r0,|L20.216|
0000bc  2020              MOVS     r0,#0x20              ;1156
0000be  f7fffffe          BL       SDIO_ClearFlag
0000c2  4819              LDR      r0,|L20.296|
0000c4  6bc0              LDR      r0,[r0,#0x3c]         ;1157
0000c6  f24c313a          MOV      r1,#0xc33a            ;1157
0000ca  4388              BICS     r0,r0,r1              ;1157
0000cc  4916              LDR      r1,|L20.296|
0000ce  63c8              STR      r0,[r1,#0x3c]         ;1157
0000d0  2006              MOVS     r0,#6                 ;1158
0000d2  4918              LDR      r1,|L20.308|
0000d4  7008              STRB     r0,[r1,#0]            ;1158
0000d6  e7c7              B        |L20.104|
                  |L20.216|
0000d8  2010              MOVS     r0,#0x10              ;1161
0000da  f7fffffe          BL       SDIO_GetFlagStatus
0000de  b168              CBZ      r0,|L20.252|
0000e0  2010              MOVS     r0,#0x10              ;1163
0000e2  f7fffffe          BL       SDIO_ClearFlag
0000e6  4810              LDR      r0,|L20.296|
0000e8  6bc0              LDR      r0,[r0,#0x3c]         ;1164
0000ea  f24c313a          MOV      r1,#0xc33a            ;1164
0000ee  4388              BICS     r0,r0,r1              ;1164
0000f0  490d              LDR      r1,|L20.296|
0000f2  63c8              STR      r0,[r1,#0x3c]         ;1164
0000f4  2005              MOVS     r0,#5                 ;1165
0000f6  490f              LDR      r1,|L20.308|
0000f8  7008              STRB     r0,[r1,#0]            ;1165
0000fa  e7b5              B        |L20.104|
                  |L20.252|
0000fc  f44f7000          MOV      r0,#0x200             ;1168
000100  f7fffffe          BL       SDIO_GetFlagStatus
000104  b170              CBZ      r0,|L20.292|
000106  f44f7000          MOV      r0,#0x200             ;1170
00010a  f7fffffe          BL       SDIO_ClearFlag
00010e  4806              LDR      r0,|L20.296|
000110  6bc0              LDR      r0,[r0,#0x3c]         ;1171
000112  f24c313a          MOV      r1,#0xc33a            ;1171
000116  4388              BICS     r0,r0,r1              ;1171
000118  4903              LDR      r1,|L20.296|
00011a  63c8              STR      r0,[r1,#0x3c]         ;1171
00011c  2007              MOVS     r0,#7                 ;1172
00011e  4905              LDR      r1,|L20.308|
000120  7008              STRB     r0,[r1,#0]            ;1172
000122  e7a1              B        |L20.104|
                  |L20.292|
000124  2000              MOVS     r0,#0                 ;1175
000126  e79f              B        |L20.104|
;;;1177     
                          ENDP

                  |L20.296|
                          DCD      0x40018000
                  |L20.300|
                          DCD      StopCondition
                  |L20.304|
                          DCD      SDIO_CmdInitStructure
                  |L20.308|
                          DCD      TransferError
                  |L20.312|
                          DCD      TransferEnd

                          AREA ||i.SD_ReadBlock||, CODE, READONLY, ALIGN=2

                  SD_ReadBlock PROC
;;;483    //blksize:块大小
;;;484    SD_Error SD_ReadBlock(u8 *buf,long long addr,u16 blksize)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;485    {	  
000004  4681              MOV      r9,r0
000006  4617              MOV      r7,r2
000008  4698              MOV      r8,r3
00000a  9c0a              LDR      r4,[sp,#0x28]
;;;486    	SD_Error errorstatus=SD_OK;
00000c  f04f0a00          MOV      r10,#0
;;;487    	u8 power;
;;;488       	u32 count=0,*tempbuff=(u32*)buf;//转换为u32指针 
000010  46d3              MOV      r11,r10
000012  464d              MOV      r5,r9
;;;489    	u32 timeout=SDIO_DATATIMEOUT;   
000014  f04f36ff          MOV      r6,#0xffffffff
;;;490       	if(NULL==buf)return SD_INVALID_PARAMETER; 
000018  f1b90f00          CMP      r9,#0
00001c  d102              BNE      |L21.36|
00001e  2026              MOVS     r0,#0x26
                  |L21.32|
;;;491       	SDIO->DCTRL=0x0;	//数据控制寄存器清零(关DMA)   
;;;492    	if(CardType==SDIO_HIGH_CAPACITY_SD_CARD)//大容量卡
;;;493    	{
;;;494    		blksize=512;
;;;495    		addr>>=9;
;;;496    	}   
;;;497     
;;;498      	SDIO_DataInitStructure.SDIO_DataBlockSize= SDIO_DataBlockSize_1b ;//清除DPSM状态机配置
;;;499    	  SDIO_DataInitStructure.SDIO_DataLength= 0 ;
;;;500    	  SDIO_DataInitStructure.SDIO_DataTimeOut=SD_DATATIMEOUT ;
;;;501    	  SDIO_DataInitStructure.SDIO_DPSM=SDIO_DPSM_Enable;
;;;502    	  SDIO_DataInitStructure.SDIO_TransferDir=SDIO_TransferDir_ToCard;
;;;503    	  SDIO_DataInitStructure.SDIO_TransferMode=SDIO_TransferMode_Block;
;;;504        SDIO_DataConfig(&SDIO_DataInitStructure);
;;;505    	
;;;506    	
;;;507    	if(SDIO->RESP1&SD_CARD_LOCKED)return SD_LOCK_UNLOCK_FAILED;//卡锁了
;;;508    	
;;;509    	if((blksize>0)&&(blksize<=2048)&&((blksize&(blksize-1))==0))
;;;510    	{
;;;511    		power=convert_from_bytes_to_power_of_two(blksize);	    
;;;512     
;;;513    		SDIO_CmdInitStructure.SDIO_Argument =  blksize;
;;;514        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
;;;515        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;516        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;517        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;518        SDIO_SendCommand(&SDIO_CmdInitStructure);//发送CMD16+设置数据长度为blksize,短响应
;;;519    		
;;;520    		errorstatus=CmdResp1Error(SD_CMD_SET_BLOCKLEN);	//等待R1响应  
;;;521    		
;;;522    		if(errorstatus!=SD_OK)return errorstatus;   	//响应错误	 
;;;523    	}else return SD_INVALID_PARAMETER;	  	  									    
;;;524    	  SDIO_DataInitStructure.SDIO_DataBlockSize= power<<4 ;//清除DPSM状态机配置
;;;525    	  SDIO_DataInitStructure.SDIO_DataLength= blksize ;
;;;526    	  SDIO_DataInitStructure.SDIO_DataTimeOut=SD_DATATIMEOUT ;
;;;527    	  SDIO_DataInitStructure.SDIO_DPSM=SDIO_DPSM_Enable;
;;;528    	  SDIO_DataInitStructure.SDIO_TransferDir=SDIO_TransferDir_ToSDIO;
;;;529    	  SDIO_DataInitStructure.SDIO_TransferMode=SDIO_TransferMode_Block;
;;;530        SDIO_DataConfig(&SDIO_DataInitStructure);
;;;531    	
;;;532    	  SDIO_CmdInitStructure.SDIO_Argument =  addr;
;;;533        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_READ_SINGLE_BLOCK;
;;;534        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;535        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;536        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;537        SDIO_SendCommand(&SDIO_CmdInitStructure);//发送CMD17+从addr地址出读取数据,短响应 
;;;538    	
;;;539    	errorstatus=CmdResp1Error(SD_CMD_READ_SINGLE_BLOCK);//等待R1响应   
;;;540    	if(errorstatus!=SD_OK)return errorstatus;   		//响应错误	 
;;;541     	if(DeviceMode==SD_POLLING_MODE)						//查询模式,轮询数据	 
;;;542    	{
;;;543     		INTX_DISABLE();//关闭总中断(POLLING模式,严禁中断打断SDIO读写操作!!!)
;;;544    		while(!(SDIO->STA&((1<<5)|(1<<1)|(1<<3)|(1<<10)|(1<<9))))//无上溢/CRC/超时/完成(标志)/起始位错误
;;;545    		{
;;;546    			if(SDIO_GetFlagStatus(SDIO_FLAG_RXFIFOHF) != RESET)							//接收区半满,表示至少存了8个字
;;;547    			{
;;;548    				for(count=0;count<8;count++)			//循环读取数据
;;;549    				{
;;;550    					*(tempbuff+count)=SDIO->FIFO;
;;;551    				}
;;;552    				tempbuff+=8;	 
;;;553    				timeout=0X7FFFFF; 	//读数据溢出时间
;;;554    			}else 	//处理超时
;;;555    			{
;;;556    				if(timeout==0)return SD_DATA_TIMEOUT;
;;;557    				timeout--;
;;;558    			}
;;;559    		} 
;;;560    		if(SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)		//数据超时错误
;;;561    		{										   
;;;562    	 		SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT); 	//清错误标志
;;;563    			return SD_DATA_TIMEOUT;
;;;564    	 	}else if(SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)	//数据块CRC错误
;;;565    		{
;;;566    	 		SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);  		//清错误标志
;;;567    			return SD_DATA_CRC_FAIL;		   
;;;568    		}else if(SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET) 	//接收fifo上溢错误
;;;569    		{
;;;570    	 		SDIO_ClearFlag(SDIO_FLAG_RXOVERR);		//清错误标志
;;;571    			return SD_RX_OVERRUN;		 
;;;572    		}else if(SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET) 	//接收起始位错误
;;;573    		{
;;;574    	 		SDIO_ClearFlag(SDIO_FLAG_STBITERR);//清错误标志
;;;575    			return SD_START_BIT_ERR;		 
;;;576    		}   
;;;577    		while(SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)	//FIFO里面,还存在可用数据
;;;578    		{
;;;579    			*tempbuff=SDIO_ReadData();	//循环读取数据
;;;580    			tempbuff++;
;;;581    		}
;;;582    		INTX_ENABLE();//开启总中断
;;;583    		SDIO_ClearFlag(SDIO_STATIC_FLAGS);//清除所有标记
;;;584    	}else if(DeviceMode==SD_DMA_MODE)
;;;585    	{
;;;586      	SD_DMA_Config((u32*)buf,blksize,DMA_DIR_PeripheralSRC); 
;;;587    		TransferError=SD_OK;
;;;588    		StopCondition=0;			//单块读,不需要发送停止传输指令
;;;589    		TransferEnd=0;				//传输结束标置位，在中断服务置1
;;;590    		SDIO->MASK|=(1<<1)|(1<<3)|(1<<8)|(1<<5)|(1<<9);	//配置需要的中断 
;;;591    		SDIO_DMACmd(ENABLE);
;;;592     		while(((DMA2->ISR&0X2000)==RESET)&&(TransferEnd==0)&&(TransferError==SD_OK)&&timeout)timeout--;//等待传输完成 
;;;593    		if(timeout==0)return SD_DATA_TIMEOUT;//超时
;;;594    		if(TransferError!=SD_OK)errorstatus=TransferError;  
;;;595        }   
;;;596     	return errorstatus; 
;;;597    }
000020  e8bd8ff8          POP      {r3-r11,pc}
                  |L21.36|
000024  2000              MOVS     r0,#0                 ;491
000026  4982              LDR      r1,|L21.560|
000028  62c8              STR      r0,[r1,#0x2c]         ;491
00002a  4882              LDR      r0,|L21.564|
00002c  7800              LDRB     r0,[r0,#0]            ;492  ; CardType
00002e  2802              CMP      r0,#2                 ;492
000030  d105              BNE      |L21.62|
000032  0204              LSLS     r4,r0,#8              ;494
000034  0a78              LSRS     r0,r7,#9              ;495
000036  ea4057c8          ORR      r7,r0,r8,LSL #23      ;495
00003a  ea4f2868          ASR      r8,r8,#9              ;495
                  |L21.62|
00003e  2000              MOVS     r0,#0                 ;498
000040  497d              LDR      r1,|L21.568|
000042  6088              STR      r0,[r1,#8]            ;498  ; SDIO_DataInitStructure
000044  6048              STR      r0,[r1,#4]            ;499  ; SDIO_DataInitStructure
000046  1e40              SUBS     r0,r0,#1              ;500
000048  6008              STR      r0,[r1,#0]            ;500  ; SDIO_DataInitStructure
00004a  2001              MOVS     r0,#1                 ;501
00004c  6148              STR      r0,[r1,#0x14]         ;501  ; SDIO_DataInitStructure
00004e  2000              MOVS     r0,#0                 ;502
000050  60c8              STR      r0,[r1,#0xc]          ;502  ; SDIO_DataInitStructure
000052  6108              STR      r0,[r1,#0x10]         ;503  ; SDIO_DataInitStructure
000054  4608              MOV      r0,r1                 ;504
000056  f7fffffe          BL       SDIO_DataConfig
00005a  4875              LDR      r0,|L21.560|
00005c  6940              LDR      r0,[r0,#0x14]         ;507
00005e  f0007000          AND      r0,r0,#0x2000000      ;507
000062  b108              CBZ      r0,|L21.104|
000064  200e              MOVS     r0,#0xe               ;507
000066  e7db              B        |L21.32|
                  |L21.104|
000068  2c00              CMP      r4,#0                 ;509
00006a  dd21              BLE      |L21.176|
00006c  f5b46f00          CMP      r4,#0x800             ;509
000070  dc1e              BGT      |L21.176|
000072  1e60              SUBS     r0,r4,#1              ;509
000074  4020              ANDS     r0,r0,r4              ;509
000076  b9d8              CBNZ     r0,|L21.176|
000078  4620              MOV      r0,r4                 ;511
00007a  f7fffffe          BL       convert_from_bytes_to_power_of_two
00007e  9000              STR      r0,[sp,#0]            ;511
000080  486e              LDR      r0,|L21.572|
000082  6004              STR      r4,[r0,#0]            ;513  ; SDIO_CmdInitStructure
000084  2010              MOVS     r0,#0x10              ;514
000086  496d              LDR      r1,|L21.572|
000088  6048              STR      r0,[r1,#4]            ;514  ; SDIO_CmdInitStructure
00008a  2040              MOVS     r0,#0x40              ;515
00008c  6088              STR      r0,[r1,#8]            ;515  ; SDIO_CmdInitStructure
00008e  2000              MOVS     r0,#0                 ;516
000090  60c8              STR      r0,[r1,#0xc]          ;516  ; SDIO_CmdInitStructure
000092  f44f6080          MOV      r0,#0x400             ;517
000096  6108              STR      r0,[r1,#0x10]         ;517  ; SDIO_CmdInitStructure
000098  4608              MOV      r0,r1                 ;518
00009a  f7fffffe          BL       SDIO_SendCommand
00009e  2010              MOVS     r0,#0x10              ;520
0000a0  f7fffffe          BL       CmdResp1Error
0000a4  4682              MOV      r10,r0                ;520
0000a6  f1ba0f00          CMP      r10,#0                ;522
0000aa  d003              BEQ      |L21.180|
0000ac  4650              MOV      r0,r10                ;522
0000ae  e7b7              B        |L21.32|
                  |L21.176|
0000b0  2026              MOVS     r0,#0x26              ;523
0000b2  e7b5              B        |L21.32|
                  |L21.180|
0000b4  9800              LDR      r0,[sp,#0]            ;524
0000b6  0100              LSLS     r0,r0,#4              ;524
0000b8  495f              LDR      r1,|L21.568|
0000ba  6088              STR      r0,[r1,#8]            ;524  ; SDIO_DataInitStructure
0000bc  4608              MOV      r0,r1                 ;525
0000be  6044              STR      r4,[r0,#4]            ;525  ; SDIO_DataInitStructure
0000c0  f04f30ff          MOV      r0,#0xffffffff        ;526
0000c4  6008              STR      r0,[r1,#0]            ;526  ; SDIO_DataInitStructure
0000c6  2001              MOVS     r0,#1                 ;527
0000c8  6148              STR      r0,[r1,#0x14]         ;527  ; SDIO_DataInitStructure
0000ca  2002              MOVS     r0,#2                 ;528
0000cc  60c8              STR      r0,[r1,#0xc]          ;528  ; SDIO_DataInitStructure
0000ce  2000              MOVS     r0,#0                 ;529
0000d0  6108              STR      r0,[r1,#0x10]         ;529  ; SDIO_DataInitStructure
0000d2  4608              MOV      r0,r1                 ;530
0000d4  f7fffffe          BL       SDIO_DataConfig
0000d8  4858              LDR      r0,|L21.572|
0000da  6007              STR      r7,[r0,#0]            ;532  ; SDIO_CmdInitStructure
0000dc  2011              MOVS     r0,#0x11              ;533
0000de  4957              LDR      r1,|L21.572|
0000e0  6048              STR      r0,[r1,#4]            ;533  ; SDIO_CmdInitStructure
0000e2  2040              MOVS     r0,#0x40              ;534
0000e4  6088              STR      r0,[r1,#8]            ;534  ; SDIO_CmdInitStructure
0000e6  2000              MOVS     r0,#0                 ;535
0000e8  60c8              STR      r0,[r1,#0xc]          ;535  ; SDIO_CmdInitStructure
0000ea  f44f6080          MOV      r0,#0x400             ;536
0000ee  6108              STR      r0,[r1,#0x10]         ;536  ; SDIO_CmdInitStructure
0000f0  4608              MOV      r0,r1                 ;537
0000f2  f7fffffe          BL       SDIO_SendCommand
0000f6  2011              MOVS     r0,#0x11              ;539
0000f8  f7fffffe          BL       CmdResp1Error
0000fc  4682              MOV      r10,r0                ;539
0000fe  f1ba0f00          CMP      r10,#0                ;540
000102  d001              BEQ      |L21.264|
000104  4650              MOV      r0,r10                ;540
000106  e78b              B        |L21.32|
                  |L21.264|
000108  484d              LDR      r0,|L21.576|
00010a  7800              LDRB     r0,[r0,#0]            ;541  ; DeviceMode
00010c  2800              CMP      r0,#0                 ;541
00010e  d15a              BNE      |L21.454|
000110  f7fffffe          BL       INTX_DISABLE
000114  e018              B        |L21.328|
                  |L21.278|
000116  f44f4000          MOV      r0,#0x8000            ;546
00011a  f7fffffe          BL       SDIO_GetFlagStatus
00011e  b178              CBZ      r0,|L21.320|
000120  f04f0b00          MOV      r11,#0                ;548
000124  e006              B        |L21.308|
                  |L21.294|
000126  4842              LDR      r0,|L21.560|
000128  3080              ADDS     r0,r0,#0x80           ;550
00012a  6800              LDR      r0,[r0,#0]            ;550
00012c  f845002b          STR      r0,[r5,r11,LSL #2]    ;550
000130  f10b0b01          ADD      r11,r11,#1            ;548
                  |L21.308|
000134  f1bb0f08          CMP      r11,#8                ;548
000138  d3f5              BCC      |L21.294|
00013a  3520              ADDS     r5,r5,#0x20           ;552
00013c  4e41              LDR      r6,|L21.580|
00013e  e003              B        |L21.328|
                  |L21.320|
000140  b90e              CBNZ     r6,|L21.326|
000142  2004              MOVS     r0,#4                 ;556
000144  e76c              B        |L21.32|
                  |L21.326|
000146  1e76              SUBS     r6,r6,#1              ;557
                  |L21.328|
000148  4839              LDR      r0,|L21.560|
00014a  6b40              LDR      r0,[r0,#0x34]         ;544
00014c  f240612a          MOV      r1,#0x62a             ;544
000150  4008              ANDS     r0,r0,r1              ;544
000152  2800              CMP      r0,#0                 ;544
000154  d0df              BEQ      |L21.278|
000156  2008              MOVS     r0,#8                 ;560
000158  f7fffffe          BL       SDIO_GetFlagStatus
00015c  b120              CBZ      r0,|L21.360|
00015e  2008              MOVS     r0,#8                 ;562
000160  f7fffffe          BL       SDIO_ClearFlag
000164  2004              MOVS     r0,#4                 ;563
000166  e75b              B        |L21.32|
                  |L21.360|
000168  2002              MOVS     r0,#2                 ;564
00016a  f7fffffe          BL       SDIO_GetFlagStatus
00016e  b120              CBZ      r0,|L21.378|
000170  2002              MOVS     r0,#2                 ;566
000172  f7fffffe          BL       SDIO_ClearFlag
000176  2002              MOVS     r0,#2                 ;567
000178  e752              B        |L21.32|
                  |L21.378|
00017a  2020              MOVS     r0,#0x20              ;568
00017c  f7fffffe          BL       SDIO_GetFlagStatus
000180  b120              CBZ      r0,|L21.396|
000182  2020              MOVS     r0,#0x20              ;570
000184  f7fffffe          BL       SDIO_ClearFlag
000188  2006              MOVS     r0,#6                 ;571
00018a  e749              B        |L21.32|
                  |L21.396|
00018c  f44f7000          MOV      r0,#0x200             ;572
000190  f7fffffe          BL       SDIO_GetFlagStatus
000194  b128              CBZ      r0,|L21.418|
000196  f44f7000          MOV      r0,#0x200             ;574
00019a  f7fffffe          BL       SDIO_ClearFlag
00019e  2007              MOVS     r0,#7                 ;575
0001a0  e73e              B        |L21.32|
                  |L21.418|
0001a2  e003              B        |L21.428|
                  |L21.420|
0001a4  f7fffffe          BL       SDIO_ReadData
0001a8  6028              STR      r0,[r5,#0]            ;579
0001aa  1d2d              ADDS     r5,r5,#4              ;580
                  |L21.428|
0001ac  f44f1000          MOV      r0,#0x200000          ;577
0001b0  f7fffffe          BL       SDIO_GetFlagStatus
0001b4  2800              CMP      r0,#0                 ;577
0001b6  d1f5              BNE      |L21.420|
0001b8  f7fffffe          BL       INTX_ENABLE
0001bc  f24050ff          MOV      r0,#0x5ff             ;583
0001c0  f7fffffe          BL       SDIO_ClearFlag
0001c4  e031              B        |L21.554|
                  |L21.454|
0001c6  481e              LDR      r0,|L21.576|
0001c8  7800              LDRB     r0,[r0,#0]            ;584  ; DeviceMode
0001ca  2801              CMP      r0,#1                 ;584
0001cc  d12d              BNE      |L21.554|
0001ce  2200              MOVS     r2,#0                 ;586
0001d0  4621              MOV      r1,r4                 ;586
0001d2  4648              MOV      r0,r9                 ;586
0001d4  f7fffffe          BL       SD_DMA_Config
0001d8  2000              MOVS     r0,#0                 ;587
0001da  491b              LDR      r1,|L21.584|
0001dc  7008              STRB     r0,[r1,#0]            ;587
0001de  491b              LDR      r1,|L21.588|
0001e0  7008              STRB     r0,[r1,#0]            ;588
0001e2  491b              LDR      r1,|L21.592|
0001e4  7008              STRB     r0,[r1,#0]            ;589
0001e6  4812              LDR      r0,|L21.560|
0001e8  6bc0              LDR      r0,[r0,#0x3c]         ;590
0001ea  f240312a          MOV      r1,#0x32a             ;590
0001ee  4308              ORRS     r0,r0,r1              ;590
0001f0  490f              LDR      r1,|L21.560|
0001f2  63c8              STR      r0,[r1,#0x3c]         ;590
0001f4  2001              MOVS     r0,#1                 ;591
0001f6  f7fffffe          BL       SDIO_DMACmd
0001fa  e000              B        |L21.510|
                  |L21.508|
0001fc  1e76              SUBS     r6,r6,#1              ;592
                  |L21.510|
0001fe  4815              LDR      r0,|L21.596|
000200  6800              LDR      r0,[r0,#0]            ;592
000202  f4005000          AND      r0,r0,#0x2000         ;592
000206  b938              CBNZ     r0,|L21.536|
000208  4811              LDR      r0,|L21.592|
00020a  7800              LDRB     r0,[r0,#0]            ;592  ; TransferEnd
00020c  b920              CBNZ     r0,|L21.536|
00020e  480e              LDR      r0,|L21.584|
000210  7800              LDRB     r0,[r0,#0]            ;592  ; TransferError
000212  b908              CBNZ     r0,|L21.536|
000214  2e00              CMP      r6,#0                 ;592
000216  d1f1              BNE      |L21.508|
                  |L21.536|
000218  b90e              CBNZ     r6,|L21.542|
00021a  2004              MOVS     r0,#4                 ;593
00021c  e700              B        |L21.32|
                  |L21.542|
00021e  480a              LDR      r0,|L21.584|
000220  7800              LDRB     r0,[r0,#0]            ;594  ; TransferError
000222  b110              CBZ      r0,|L21.554|
000224  4808              LDR      r0,|L21.584|
000226  f890a000          LDRB     r10,[r0,#0]           ;594  ; TransferError
                  |L21.554|
00022a  4650              MOV      r0,r10                ;596
00022c  e6f8              B        |L21.32|
;;;598    //SD卡读取多个块 
                          ENDP

00022e  0000              DCW      0x0000
                  |L21.560|
                          DCD      0x40018000
                  |L21.564|
                          DCD      CardType
                  |L21.568|
                          DCD      SDIO_DataInitStructure
                  |L21.572|
                          DCD      SDIO_CmdInitStructure
                  |L21.576|
                          DCD      DeviceMode
                  |L21.580|
                          DCD      0x007fffff
                  |L21.584|
                          DCD      TransferError
                  |L21.588|
                          DCD      StopCondition
                  |L21.592|
                          DCD      TransferEnd
                  |L21.596|
                          DCD      0x40020400

                          AREA ||i.SD_ReadDisk||, CODE, READONLY, ALIGN=2

                  SD_ReadDisk PROC
;;;1564   //返回值:错误状态;0,正常;其他,错误代码;				  				 
;;;1565   u8 SD_ReadDisk(u8*buf,u32 sector,u8 cnt)
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;1566   {
000004  4683              MOV      r11,r0
000006  460e              MOV      r6,r1
000008  4691              MOV      r9,r2
;;;1567   	u8 sta=SD_OK;
00000a  2000              MOVS     r0,#0
00000c  9002              STR      r0,[sp,#8]
;;;1568   	long long lsector=sector;
00000e  2500              MOVS     r5,#0
000010  4634              MOV      r4,r6
;;;1569   	u8 n;
;;;1570   	if(CardType!=SDIO_STD_CAPACITY_SD_CARD_V1_1)lsector<<=9;
000012  4821              LDR      r0,|L22.152|
000014  7800              LDRB     r0,[r0,#0]  ; CardType
000016  b118              CBZ      r0,|L22.32|
000018  0268              LSLS     r0,r5,#9
00001a  ea4055d4          ORR      r5,r0,r4,LSR #23
00001e  0264              LSLS     r4,r4,#9
                  |L22.32|
;;;1571   	if((u32)buf%4!=0)
000020  f00b0003          AND      r0,r11,#3
000024  b1f0              CBZ      r0,|L22.100|
;;;1572   	{
;;;1573   	 	for(n=0;n<cnt;n++)
000026  f04f0a00          MOV      r10,#0
00002a  e018              B        |L22.94|
                  |L22.44|
;;;1574   		{
;;;1575   		 	sta=SD_ReadBlock(SDIO_DATA_BUFFER,lsector+512*n,512);//单个sector的读操作
00002c  f44f7000          MOV      r0,#0x200
000030  9000              STR      r0,[sp,#0]
000032  ea4f204a          LSL      r0,r10,#9
000036  1907              ADDS     r7,r0,r4
000038  eb4573e0          ADC      r3,r5,r0,ASR #31
00003c  463a              MOV      r2,r7
00003e  4817              LDR      r0,|L22.156|
000040  f7fffffe          BL       SD_ReadBlock
000044  9002              STR      r0,[sp,#8]
;;;1576   			memcpy(buf,SDIO_DATA_BUFFER,512);
000046  f44f7200          MOV      r2,#0x200
00004a  4914              LDR      r1,|L22.156|
00004c  4658              MOV      r0,r11
00004e  f7fffffe          BL       __aeabi_memcpy
;;;1577   			buf+=512;
000052  f50b7b00          ADD      r11,r11,#0x200
000056  f10a0001          ADD      r0,r10,#1             ;1573
00005a  f0000aff          AND      r10,r0,#0xff          ;1573
                  |L22.94|
00005e  45ca              CMP      r10,r9                ;1573
000060  dbe4              BLT      |L22.44|
000062  e016              B        |L22.146|
                  |L22.100|
;;;1578   		} 
;;;1579   	}else
;;;1580   	{
;;;1581   		if(cnt==1)sta=SD_ReadBlock(buf,lsector,512);    	//单个sector的读操作
000064  f1b90f01          CMP      r9,#1
000068  d109              BNE      |L22.126|
00006a  f44f7000          MOV      r0,#0x200
00006e  4622              MOV      r2,r4
000070  462b              MOV      r3,r5
000072  9000              STR      r0,[sp,#0]
000074  4658              MOV      r0,r11
000076  f7fffffe          BL       SD_ReadBlock
00007a  9002              STR      r0,[sp,#8]
00007c  e009              B        |L22.146|
                  |L22.126|
;;;1582   		else sta=SD_ReadMultiBlocks(buf,lsector,512,cnt);//多个sector  
00007e  f44f7000          MOV      r0,#0x200
000082  4622              MOV      r2,r4
000084  462b              MOV      r3,r5
000086  e9cd0900          STRD     r0,r9,[sp,#0]
00008a  4658              MOV      r0,r11
00008c  f7fffffe          BL       SD_ReadMultiBlocks
000090  9002              STR      r0,[sp,#8]
                  |L22.146|
;;;1583   	}
;;;1584   	return sta;
000092  9802              LDR      r0,[sp,#8]
;;;1585   }
000094  e8bd8ffe          POP      {r1-r11,pc}
;;;1586   //写SD卡
                          ENDP

                  |L22.152|
                          DCD      CardType
                  |L22.156|
                          DCD      SDIO_DATA_BUFFER

                          AREA ||i.SD_ReadMultiBlocks||, CODE, READONLY, ALIGN=2

                  SD_ReadMultiBlocks PROC
;;;604    __align(4) u32 *tempbuff;
;;;605    SD_Error SD_ReadMultiBlocks(u8 *buf,long long addr,u16 blksize,u32 nblks)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;606    {
000004  4617              MOV      r7,r2
000006  4698              MOV      r8,r3
000008  e9dd460e          LDRD     r4,r6,[sp,#0x38]
;;;607      	SD_Error errorstatus=SD_OK;
00000c  f04f0900          MOV      r9,#0
;;;608    	u8 power;
;;;609       	u32 count=0;
000010  46ca              MOV      r10,r9
;;;610    	u32 timeout=SDIO_DATATIMEOUT;  
000012  f04f35ff          MOV      r5,#0xffffffff
;;;611    	tempbuff=(u32*)buf;//转换为u32指针
000016  49a9              LDR      r1,|L23.700|
000018  9800              LDR      r0,[sp,#0]
00001a  6008              STR      r0,[r1,#0]  ; tempbuff
;;;612    	
;;;613        SDIO->DCTRL=0x0;		//数据控制寄存器清零(关DMA)   
00001c  2000              MOVS     r0,#0
00001e  49a8              LDR      r1,|L23.704|
000020  62c8              STR      r0,[r1,#0x2c]
;;;614    	if(CardType==SDIO_HIGH_CAPACITY_SD_CARD)//大容量卡
000022  48a8              LDR      r0,|L23.708|
000024  7800              LDRB     r0,[r0,#0]  ; CardType
000026  2802              CMP      r0,#2
000028  d105              BNE      |L23.54|
;;;615    	{
;;;616    		blksize=512;
00002a  0204              LSLS     r4,r0,#8
;;;617    		addr>>=9;
00002c  0a78              LSRS     r0,r7,#9
00002e  ea4057c8          ORR      r7,r0,r8,LSL #23
000032  ea4f2868          ASR      r8,r8,#9
                  |L23.54|
;;;618    	}  
;;;619     
;;;620    		SDIO_DataInitStructure.SDIO_DataBlockSize= 0; ;//清除DPSM状态机配置
000036  2000              MOVS     r0,#0
000038  49a3              LDR      r1,|L23.712|
00003a  6088              STR      r0,[r1,#8]  ; SDIO_DataInitStructure
;;;621    	  SDIO_DataInitStructure.SDIO_DataLength= 0 ;
00003c  6048              STR      r0,[r1,#4]  ; SDIO_DataInitStructure
;;;622    	  SDIO_DataInitStructure.SDIO_DataTimeOut=SD_DATATIMEOUT ;
00003e  1e40              SUBS     r0,r0,#1
000040  6008              STR      r0,[r1,#0]  ; SDIO_DataInitStructure
;;;623    	  SDIO_DataInitStructure.SDIO_DPSM=SDIO_DPSM_Enable;
000042  2001              MOVS     r0,#1
000044  6148              STR      r0,[r1,#0x14]  ; SDIO_DataInitStructure
;;;624    	  SDIO_DataInitStructure.SDIO_TransferDir=SDIO_TransferDir_ToCard;
000046  2000              MOVS     r0,#0
000048  60c8              STR      r0,[r1,#0xc]  ; SDIO_DataInitStructure
;;;625    	  SDIO_DataInitStructure.SDIO_TransferMode=SDIO_TransferMode_Block;
00004a  6108              STR      r0,[r1,#0x10]  ; SDIO_DataInitStructure
;;;626        SDIO_DataConfig(&SDIO_DataInitStructure);
00004c  4608              MOV      r0,r1
00004e  f7fffffe          BL       SDIO_DataConfig
;;;627    	
;;;628    	if(SDIO->RESP1&SD_CARD_LOCKED)return SD_LOCK_UNLOCK_FAILED;//卡锁了
000052  489b              LDR      r0,|L23.704|
000054  6940              LDR      r0,[r0,#0x14]
000056  f0007000          AND      r0,r0,#0x2000000
00005a  b118              CBZ      r0,|L23.100|
00005c  200e              MOVS     r0,#0xe
                  |L23.94|
;;;629    	if((blksize>0)&&(blksize<=2048)&&((blksize&(blksize-1))==0))
;;;630    	{
;;;631    		power=convert_from_bytes_to_power_of_two(blksize);	
;;;632        
;;;633     
;;;634    	  SDIO_CmdInitStructure.SDIO_Argument =  blksize;//发送CMD16+设置数据长度为blksize,短响应 
;;;635    		SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
;;;636    		SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;637    		SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;638    		SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;639    		SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;640    
;;;641    		errorstatus=CmdResp1Error(SD_CMD_SET_BLOCKLEN);	//等待R1响应   
;;;642    		if(errorstatus!=SD_OK)return errorstatus;   	//响应错误	 
;;;643    	}else return SD_INVALID_PARAMETER;	  
;;;644    	if(nblks>1)											//多块读  
;;;645    	{									    
;;;646     	  	if(nblks*blksize>SD_MAX_DATA_LENGTH)return SD_INVALID_PARAMETER;//判断是否超过最大接收长度
;;;647    		   SDIO_DataInitStructure.SDIO_DataBlockSize= power<<4; ;//nblks*blksize,512块大小,卡到控制器
;;;648    			 SDIO_DataInitStructure.SDIO_DataLength= nblks*blksize ;
;;;649    			 SDIO_DataInitStructure.SDIO_DataTimeOut=SD_DATATIMEOUT ;
;;;650    			 SDIO_DataInitStructure.SDIO_DPSM=SDIO_DPSM_Enable;
;;;651    			 SDIO_DataInitStructure.SDIO_TransferDir=SDIO_TransferDir_ToSDIO;
;;;652    			 SDIO_DataInitStructure.SDIO_TransferMode=SDIO_TransferMode_Block;
;;;653    			 SDIO_DataConfig(&SDIO_DataInitStructure);
;;;654    
;;;655           SDIO_CmdInitStructure.SDIO_Argument =  addr;//发送CMD18+从addr地址出读取数据,短响应 
;;;656    	     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_READ_MULT_BLOCK;
;;;657    		   SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;658    		   SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;659    		   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;660    		   SDIO_SendCommand(&SDIO_CmdInitStructure);	
;;;661    		
;;;662    		errorstatus=CmdResp1Error(SD_CMD_READ_MULT_BLOCK);//等待R1响应   
;;;663    		if(errorstatus!=SD_OK)return errorstatus;   	//响应错误	  
;;;664     		if(DeviceMode==SD_POLLING_MODE)
;;;665    		{
;;;666    			INTX_DISABLE();//关闭总中断(POLLING模式,严禁中断打断SDIO读写操作!!!)
;;;667    			while(!(SDIO->STA&((1<<5)|(1<<1)|(1<<3)|(1<<8)|(1<<9))))//无上溢/CRC/超时/完成(标志)/起始位错误
;;;668    			{
;;;669    			if(SDIO_GetFlagStatus(SDIO_FLAG_RXFIFOHF) != RESET)					//接收区半满,表示至少存了8个字
;;;670    				{
;;;671    					for(count=0;count<8;count++)			//循环读取数据
;;;672    					{
;;;673    						*(tempbuff+count)=SDIO->FIFO;
;;;674    					}
;;;675    					tempbuff+=8;	 
;;;676    					timeout=0X7FFFFF; 	//读数据溢出时间
;;;677    				}else 	//处理超时
;;;678    				{
;;;679    					if(timeout==0)return SD_DATA_TIMEOUT;
;;;680    					timeout--;
;;;681    				}
;;;682    			}  
;;;683    		if(SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)		//数据超时错误
;;;684    		{										   
;;;685    	 		SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT); 	//清错误标志
;;;686    			return SD_DATA_TIMEOUT;
;;;687    	 	}else if(SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)	//数据块CRC错误
;;;688    		{
;;;689    	 		SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);  		//清错误标志
;;;690    			return SD_DATA_CRC_FAIL;		   
;;;691    		}else if(SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET) 	//接收fifo上溢错误
;;;692    		{
;;;693    	 		SDIO_ClearFlag(SDIO_FLAG_RXOVERR);		//清错误标志
;;;694    			return SD_RX_OVERRUN;		 
;;;695    		}else if(SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET) 	//接收起始位错误
;;;696    		{
;;;697    	 		SDIO_ClearFlag(SDIO_FLAG_STBITERR);//清错误标志
;;;698    			return SD_START_BIT_ERR;		 
;;;699    		}   
;;;700    	    
;;;701    		while(SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)	//FIFO里面,还存在可用数据
;;;702    		{
;;;703    			*tempbuff=SDIO_ReadData();	//循环读取数据
;;;704    			tempbuff++;
;;;705    		}
;;;706    	 		if(SDIO_GetFlagStatus(SDIO_FLAG_DATAEND) != RESET)		//接收结束
;;;707    			{
;;;708    				if((SDIO_STD_CAPACITY_SD_CARD_V1_1==CardType)||(SDIO_STD_CAPACITY_SD_CARD_V2_0==CardType)||(SDIO_HIGH_CAPACITY_SD_CARD==CardType))
;;;709    				{
;;;710    			 
;;;711    					SDIO_CmdInitStructure.SDIO_Argument =  0;//发送CMD12+结束传输
;;;712    				  SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_STOP_TRANSMISSION;
;;;713    					SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;714    					SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;715    					SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;716    					SDIO_SendCommand(&SDIO_CmdInitStructure);	
;;;717    					
;;;718    					errorstatus=CmdResp1Error(SD_CMD_STOP_TRANSMISSION);//等待R1响应   
;;;719    					if(errorstatus!=SD_OK)return errorstatus;	 
;;;720    				}
;;;721     			}
;;;722    			INTX_ENABLE();//开启总中断
;;;723    	 		SDIO_ClearFlag(SDIO_STATIC_FLAGS);//清除所有标记
;;;724     		}else if(DeviceMode==SD_DMA_MODE)
;;;725    		{
;;;726    	 	    SD_DMA_Config((u32*)buf,nblks*blksize,DMA_DIR_PeripheralSRC); 
;;;727    	   		TransferError=SD_OK;
;;;728    			StopCondition=1;			//多块读,需要发送停止传输指令 
;;;729    			TransferEnd=0;				//传输结束标置位，在中断服务置1
;;;730    			SDIO->MASK|=(1<<1)|(1<<3)|(1<<8)|(1<<5)|(1<<9);	//配置需要的中断 
;;;731    		 	SDIO->DCTRL|=1<<3;		 						//SDIO DMA使能 
;;;732    	 		while(((DMA2->ISR&0X2000)==RESET)&&timeout)timeout--;//等待传输完成 
;;;733    			if(timeout==0)return SD_DATA_TIMEOUT;//超时
;;;734    			while((TransferEnd==0)&&(TransferError==SD_OK)); 
;;;735    			if(TransferError!=SD_OK)errorstatus=TransferError;  	 
;;;736    		}		 
;;;737      	}
;;;738    	return errorstatus;
;;;739    }			    	  
00005e  b004              ADD      sp,sp,#0x10
000060  e8bd9ff0          POP      {r4-r12,pc}
                  |L23.100|
000064  2c00              CMP      r4,#0                 ;629
000066  dd21              BLE      |L23.172|
000068  f5b46f00          CMP      r4,#0x800             ;629
00006c  dc1e              BGT      |L23.172|
00006e  1e60              SUBS     r0,r4,#1              ;629
000070  4020              ANDS     r0,r0,r4              ;629
000072  b9d8              CBNZ     r0,|L23.172|
000074  4620              MOV      r0,r4                 ;631
000076  f7fffffe          BL       convert_from_bytes_to_power_of_two
00007a  4683              MOV      r11,r0                ;631
00007c  4893              LDR      r0,|L23.716|
00007e  6004              STR      r4,[r0,#0]            ;634  ; SDIO_CmdInitStructure
000080  2010              MOVS     r0,#0x10              ;635
000082  4992              LDR      r1,|L23.716|
000084  6048              STR      r0,[r1,#4]            ;635  ; SDIO_CmdInitStructure
000086  2040              MOVS     r0,#0x40              ;636
000088  6088              STR      r0,[r1,#8]            ;636  ; SDIO_CmdInitStructure
00008a  2000              MOVS     r0,#0                 ;637
00008c  60c8              STR      r0,[r1,#0xc]          ;637  ; SDIO_CmdInitStructure
00008e  f44f6080          MOV      r0,#0x400             ;638
000092  6108              STR      r0,[r1,#0x10]         ;638  ; SDIO_CmdInitStructure
000094  4608              MOV      r0,r1                 ;639
000096  f7fffffe          BL       SDIO_SendCommand
00009a  2010              MOVS     r0,#0x10              ;641
00009c  f7fffffe          BL       CmdResp1Error
0000a0  4681              MOV      r9,r0                 ;641
0000a2  f1b90f00          CMP      r9,#0                 ;642
0000a6  d003              BEQ      |L23.176|
0000a8  4648              MOV      r0,r9                 ;642
0000aa  e7d8              B        |L23.94|
                  |L23.172|
0000ac  2026              MOVS     r0,#0x26              ;643
0000ae  e7d6              B        |L23.94|
                  |L23.176|
0000b0  2e01              CMP      r6,#1                 ;644
0000b2  d970              BLS      |L23.406|
0000b4  fb06f004          MUL      r0,r6,r4              ;646
0000b8  f1b07f00          CMP      r0,#0x2000000         ;646
0000bc  d301              BCC      |L23.194|
0000be  2026              MOVS     r0,#0x26              ;646
0000c0  e7cd              B        |L23.94|
                  |L23.194|
0000c2  ea4f100b          LSL      r0,r11,#4             ;647
0000c6  4980              LDR      r1,|L23.712|
0000c8  6088              STR      r0,[r1,#8]            ;647  ; SDIO_DataInitStructure
0000ca  fb06f004          MUL      r0,r6,r4              ;648
0000ce  6048              STR      r0,[r1,#4]            ;648  ; SDIO_DataInitStructure
0000d0  f04f30ff          MOV      r0,#0xffffffff        ;649
0000d4  6008              STR      r0,[r1,#0]            ;649  ; SDIO_DataInitStructure
0000d6  2001              MOVS     r0,#1                 ;650
0000d8  6148              STR      r0,[r1,#0x14]         ;650  ; SDIO_DataInitStructure
0000da  2002              MOVS     r0,#2                 ;651
0000dc  60c8              STR      r0,[r1,#0xc]          ;651  ; SDIO_DataInitStructure
0000de  2000              MOVS     r0,#0                 ;652
0000e0  6108              STR      r0,[r1,#0x10]         ;652  ; SDIO_DataInitStructure
0000e2  4608              MOV      r0,r1                 ;653
0000e4  f7fffffe          BL       SDIO_DataConfig
0000e8  4878              LDR      r0,|L23.716|
0000ea  6007              STR      r7,[r0,#0]            ;655  ; SDIO_CmdInitStructure
0000ec  2012              MOVS     r0,#0x12              ;656
0000ee  4977              LDR      r1,|L23.716|
0000f0  6048              STR      r0,[r1,#4]            ;656  ; SDIO_CmdInitStructure
0000f2  2040              MOVS     r0,#0x40              ;657
0000f4  6088              STR      r0,[r1,#8]            ;657  ; SDIO_CmdInitStructure
0000f6  2000              MOVS     r0,#0                 ;658
0000f8  60c8              STR      r0,[r1,#0xc]          ;658  ; SDIO_CmdInitStructure
0000fa  f44f6080          MOV      r0,#0x400             ;659
0000fe  6108              STR      r0,[r1,#0x10]         ;659  ; SDIO_CmdInitStructure
000100  4608              MOV      r0,r1                 ;660
000102  f7fffffe          BL       SDIO_SendCommand
000106  2012              MOVS     r0,#0x12              ;662
000108  f7fffffe          BL       CmdResp1Error
00010c  4681              MOV      r9,r0                 ;662
00010e  f1b90f00          CMP      r9,#0                 ;663
000112  d001              BEQ      |L23.280|
000114  4648              MOV      r0,r9                 ;663
000116  e7a2              B        |L23.94|
                  |L23.280|
000118  486d              LDR      r0,|L23.720|
00011a  7800              LDRB     r0,[r0,#0]            ;664  ; DeviceMode
00011c  2800              CMP      r0,#0                 ;664
00011e  d17d              BNE      |L23.540|
000120  f7fffffe          BL       INTX_DISABLE
000124  e01e              B        |L23.356|
                  |L23.294|
000126  f44f4000          MOV      r0,#0x8000            ;669
00012a  f7fffffe          BL       SDIO_GetFlagStatus
00012e  b1a8              CBZ      r0,|L23.348|
000130  f04f0a00          MOV      r10,#0                ;671
000134  e008              B        |L23.328|
                  |L23.310|
000136  4862              LDR      r0,|L23.704|
000138  3080              ADDS     r0,r0,#0x80           ;673
00013a  6800              LDR      r0,[r0,#0]            ;673
00013c  495f              LDR      r1,|L23.700|
00013e  6809              LDR      r1,[r1,#0]            ;673  ; tempbuff
000140  f841002a          STR      r0,[r1,r10,LSL #2]    ;673
000144  f10a0a01          ADD      r10,r10,#1            ;671
                  |L23.328|
000148  f1ba0f08          CMP      r10,#8                ;671
00014c  d3f3              BCC      |L23.310|
00014e  485b              LDR      r0,|L23.700|
000150  6800              LDR      r0,[r0,#0]            ;675  ; tempbuff
000152  3020              ADDS     r0,r0,#0x20           ;675
000154  4959              LDR      r1,|L23.700|
000156  6008              STR      r0,[r1,#0]            ;675  ; tempbuff
000158  4d5e              LDR      r5,|L23.724|
00015a  e003              B        |L23.356|
                  |L23.348|
00015c  b90d              CBNZ     r5,|L23.354|
00015e  2004              MOVS     r0,#4                 ;679
000160  e77d              B        |L23.94|
                  |L23.354|
000162  1e6d              SUBS     r5,r5,#1              ;680
                  |L23.356|
000164  4856              LDR      r0,|L23.704|
000166  6b40              LDR      r0,[r0,#0x34]         ;667
000168  f240312a          MOV      r1,#0x32a             ;667
00016c  4008              ANDS     r0,r0,r1              ;667
00016e  2800              CMP      r0,#0                 ;667
000170  d0d9              BEQ      |L23.294|
000172  2008              MOVS     r0,#8                 ;683
000174  f7fffffe          BL       SDIO_GetFlagStatus
000178  b120              CBZ      r0,|L23.388|
00017a  2008              MOVS     r0,#8                 ;685
00017c  f7fffffe          BL       SDIO_ClearFlag
000180  2004              MOVS     r0,#4                 ;686
000182  e76c              B        |L23.94|
                  |L23.388|
000184  2002              MOVS     r0,#2                 ;687
000186  f7fffffe          BL       SDIO_GetFlagStatus
00018a  b128              CBZ      r0,|L23.408|
00018c  2002              MOVS     r0,#2                 ;689
00018e  f7fffffe          BL       SDIO_ClearFlag
000192  2002              MOVS     r0,#2                 ;690
000194  e763              B        |L23.94|
                  |L23.406|
000196  e08e              B        |L23.694|
                  |L23.408|
000198  2020              MOVS     r0,#0x20              ;691
00019a  f7fffffe          BL       SDIO_GetFlagStatus
00019e  b120              CBZ      r0,|L23.426|
0001a0  2020              MOVS     r0,#0x20              ;693
0001a2  f7fffffe          BL       SDIO_ClearFlag
0001a6  2006              MOVS     r0,#6                 ;694
0001a8  e759              B        |L23.94|
                  |L23.426|
0001aa  f44f7000          MOV      r0,#0x200             ;695
0001ae  f7fffffe          BL       SDIO_GetFlagStatus
0001b2  b128              CBZ      r0,|L23.448|
0001b4  f44f7000          MOV      r0,#0x200             ;697
0001b8  f7fffffe          BL       SDIO_ClearFlag
0001bc  2007              MOVS     r0,#7                 ;698
0001be  e74e              B        |L23.94|
                  |L23.448|
0001c0  e009              B        |L23.470|
                  |L23.450|
0001c2  f7fffffe          BL       SDIO_ReadData
0001c6  493d              LDR      r1,|L23.700|
0001c8  6809              LDR      r1,[r1,#0]            ;703  ; tempbuff
0001ca  6008              STR      r0,[r1,#0]            ;703
0001cc  483b              LDR      r0,|L23.700|
0001ce  6800              LDR      r0,[r0,#0]            ;704  ; tempbuff
0001d0  1d00              ADDS     r0,r0,#4              ;704
0001d2  493a              LDR      r1,|L23.700|
0001d4  6008              STR      r0,[r1,#0]            ;704  ; tempbuff
                  |L23.470|
0001d6  f44f1000          MOV      r0,#0x200000          ;701
0001da  f7fffffe          BL       SDIO_GetFlagStatus
0001de  2800              CMP      r0,#0                 ;701
0001e0  d1ef              BNE      |L23.450|
0001e2  f44f7080          MOV      r0,#0x100             ;706
0001e6  f7fffffe          BL       SDIO_GetFlagStatus
0001ea  b320              CBZ      r0,|L23.566|
0001ec  4835              LDR      r0,|L23.708|
0001ee  7800              LDRB     r0,[r0,#0]            ;708  ; CardType
0001f0  b138              CBZ      r0,|L23.514|
0001f2  4834              LDR      r0,|L23.708|
0001f4  7800              LDRB     r0,[r0,#0]            ;708  ; CardType
0001f6  2801              CMP      r0,#1                 ;708
0001f8  d003              BEQ      |L23.514|
0001fa  4832              LDR      r0,|L23.708|
0001fc  7800              LDRB     r0,[r0,#0]            ;708  ; CardType
0001fe  2802              CMP      r0,#2                 ;708
000200  d119              BNE      |L23.566|
                  |L23.514|
000202  2000              MOVS     r0,#0                 ;711
000204  4931              LDR      r1,|L23.716|
000206  6008              STR      r0,[r1,#0]            ;711  ; SDIO_CmdInitStructure
000208  200c              MOVS     r0,#0xc               ;712
00020a  6048              STR      r0,[r1,#4]            ;712  ; SDIO_CmdInitStructure
00020c  2040              MOVS     r0,#0x40              ;713
00020e  6088              STR      r0,[r1,#8]            ;713  ; SDIO_CmdInitStructure
000210  2000              MOVS     r0,#0                 ;714
000212  60c8              STR      r0,[r1,#0xc]          ;714  ; SDIO_CmdInitStructure
000214  f44f6080          MOV      r0,#0x400             ;715
000218  6108              STR      r0,[r1,#0x10]         ;715  ; SDIO_CmdInitStructure
00021a  e000              B        |L23.542|
                  |L23.540|
00021c  e012              B        |L23.580|
                  |L23.542|
00021e  4608              MOV      r0,r1                 ;716
000220  f7fffffe          BL       SDIO_SendCommand
000224  200c              MOVS     r0,#0xc               ;718
000226  f7fffffe          BL       CmdResp1Error
00022a  4681              MOV      r9,r0                 ;718
00022c  f1b90f00          CMP      r9,#0                 ;719
000230  d001              BEQ      |L23.566|
000232  4648              MOV      r0,r9                 ;719
000234  e713              B        |L23.94|
                  |L23.566|
000236  f7fffffe          BL       INTX_ENABLE
00023a  f24050ff          MOV      r0,#0x5ff             ;723
00023e  f7fffffe          BL       SDIO_ClearFlag
000242  e038              B        |L23.694|
                  |L23.580|
000244  4822              LDR      r0,|L23.720|
000246  7800              LDRB     r0,[r0,#0]            ;724  ; DeviceMode
000248  2801              CMP      r0,#1                 ;724
00024a  d134              BNE      |L23.694|
00024c  fb06f104          MUL      r1,r6,r4              ;726
000250  2200              MOVS     r2,#0                 ;726
000252  9800              LDR      r0,[sp,#0]            ;726
000254  f7fffffe          BL       SD_DMA_Config
000258  2000              MOVS     r0,#0                 ;727
00025a  491f              LDR      r1,|L23.728|
00025c  7008              STRB     r0,[r1,#0]            ;727
00025e  2001              MOVS     r0,#1                 ;728
000260  491e              LDR      r1,|L23.732|
000262  7008              STRB     r0,[r1,#0]            ;728
000264  2000              MOVS     r0,#0                 ;729
000266  491e              LDR      r1,|L23.736|
000268  7008              STRB     r0,[r1,#0]            ;729
00026a  4815              LDR      r0,|L23.704|
00026c  6bc0              LDR      r0,[r0,#0x3c]         ;730
00026e  f240312a          MOV      r1,#0x32a             ;730
000272  4308              ORRS     r0,r0,r1              ;730
000274  4912              LDR      r1,|L23.704|
000276  63c8              STR      r0,[r1,#0x3c]         ;730
000278  4608              MOV      r0,r1                 ;731
00027a  6ac0              LDR      r0,[r0,#0x2c]         ;731
00027c  f0400008          ORR      r0,r0,#8              ;731
000280  62c8              STR      r0,[r1,#0x2c]         ;731
000282  e000              B        |L23.646|
                  |L23.644|
000284  1e6d              SUBS     r5,r5,#1              ;732
                  |L23.646|
000286  4817              LDR      r0,|L23.740|
000288  6800              LDR      r0,[r0,#0]            ;732
00028a  f4005000          AND      r0,r0,#0x2000         ;732
00028e  b908              CBNZ     r0,|L23.660|
000290  2d00              CMP      r5,#0                 ;732
000292  d1f7              BNE      |L23.644|
                  |L23.660|
000294  b90d              CBNZ     r5,|L23.666|
000296  2004              MOVS     r0,#4                 ;733
000298  e6e1              B        |L23.94|
                  |L23.666|
00029a  bf00              NOP                            ;734
                  |L23.668|
00029c  4810              LDR      r0,|L23.736|
00029e  7800              LDRB     r0,[r0,#0]            ;734  ; TransferEnd
0002a0  b918              CBNZ     r0,|L23.682|
0002a2  480d              LDR      r0,|L23.728|
0002a4  7800              LDRB     r0,[r0,#0]            ;734  ; TransferError
0002a6  2800              CMP      r0,#0                 ;734
0002a8  d0f8              BEQ      |L23.668|
                  |L23.682|
0002aa  480b              LDR      r0,|L23.728|
0002ac  7800              LDRB     r0,[r0,#0]            ;735  ; TransferError
0002ae  b110              CBZ      r0,|L23.694|
0002b0  4809              LDR      r0,|L23.728|
0002b2  f8909000          LDRB     r9,[r0,#0]            ;735  ; TransferError
                  |L23.694|
0002b6  4648              MOV      r0,r9                 ;738
0002b8  e6d1              B        |L23.94|
;;;740    //SD卡写1个块 
                          ENDP

0002ba  0000              DCW      0x0000
                  |L23.700|
                          DCD      tempbuff
                  |L23.704|
                          DCD      0x40018000
                  |L23.708|
                          DCD      CardType
                  |L23.712|
                          DCD      SDIO_DataInitStructure
                  |L23.716|
                          DCD      SDIO_CmdInitStructure
                  |L23.720|
                          DCD      DeviceMode
                  |L23.724|
                          DCD      0x007fffff
                  |L23.728|
                          DCD      TransferError
                  |L23.732|
                          DCD      StopCondition
                  |L23.736|
                          DCD      TransferEnd
                  |L23.740|
                          DCD      0x40020400

                          AREA ||i.SD_SelectDeselect||, CODE, READONLY, ALIGN=2

                  SD_SelectDeselect PROC
;;;465    //addr:卡的RCA地址
;;;466    SD_Error SD_SelectDeselect(u32 addr)
000000  b510              PUSH     {r4,lr}
;;;467    {
000002  4604              MOV      r4,r0
;;;468    
;;;469    	SDIO_CmdInitStructure.SDIO_Argument =  addr;//发送CMD7,选择卡,短响应	
000004  4809              LDR      r0,|L24.44|
000006  6004              STR      r4,[r0,#0]  ; SDIO_CmdInitStructure
;;;470      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEL_DESEL_CARD;
000008  2007              MOVS     r0,#7
00000a  4908              LDR      r1,|L24.44|
00000c  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;471      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
00000e  2040              MOVS     r0,#0x40
000010  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;472      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
000012  2000              MOVS     r0,#0
000014  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;473      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
000016  f44f6080          MOV      r0,#0x400
00001a  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;474      SDIO_SendCommand(&SDIO_CmdInitStructure);//发送CMD7,选择卡,短响应
00001c  4608              MOV      r0,r1
00001e  f7fffffe          BL       SDIO_SendCommand
;;;475    	
;;;476     	return CmdResp1Error(SD_CMD_SEL_DESEL_CARD);	 
000022  2007              MOVS     r0,#7
000024  f7fffffe          BL       CmdResp1Error
;;;477    	
;;;478    }
000028  bd10              POP      {r4,pc}
;;;479     
                          ENDP

00002a  0000              DCW      0x0000
                  |L24.44|
                          DCD      SDIO_CmdInitStructure

                          AREA ||i.SD_SendStatus||, CODE, READONLY, ALIGN=2

                  SD_SendStatus PROC
;;;1405   //返回值:错误代码
;;;1406   SD_Error SD_SendStatus(uint32_t *pcardstatus)
000000  b570              PUSH     {r4-r6,lr}
;;;1407   {
000002  4604              MOV      r4,r0
;;;1408   	SD_Error errorstatus = SD_OK;
000004  2500              MOVS     r5,#0
;;;1409   	if(pcardstatus==NULL)
000006  b914              CBNZ     r4,|L25.14|
;;;1410   	{
;;;1411   		errorstatus=SD_INVALID_PARAMETER;
000008  2526              MOVS     r5,#0x26
;;;1412   		return errorstatus;
00000a  4628              MOV      r0,r5
                  |L25.12|
;;;1413   	}
;;;1414   
;;;1415   	SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;//发送CMD13,短响应		 
;;;1416     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_STATUS;
;;;1417     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1418     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1419     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1420     SDIO_SendCommand(&SDIO_CmdInitStructure);	
;;;1421   	
;;;1422   	errorstatus=CmdResp1Error(SD_CMD_SEND_STATUS);	//查询响应状态 
;;;1423   	if(errorstatus!=SD_OK)return errorstatus;
;;;1424   	*pcardstatus=SDIO->RESP1;//读取响应值
;;;1425   	return errorstatus;
;;;1426   } 
00000c  bd70              POP      {r4-r6,pc}
                  |L25.14|
00000e  480e              LDR      r0,|L25.72|
000010  8800              LDRH     r0,[r0,#0]            ;1415  ; RCA
000012  0400              LSLS     r0,r0,#16             ;1415
000014  490d              LDR      r1,|L25.76|
000016  6008              STR      r0,[r1,#0]            ;1415  ; SDIO_CmdInitStructure
000018  200d              MOVS     r0,#0xd               ;1416
00001a  6048              STR      r0,[r1,#4]            ;1416  ; SDIO_CmdInitStructure
00001c  2040              MOVS     r0,#0x40              ;1417
00001e  6088              STR      r0,[r1,#8]            ;1417  ; SDIO_CmdInitStructure
000020  2000              MOVS     r0,#0                 ;1418
000022  60c8              STR      r0,[r1,#0xc]          ;1418  ; SDIO_CmdInitStructure
000024  f44f6080          MOV      r0,#0x400             ;1419
000028  6108              STR      r0,[r1,#0x10]         ;1419  ; SDIO_CmdInitStructure
00002a  4608              MOV      r0,r1                 ;1420
00002c  f7fffffe          BL       SDIO_SendCommand
000030  200d              MOVS     r0,#0xd               ;1422
000032  f7fffffe          BL       CmdResp1Error
000036  4605              MOV      r5,r0                 ;1422
000038  b10d              CBZ      r5,|L25.62|
00003a  4628              MOV      r0,r5                 ;1423
00003c  e7e6              B        |L25.12|
                  |L25.62|
00003e  4804              LDR      r0,|L25.80|
000040  6940              LDR      r0,[r0,#0x14]         ;1424
000042  6020              STR      r0,[r4,#0]            ;1424
000044  4628              MOV      r0,r5                 ;1425
000046  e7e1              B        |L25.12|
;;;1427   //返回SD卡的状态
                          ENDP

                  |L25.72|
                          DCD      ||RCA||
                  |L25.76|
                          DCD      SDIO_CmdInitStructure
                  |L25.80|
                          DCD      0x40018000

                          AREA ||i.SD_SetDeviceMode||, CODE, READONLY, ALIGN=2

                  SD_SetDeviceMode PROC
;;;455    //返回值:错误状态
;;;456    SD_Error SD_SetDeviceMode(u32 Mode)
000000  4601              MOV      r1,r0
;;;457    {
;;;458    	SD_Error errorstatus = SD_OK;
000002  2000              MOVS     r0,#0
;;;459     	if((Mode==SD_DMA_MODE)||(Mode==SD_POLLING_MODE))DeviceMode=Mode;
000004  2901              CMP      r1,#1
000006  d000              BEQ      |L26.10|
000008  b911              CBNZ     r1,|L26.16|
                  |L26.10|
00000a  4b02              LDR      r3,|L26.20|
00000c  7019              STRB     r1,[r3,#0]
00000e  e000              B        |L26.18|
                  |L26.16|
;;;460    	else errorstatus=SD_INVALID_PARAMETER;
000010  2026              MOVS     r0,#0x26
                  |L26.18|
;;;461    	return errorstatus;	    
;;;462    }
000012  4770              BX       lr
;;;463    //选卡
                          ENDP

                  |L26.20|
                          DCD      DeviceMode

                          AREA ||i.SD_WriteBlock||, CODE, READONLY, ALIGN=2

                  SD_WriteBlock PROC
;;;744    //返回值:错误状态
;;;745    SD_Error SD_WriteBlock(u8 *buf,long long addr,  u16 blksize)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;746    {
000004  b086              SUB      sp,sp,#0x18
000006  4617              MOV      r7,r2
000008  4698              MOV      r8,r3
00000a  9d14              LDR      r5,[sp,#0x50]
;;;747    	SD_Error errorstatus = SD_OK;
00000c  2600              MOVS     r6,#0
;;;748    	
;;;749    	u8  power=0,cardstate=0;
00000e  2000              MOVS     r0,#0
000010  9005              STR      r0,[sp,#0x14]
000012  9004              STR      r0,[sp,#0x10]
;;;750    	
;;;751    	u32 timeout=0,bytestransferred=0;
000014  2400              MOVS     r4,#0
000016  4681              MOV      r9,r0
;;;752    	
;;;753    	u32 cardstatus=0,count=0,restwords=0;
000018  9003              STR      r0,[sp,#0xc]
00001a  4682              MOV      r10,r0
00001c  9002              STR      r0,[sp,#8]
;;;754    	
;;;755    	u32	tlen=blksize;						//总长度(字节)
00001e  9501              STR      r5,[sp,#4]
;;;756    	
;;;757    	u32*tempbuff=(u32*)buf;								 
000020  f8ddb018          LDR      r11,[sp,#0x18]
;;;758     	
;;;759    	if(buf==NULL)return SD_INVALID_PARAMETER;//参数错误   
000024  f8ddb018          LDR      r11,[sp,#0x18]
000028  f1bb0f00          CMP      r11,#0
00002c  d103              BNE      |L27.54|
00002e  2026              MOVS     r0,#0x26
                  |L27.48|
;;;760      
;;;761    	SDIO->DCTRL=0x0;							//数据控制寄存器清零(关DMA)   
;;;762      
;;;763    	SDIO_DataInitStructure.SDIO_DataBlockSize= 0; ;//清除DPSM状态机配置
;;;764    	SDIO_DataInitStructure.SDIO_DataLength= 0 ;
;;;765    	SDIO_DataInitStructure.SDIO_DataTimeOut=SD_DATATIMEOUT ;
;;;766    	SDIO_DataInitStructure.SDIO_DPSM=SDIO_DPSM_Enable;
;;;767    	SDIO_DataInitStructure.SDIO_TransferDir=SDIO_TransferDir_ToCard;
;;;768    	SDIO_DataInitStructure.SDIO_TransferMode=SDIO_TransferMode_Block;
;;;769      SDIO_DataConfig(&SDIO_DataInitStructure);
;;;770    	
;;;771    	
;;;772    	if(SDIO->RESP1&SD_CARD_LOCKED)return SD_LOCK_UNLOCK_FAILED;//卡锁了
;;;773     	if(CardType==SDIO_HIGH_CAPACITY_SD_CARD)	//大容量卡
;;;774    	{
;;;775    		blksize=512;
;;;776    		addr>>=9;
;;;777    	}    
;;;778    	if((blksize>0)&&(blksize<=2048)&&((blksize&(blksize-1))==0))
;;;779    	{
;;;780    		power=convert_from_bytes_to_power_of_two(blksize);	
;;;781    
;;;782    		SDIO_CmdInitStructure.SDIO_Argument = blksize;//发送CMD16+设置数据长度为blksize,短响应 	
;;;783    		SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
;;;784    		SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;785    		SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;786    		SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;787    		SDIO_SendCommand(&SDIO_CmdInitStructure);	
;;;788    		
;;;789    		errorstatus=CmdResp1Error(SD_CMD_SET_BLOCKLEN);	//等待R1响应 
;;;790    		
;;;791    		if(errorstatus!=SD_OK)return errorstatus;   	//响应错误	 
;;;792    		
;;;793    	}else return SD_INVALID_PARAMETER;	 
;;;794     
;;;795    		SDIO_CmdInitStructure.SDIO_Argument = (u32)RCA<<16;//发送CMD13,查询卡的状态,短响应 	
;;;796    		SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_STATUS;
;;;797    		SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;798    		SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;799    		SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;800    		SDIO_SendCommand(&SDIO_CmdInitStructure);	
;;;801    
;;;802    	errorstatus=CmdResp1Error(SD_CMD_SEND_STATUS);		//等待R1响应 
;;;803    	
;;;804    	if(errorstatus!=SD_OK)return errorstatus;
;;;805    	cardstatus=SDIO->RESP1;													  
;;;806    	timeout=SD_DATATIMEOUT;
;;;807       	while(((cardstatus&0x00000100)==0)&&(timeout>0)) 	//检查READY_FOR_DATA位是否置位
;;;808    	{
;;;809    		timeout--;
;;;810    
;;;811    		SDIO_CmdInitStructure.SDIO_Argument = (u32)RCA<<16;//发送CMD13,查询卡的状态,短响应
;;;812    		SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_STATUS;
;;;813    		SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;814    		SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;815    		SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;816    		SDIO_SendCommand(&SDIO_CmdInitStructure);	
;;;817    		
;;;818    		errorstatus=CmdResp1Error(SD_CMD_SEND_STATUS);	//等待R1响应   		   
;;;819    		if(errorstatus!=SD_OK)return errorstatus;				    
;;;820    		cardstatus=SDIO->RESP1;													  
;;;821    	}
;;;822    	if(timeout==0)return SD_ERROR;
;;;823    	
;;;824    		SDIO_CmdInitStructure.SDIO_Argument = addr;//发送CMD24,写单块指令,短响应 	
;;;825    		SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_WRITE_SINGLE_BLOCK;
;;;826    		SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;827    		SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;828    		SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;829    		SDIO_SendCommand(&SDIO_CmdInitStructure);	
;;;830    	
;;;831    	errorstatus=CmdResp1Error(SD_CMD_WRITE_SINGLE_BLOCK);//等待R1响应   		   
;;;832    	if(errorstatus!=SD_OK)return errorstatus;   	  
;;;833    	StopCondition=0;									//单块写,不需要发送停止传输指令 
;;;834    
;;;835    	SDIO_DataInitStructure.SDIO_DataBlockSize= power<<4; ;	//blksize, 控制器到卡	
;;;836    	SDIO_DataInitStructure.SDIO_DataLength= blksize ;
;;;837    	SDIO_DataInitStructure.SDIO_DataTimeOut=SD_DATATIMEOUT ;
;;;838    	SDIO_DataInitStructure.SDIO_DPSM=SDIO_DPSM_Enable;
;;;839    	SDIO_DataInitStructure.SDIO_TransferDir=SDIO_TransferDir_ToCard;
;;;840    	SDIO_DataInitStructure.SDIO_TransferMode=SDIO_TransferMode_Block;
;;;841      SDIO_DataConfig(&SDIO_DataInitStructure);
;;;842    	  
;;;843    	timeout=SDIO_DATATIMEOUT;
;;;844    	if (DeviceMode == SD_POLLING_MODE)
;;;845    	{
;;;846    		INTX_DISABLE();//关闭总中断(POLLING模式,严禁中断打断SDIO读写操作!!!)
;;;847    		while(!(SDIO->STA&((1<<10)|(1<<4)|(1<<1)|(1<<3)|(1<<9))))//数据块发送成功/下溢/CRC/超时/起始位错误
;;;848    		{
;;;849    			if(SDIO_GetFlagStatus(SDIO_FLAG_TXFIFOHE) != RESET)							//发送区半空,表示至少存了8个字
;;;850    			{
;;;851    				if((tlen-bytestransferred)<SD_HALFFIFOBYTES)//不够32字节了
;;;852    				{
;;;853    					restwords=((tlen-bytestransferred)%4==0)?((tlen-bytestransferred)/4):((tlen-bytestransferred)/4+1);
;;;854    					
;;;855    					for(count=0;count<restwords;count++,tempbuff++,bytestransferred+=4)
;;;856    					{
;;;857    						SDIO_WriteData(*tempbuff);
;;;858    					}
;;;859    				}else
;;;860    				{
;;;861    					for(count=0;count<8;count++)
;;;862    					{
;;;863    						SDIO_WriteData(*(tempbuff+count));
;;;864    					}
;;;865    					tempbuff+=8;
;;;866    					bytestransferred+=32;
;;;867    				}
;;;868    				timeout=0X3FFFFFFF;	//写数据溢出时间
;;;869    			}else
;;;870    			{
;;;871    				if(timeout==0)return SD_DATA_TIMEOUT;
;;;872    				timeout--;
;;;873    			}
;;;874    		} 
;;;875    		if(SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)		//数据超时错误
;;;876    		{										   
;;;877    	 		SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT); 	//清错误标志
;;;878    			return SD_DATA_TIMEOUT;
;;;879    	 	}else if(SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)	//数据块CRC错误
;;;880    		{
;;;881    	 		SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);  		//清错误标志
;;;882    			return SD_DATA_CRC_FAIL;		   
;;;883    		}else if(SDIO_GetFlagStatus(SDIO_FLAG_TXUNDERR) != RESET) 	//接收fifo下溢错误
;;;884    		{
;;;885    	 		SDIO_ClearFlag(SDIO_FLAG_TXUNDERR);		//清错误标志
;;;886    			return SD_TX_UNDERRUN;		 
;;;887    		}else if(SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET) 	//接收起始位错误
;;;888    		{
;;;889    	 		SDIO_ClearFlag(SDIO_FLAG_STBITERR);//清错误标志
;;;890    			return SD_START_BIT_ERR;		 
;;;891    		}   
;;;892    	      
;;;893    		INTX_ENABLE();//开启总中断
;;;894    		SDIO->ICR=0X5FF;	 		//清除所有标记	  
;;;895    	}else if(DeviceMode==SD_DMA_MODE)
;;;896    	{
;;;897    		SD_DMA_Config((u32*)buf,blksize,DMA_DIR_PeripheralDST);//SDIO DMA配置
;;;898       		TransferError=SD_OK;
;;;899    		StopCondition=0;			//单块写,不需要发送停止传输指令 
;;;900    		TransferEnd=0;				//传输结束标置位，在中断服务置1
;;;901    		SDIO->MASK|=(1<<1)|(1<<3)|(1<<8)|(1<<4)|(1<<9);	//配置产生数据接收完成中断
;;;902     	 	SDIO->DCTRL|=1<<3;								//SDIO DMA使能.  
;;;903     		while(((DMA2->ISR&0X2000)==RESET)&&timeout)timeout--;//等待传输完成 
;;;904    		if(timeout==0)
;;;905    		{
;;;906      			SD_Init();	 					//重新初始化SD卡,可以解决写入死机的问题
;;;907    			return SD_DATA_TIMEOUT;			//超时	 
;;;908     		}
;;;909    		timeout=SDIO_DATATIMEOUT;
;;;910    		while((TransferEnd==0)&&(TransferError==SD_OK)&&timeout)timeout--;
;;;911     		if(timeout==0)return SD_DATA_TIMEOUT;			//超时	 
;;;912      		if(TransferError!=SD_OK)return TransferError;
;;;913     	}  
;;;914     	SDIO_ClearFlag(SDIO_STATIC_FLAGS);//清除所有标记
;;;915     	errorstatus=IsCardProgramming(&cardstate);
;;;916     	while((errorstatus==SD_OK)&&((cardstate==SD_CARD_PROGRAMMING)||(cardstate==SD_CARD_RECEIVING)))
;;;917    	{
;;;918    		errorstatus=IsCardProgramming(&cardstate);
;;;919    	}   
;;;920    	return errorstatus;
;;;921    }
000030  b00a              ADD      sp,sp,#0x28
000032  e8bd9ff0          POP      {r4-r12,pc}
                  |L27.54|
000036  2000              MOVS     r0,#0                 ;761
000038  49c4              LDR      r1,|L27.844|
00003a  62c8              STR      r0,[r1,#0x2c]         ;761
00003c  49c4              LDR      r1,|L27.848|
00003e  6088              STR      r0,[r1,#8]            ;763  ; SDIO_DataInitStructure
000040  6048              STR      r0,[r1,#4]            ;764  ; SDIO_DataInitStructure
000042  1e40              SUBS     r0,r0,#1              ;765
000044  6008              STR      r0,[r1,#0]            ;765  ; SDIO_DataInitStructure
000046  2001              MOVS     r0,#1                 ;766
000048  6148              STR      r0,[r1,#0x14]         ;766  ; SDIO_DataInitStructure
00004a  2000              MOVS     r0,#0                 ;767
00004c  60c8              STR      r0,[r1,#0xc]          ;767  ; SDIO_DataInitStructure
00004e  6108              STR      r0,[r1,#0x10]         ;768  ; SDIO_DataInitStructure
000050  4608              MOV      r0,r1                 ;769
000052  f7fffffe          BL       SDIO_DataConfig
000056  48bd              LDR      r0,|L27.844|
000058  6940              LDR      r0,[r0,#0x14]         ;772
00005a  f0007000          AND      r0,r0,#0x2000000      ;772
00005e  b108              CBZ      r0,|L27.100|
000060  200e              MOVS     r0,#0xe               ;772
000062  e7e5              B        |L27.48|
                  |L27.100|
000064  48bb              LDR      r0,|L27.852|
000066  7800              LDRB     r0,[r0,#0]            ;773  ; CardType
000068  2802              CMP      r0,#2                 ;773
00006a  d105              BNE      |L27.120|
00006c  0205              LSLS     r5,r0,#8              ;775
00006e  0a78              LSRS     r0,r7,#9              ;776
000070  ea4057c8          ORR      r7,r0,r8,LSL #23      ;776
000074  ea4f2868          ASR      r8,r8,#9              ;776
                  |L27.120|
000078  2d00              CMP      r5,#0                 ;778
00007a  dd1f              BLE      |L27.188|
00007c  f5b56f00          CMP      r5,#0x800             ;778
000080  dc1c              BGT      |L27.188|
000082  1e68              SUBS     r0,r5,#1              ;778
000084  4028              ANDS     r0,r0,r5              ;778
000086  b9c8              CBNZ     r0,|L27.188|
000088  4628              MOV      r0,r5                 ;780
00008a  f7fffffe          BL       convert_from_bytes_to_power_of_two
00008e  9005              STR      r0,[sp,#0x14]         ;780
000090  48b1              LDR      r0,|L27.856|
000092  6005              STR      r5,[r0,#0]            ;782  ; SDIO_CmdInitStructure
000094  2010              MOVS     r0,#0x10              ;783
000096  49b0              LDR      r1,|L27.856|
000098  6048              STR      r0,[r1,#4]            ;783  ; SDIO_CmdInitStructure
00009a  2040              MOVS     r0,#0x40              ;784
00009c  6088              STR      r0,[r1,#8]            ;784  ; SDIO_CmdInitStructure
00009e  2000              MOVS     r0,#0                 ;785
0000a0  60c8              STR      r0,[r1,#0xc]          ;785  ; SDIO_CmdInitStructure
0000a2  f44f6080          MOV      r0,#0x400             ;786
0000a6  6108              STR      r0,[r1,#0x10]         ;786  ; SDIO_CmdInitStructure
0000a8  4608              MOV      r0,r1                 ;787
0000aa  f7fffffe          BL       SDIO_SendCommand
0000ae  2010              MOVS     r0,#0x10              ;789
0000b0  f7fffffe          BL       CmdResp1Error
0000b4  4606              MOV      r6,r0                 ;789
0000b6  b11e              CBZ      r6,|L27.192|
0000b8  4630              MOV      r0,r6                 ;791
0000ba  e7b9              B        |L27.48|
                  |L27.188|
0000bc  2026              MOVS     r0,#0x26              ;793
0000be  e7b7              B        |L27.48|
                  |L27.192|
0000c0  48a6              LDR      r0,|L27.860|
0000c2  8800              LDRH     r0,[r0,#0]            ;795  ; RCA
0000c4  0400              LSLS     r0,r0,#16             ;795
0000c6  49a4              LDR      r1,|L27.856|
0000c8  6008              STR      r0,[r1,#0]            ;795  ; SDIO_CmdInitStructure
0000ca  200d              MOVS     r0,#0xd               ;796
0000cc  6048              STR      r0,[r1,#4]            ;796  ; SDIO_CmdInitStructure
0000ce  2040              MOVS     r0,#0x40              ;797
0000d0  6088              STR      r0,[r1,#8]            ;797  ; SDIO_CmdInitStructure
0000d2  2000              MOVS     r0,#0                 ;798
0000d4  60c8              STR      r0,[r1,#0xc]          ;798  ; SDIO_CmdInitStructure
0000d6  f44f6080          MOV      r0,#0x400             ;799
0000da  6108              STR      r0,[r1,#0x10]         ;799  ; SDIO_CmdInitStructure
0000dc  4608              MOV      r0,r1                 ;800
0000de  f7fffffe          BL       SDIO_SendCommand
0000e2  200d              MOVS     r0,#0xd               ;802
0000e4  f7fffffe          BL       CmdResp1Error
0000e8  4606              MOV      r6,r0                 ;802
0000ea  b10e              CBZ      r6,|L27.240|
0000ec  4630              MOV      r0,r6                 ;804
0000ee  e79f              B        |L27.48|
                  |L27.240|
0000f0  4896              LDR      r0,|L27.844|
0000f2  6940              LDR      r0,[r0,#0x14]         ;805
0000f4  9003              STR      r0,[sp,#0xc]          ;805
0000f6  f04f34ff          MOV      r4,#0xffffffff        ;806
0000fa  e01b              B        |L27.308|
                  |L27.252|
0000fc  1e64              SUBS     r4,r4,#1              ;809
0000fe  4897              LDR      r0,|L27.860|
000100  8800              LDRH     r0,[r0,#0]            ;811  ; RCA
000102  0400              LSLS     r0,r0,#16             ;811
000104  4994              LDR      r1,|L27.856|
000106  6008              STR      r0,[r1,#0]            ;811  ; SDIO_CmdInitStructure
000108  200d              MOVS     r0,#0xd               ;812
00010a  6048              STR      r0,[r1,#4]            ;812  ; SDIO_CmdInitStructure
00010c  2040              MOVS     r0,#0x40              ;813
00010e  6088              STR      r0,[r1,#8]            ;813  ; SDIO_CmdInitStructure
000110  2000              MOVS     r0,#0                 ;814
000112  60c8              STR      r0,[r1,#0xc]          ;814  ; SDIO_CmdInitStructure
000114  f44f6080          MOV      r0,#0x400             ;815
000118  6108              STR      r0,[r1,#0x10]         ;815  ; SDIO_CmdInitStructure
00011a  4608              MOV      r0,r1                 ;816
00011c  f7fffffe          BL       SDIO_SendCommand
000120  200d              MOVS     r0,#0xd               ;818
000122  f7fffffe          BL       CmdResp1Error
000126  4606              MOV      r6,r0                 ;818
000128  b10e              CBZ      r6,|L27.302|
00012a  4630              MOV      r0,r6                 ;819
00012c  e780              B        |L27.48|
                  |L27.302|
00012e  4887              LDR      r0,|L27.844|
000130  6940              LDR      r0,[r0,#0x14]         ;820
000132  9003              STR      r0,[sp,#0xc]          ;820
                  |L27.308|
000134  9803              LDR      r0,[sp,#0xc]          ;807
000136  f4007080          AND      r0,r0,#0x100          ;807
00013a  b908              CBNZ     r0,|L27.320|
00013c  2c00              CMP      r4,#0                 ;807
00013e  d1dd              BNE      |L27.252|
                  |L27.320|
000140  b90c              CBNZ     r4,|L27.326|
000142  2029              MOVS     r0,#0x29              ;822
000144  e774              B        |L27.48|
                  |L27.326|
000146  4884              LDR      r0,|L27.856|
000148  6007              STR      r7,[r0,#0]            ;824  ; SDIO_CmdInitStructure
00014a  2018              MOVS     r0,#0x18              ;825
00014c  4982              LDR      r1,|L27.856|
00014e  6048              STR      r0,[r1,#4]            ;825  ; SDIO_CmdInitStructure
000150  2040              MOVS     r0,#0x40              ;826
000152  6088              STR      r0,[r1,#8]            ;826  ; SDIO_CmdInitStructure
000154  2000              MOVS     r0,#0                 ;827
000156  60c8              STR      r0,[r1,#0xc]          ;827  ; SDIO_CmdInitStructure
000158  f44f6080          MOV      r0,#0x400             ;828
00015c  6108              STR      r0,[r1,#0x10]         ;828  ; SDIO_CmdInitStructure
00015e  4608              MOV      r0,r1                 ;829
000160  f7fffffe          BL       SDIO_SendCommand
000164  2018              MOVS     r0,#0x18              ;831
000166  f7fffffe          BL       CmdResp1Error
00016a  4606              MOV      r6,r0                 ;831
00016c  b10e              CBZ      r6,|L27.370|
00016e  4630              MOV      r0,r6                 ;832
000170  e75e              B        |L27.48|
                  |L27.370|
000172  2000              MOVS     r0,#0                 ;833
000174  497a              LDR      r1,|L27.864|
000176  7008              STRB     r0,[r1,#0]            ;833
000178  9805              LDR      r0,[sp,#0x14]         ;835
00017a  0100              LSLS     r0,r0,#4              ;835
00017c  4974              LDR      r1,|L27.848|
00017e  6088              STR      r0,[r1,#8]            ;835  ; SDIO_DataInitStructure
000180  4608              MOV      r0,r1                 ;836
000182  6045              STR      r5,[r0,#4]            ;836  ; SDIO_DataInitStructure
000184  f04f30ff          MOV      r0,#0xffffffff        ;837
000188  6008              STR      r0,[r1,#0]            ;837  ; SDIO_DataInitStructure
00018a  2001              MOVS     r0,#1                 ;838
00018c  6148              STR      r0,[r1,#0x14]         ;838  ; SDIO_DataInitStructure
00018e  2000              MOVS     r0,#0                 ;839
000190  60c8              STR      r0,[r1,#0xc]          ;839  ; SDIO_DataInitStructure
000192  6108              STR      r0,[r1,#0x10]         ;840  ; SDIO_DataInitStructure
000194  4608              MOV      r0,r1                 ;841
000196  f7fffffe          BL       SDIO_DataConfig
00019a  f04f34ff          MOV      r4,#0xffffffff        ;843
00019e  4871              LDR      r0,|L27.868|
0001a0  7800              LDRB     r0,[r0,#0]            ;844  ; DeviceMode
0001a2  2800              CMP      r0,#0                 ;844
0001a4  d17b              BNE      |L27.670|
0001a6  f7fffffe          BL       INTX_DISABLE
0001aa  e043              B        |L27.564|
                  |L27.428|
0001ac  f44f4080          MOV      r0,#0x4000            ;849
0001b0  f7fffffe          BL       SDIO_GetFlagStatus
0001b4  b3c8              CBZ      r0,|L27.554|
0001b6  9801              LDR      r0,[sp,#4]            ;851
0001b8  eba00009          SUB      r0,r0,r9              ;851
0001bc  2820              CMP      r0,#0x20              ;851
0001be  d221              BCS      |L27.516|
0001c0  9801              LDR      r0,[sp,#4]            ;853
0001c2  eba00009          SUB      r0,r0,r9              ;853
0001c6  f0000003          AND      r0,r0,#3              ;853
0001ca  b920              CBNZ     r0,|L27.470|
0001cc  9801              LDR      r0,[sp,#4]            ;853
0001ce  eba00009          SUB      r0,r0,r9              ;853
0001d2  0880              LSRS     r0,r0,#2              ;853
0001d4  e004              B        |L27.480|
                  |L27.470|
0001d6  9801              LDR      r0,[sp,#4]            ;853
0001d8  eba00009          SUB      r0,r0,r9              ;853
0001dc  0880              LSRS     r0,r0,#2              ;853
0001de  1c40              ADDS     r0,r0,#1              ;853
                  |L27.480|
0001e0  9002              STR      r0,[sp,#8]            ;853
0001e2  f04f0a00          MOV      r10,#0                ;855
0001e6  e009              B        |L27.508|
                  |L27.488|
0001e8  f8db0000          LDR      r0,[r11,#0]           ;857
0001ec  f7fffffe          BL       SDIO_WriteData
0001f0  f10a0a01          ADD      r10,r10,#1            ;855
0001f4  f10b0b04          ADD      r11,r11,#4            ;855
0001f8  f1090904          ADD      r9,r9,#4              ;855
                  |L27.508|
0001fc  9802              LDR      r0,[sp,#8]            ;855
0001fe  4582              CMP      r10,r0                ;855
000200  d3f2              BCC      |L27.488|
000202  e00f              B        |L27.548|
                  |L27.516|
000204  f04f0a00          MOV      r10,#0                ;861
000208  e005              B        |L27.534|
                  |L27.522|
00020a  f85b002a          LDR      r0,[r11,r10,LSL #2]   ;863
00020e  f7fffffe          BL       SDIO_WriteData
000212  f10a0a01          ADD      r10,r10,#1            ;861
                  |L27.534|
000216  f1ba0f08          CMP      r10,#8                ;861
00021a  d3f6              BCC      |L27.522|
00021c  f10b0b20          ADD      r11,r11,#0x20         ;865
000220  f1090920          ADD      r9,r9,#0x20           ;866
                  |L27.548|
000224  f06f4440          MVN      r4,#0xc0000000        ;868
000228  e004              B        |L27.564|
                  |L27.554|
00022a  e7ff              B        |L27.556|
                  |L27.556|
00022c  b90c              CBNZ     r4,|L27.562|
00022e  2004              MOVS     r0,#4                 ;871
000230  e6fe              B        |L27.48|
                  |L27.562|
000232  1e64              SUBS     r4,r4,#1              ;872
                  |L27.564|
000234  4845              LDR      r0,|L27.844|
000236  6b40              LDR      r0,[r0,#0x34]         ;847
000238  f240611a          MOV      r1,#0x61a             ;847
00023c  4008              ANDS     r0,r0,r1              ;847
00023e  2800              CMP      r0,#0                 ;847
000240  d0b4              BEQ      |L27.428|
000242  2008              MOVS     r0,#8                 ;875
000244  f7fffffe          BL       SDIO_GetFlagStatus
000248  b120              CBZ      r0,|L27.596|
00024a  2008              MOVS     r0,#8                 ;877
00024c  f7fffffe          BL       SDIO_ClearFlag
000250  2004              MOVS     r0,#4                 ;878
000252  e6ed              B        |L27.48|
                  |L27.596|
000254  2002              MOVS     r0,#2                 ;879
000256  f7fffffe          BL       SDIO_GetFlagStatus
00025a  b120              CBZ      r0,|L27.614|
00025c  2002              MOVS     r0,#2                 ;881
00025e  f7fffffe          BL       SDIO_ClearFlag
000262  2002              MOVS     r0,#2                 ;882
000264  e6e4              B        |L27.48|
                  |L27.614|
000266  2010              MOVS     r0,#0x10              ;883
000268  f7fffffe          BL       SDIO_GetFlagStatus
00026c  b120              CBZ      r0,|L27.632|
00026e  2010              MOVS     r0,#0x10              ;885
000270  f7fffffe          BL       SDIO_ClearFlag
000274  2005              MOVS     r0,#5                 ;886
000276  e6db              B        |L27.48|
                  |L27.632|
000278  f44f7000          MOV      r0,#0x200             ;887
00027c  f7fffffe          BL       SDIO_GetFlagStatus
000280  b130              CBZ      r0,|L27.656|
000282  f44f7000          MOV      r0,#0x200             ;889
000286  f7fffffe          BL       SDIO_ClearFlag
00028a  2007              MOVS     r0,#7                 ;890
00028c  e6d0              B        |L27.48|
00028e  e006              B        |L27.670|
                  |L27.656|
000290  f7fffffe          BL       INTX_ENABLE
000294  f24050ff          MOV      r0,#0x5ff             ;894
000298  492c              LDR      r1,|L27.844|
00029a  6388              STR      r0,[r1,#0x38]         ;894
00029c  e03e              B        |L27.796|
                  |L27.670|
00029e  4831              LDR      r0,|L27.868|
0002a0  7800              LDRB     r0,[r0,#0]            ;895  ; DeviceMode
0002a2  2801              CMP      r0,#1                 ;895
0002a4  d13a              BNE      |L27.796|
0002a6  2210              MOVS     r2,#0x10              ;897
0002a8  4629              MOV      r1,r5                 ;897
0002aa  9806              LDR      r0,[sp,#0x18]         ;897
0002ac  f7fffffe          BL       SD_DMA_Config
0002b0  2000              MOVS     r0,#0                 ;898
0002b2  492d              LDR      r1,|L27.872|
0002b4  7008              STRB     r0,[r1,#0]            ;898
0002b6  492a              LDR      r1,|L27.864|
0002b8  7008              STRB     r0,[r1,#0]            ;899
0002ba  492c              LDR      r1,|L27.876|
0002bc  7008              STRB     r0,[r1,#0]            ;900
0002be  4823              LDR      r0,|L27.844|
0002c0  6bc0              LDR      r0,[r0,#0x3c]         ;901
0002c2  f240311a          MOV      r1,#0x31a             ;901
0002c6  4308              ORRS     r0,r0,r1              ;901
0002c8  4920              LDR      r1,|L27.844|
0002ca  63c8              STR      r0,[r1,#0x3c]         ;901
0002cc  4608              MOV      r0,r1                 ;902
0002ce  6ac0              LDR      r0,[r0,#0x2c]         ;902
0002d0  f0400008          ORR      r0,r0,#8              ;902
0002d4  62c8              STR      r0,[r1,#0x2c]         ;902
0002d6  e000              B        |L27.730|
                  |L27.728|
0002d8  1e64              SUBS     r4,r4,#1              ;903
                  |L27.730|
0002da  4825              LDR      r0,|L27.880|
0002dc  6800              LDR      r0,[r0,#0]            ;903
0002de  f4005000          AND      r0,r0,#0x2000         ;903
0002e2  b908              CBNZ     r0,|L27.744|
0002e4  2c00              CMP      r4,#0                 ;903
0002e6  d1f7              BNE      |L27.728|
                  |L27.744|
0002e8  b91c              CBNZ     r4,|L27.754|
0002ea  f7fffffe          BL       SD_Init
0002ee  2004              MOVS     r0,#4                 ;907
0002f0  e69e              B        |L27.48|
                  |L27.754|
0002f2  f04f34ff          MOV      r4,#0xffffffff        ;909
0002f6  e000              B        |L27.762|
                  |L27.760|
0002f8  1e64              SUBS     r4,r4,#1              ;910
                  |L27.762|
0002fa  481c              LDR      r0,|L27.876|
0002fc  7800              LDRB     r0,[r0,#0]            ;910  ; TransferEnd
0002fe  b920              CBNZ     r0,|L27.778|
000300  4819              LDR      r0,|L27.872|
000302  7800              LDRB     r0,[r0,#0]            ;910  ; TransferError
000304  b908              CBNZ     r0,|L27.778|
000306  2c00              CMP      r4,#0                 ;910
000308  d1f6              BNE      |L27.760|
                  |L27.778|
00030a  b90c              CBNZ     r4,|L27.784|
00030c  2004              MOVS     r0,#4                 ;911
00030e  e68f              B        |L27.48|
                  |L27.784|
000310  4815              LDR      r0,|L27.872|
000312  7800              LDRB     r0,[r0,#0]            ;912  ; TransferError
000314  b110              CBZ      r0,|L27.796|
000316  4814              LDR      r0,|L27.872|
000318  7800              LDRB     r0,[r0,#0]            ;912  ; TransferError
00031a  e689              B        |L27.48|
                  |L27.796|
00031c  f24050ff          MOV      r0,#0x5ff             ;914
000320  f7fffffe          BL       SDIO_ClearFlag
000324  a804              ADD      r0,sp,#0x10           ;915
000326  f7fffffe          BL       IsCardProgramming
00032a  4606              MOV      r6,r0                 ;915
00032c  e003              B        |L27.822|
                  |L27.814|
00032e  a804              ADD      r0,sp,#0x10           ;918
000330  f7fffffe          BL       IsCardProgramming
000334  4606              MOV      r6,r0                 ;918
                  |L27.822|
000336  b93e              CBNZ     r6,|L27.840|
000338  f89d0010          LDRB     r0,[sp,#0x10]         ;916
00033c  2807              CMP      r0,#7                 ;916
00033e  d0f6              BEQ      |L27.814|
000340  f89d0010          LDRB     r0,[sp,#0x10]         ;916
000344  2806              CMP      r0,#6                 ;916
000346  d0f2              BEQ      |L27.814|
                  |L27.840|
000348  4630              MOV      r0,r6                 ;920
00034a  e671              B        |L27.48|
;;;922    //SD卡写多个块 
                          ENDP

                  |L27.844|
                          DCD      0x40018000
                  |L27.848|
                          DCD      SDIO_DataInitStructure
                  |L27.852|
                          DCD      CardType
                  |L27.856|
                          DCD      SDIO_CmdInitStructure
                  |L27.860|
                          DCD      ||RCA||
                  |L27.864|
                          DCD      StopCondition
                  |L27.868|
                          DCD      DeviceMode
                  |L27.872|
                          DCD      TransferError
                  |L27.876|
                          DCD      TransferEnd
                  |L27.880|
                          DCD      0x40020400

                          AREA ||i.SD_WriteDisk||, CODE, READONLY, ALIGN=2

                  SD_WriteDisk PROC
;;;1590   //返回值:错误状态;0,正常;其他,错误代码;	
;;;1591   u8 SD_WriteDisk(u8*buf,u32 sector,u8 cnt)
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;1592   {
000004  4606              MOV      r6,r0
000006  4689              MOV      r9,r1
000008  4692              MOV      r10,r2
;;;1593   	u8 sta=SD_OK;
00000a  2000              MOVS     r0,#0
00000c  9002              STR      r0,[sp,#8]
;;;1594   	u8 n;
;;;1595   	long long lsector=sector;
00000e  2500              MOVS     r5,#0
000010  464c              MOV      r4,r9
;;;1596   	if(CardType!=SDIO_STD_CAPACITY_SD_CARD_V1_1)lsector<<=9;
000012  4821              LDR      r0,|L28.152|
000014  7800              LDRB     r0,[r0,#0]  ; CardType
000016  b118              CBZ      r0,|L28.32|
000018  0268              LSLS     r0,r5,#9
00001a  ea4055d4          ORR      r5,r0,r4,LSR #23
00001e  0264              LSLS     r4,r4,#9
                  |L28.32|
;;;1597   	if((u32)buf%4!=0)
000020  f0060003          AND      r0,r6,#3
000024  b1f0              CBZ      r0,|L28.100|
;;;1598   	{
;;;1599   	 	for(n=0;n<cnt;n++)
000026  f04f0b00          MOV      r11,#0
00002a  e018              B        |L28.94|
                  |L28.44|
;;;1600   		{
;;;1601   			memcpy(SDIO_DATA_BUFFER,buf,512);
00002c  f44f7200          MOV      r2,#0x200
000030  4631              MOV      r1,r6
000032  481a              LDR      r0,|L28.156|
000034  f7fffffe          BL       __aeabi_memcpy
;;;1602   		 	sta=SD_WriteBlock(SDIO_DATA_BUFFER,lsector+512*n,512);//单个sector的写操作
000038  f44f7000          MOV      r0,#0x200
00003c  9000              STR      r0,[sp,#0]
00003e  ea4f204b          LSL      r0,r11,#9
000042  1907              ADDS     r7,r0,r4
000044  eb4573e0          ADC      r3,r5,r0,ASR #31
000048  463a              MOV      r2,r7
00004a  4814              LDR      r0,|L28.156|
00004c  f7fffffe          BL       SD_WriteBlock
000050  9002              STR      r0,[sp,#8]
;;;1603   			buf+=512;
000052  f5067600          ADD      r6,r6,#0x200
000056  f10b0001          ADD      r0,r11,#1             ;1599
00005a  f0000bff          AND      r11,r0,#0xff          ;1599
                  |L28.94|
00005e  45d3              CMP      r11,r10               ;1599
000060  dbe4              BLT      |L28.44|
000062  e016              B        |L28.146|
                  |L28.100|
;;;1604   		} 
;;;1605   	}else
;;;1606   	{
;;;1607   		if(cnt==1)sta=SD_WriteBlock(buf,lsector,512);    	//单个sector的写操作
000064  f1ba0f01          CMP      r10,#1
000068  d109              BNE      |L28.126|
00006a  f44f7000          MOV      r0,#0x200
00006e  4622              MOV      r2,r4
000070  462b              MOV      r3,r5
000072  9000              STR      r0,[sp,#0]
000074  4630              MOV      r0,r6
000076  f7fffffe          BL       SD_WriteBlock
00007a  9002              STR      r0,[sp,#8]
00007c  e009              B        |L28.146|
                  |L28.126|
;;;1608   		else sta=SD_WriteMultiBlocks(buf,lsector,512,cnt);	//多个sector  
00007e  f44f7000          MOV      r0,#0x200
000082  4622              MOV      r2,r4
000084  462b              MOV      r3,r5
000086  e9cd0a00          STRD     r0,r10,[sp,#0]
00008a  4630              MOV      r0,r6
00008c  f7fffffe          BL       SD_WriteMultiBlocks
000090  9002              STR      r0,[sp,#8]
                  |L28.146|
;;;1609   	}
;;;1610   	return sta;
000092  9802              LDR      r0,[sp,#8]
;;;1611   }
000094  e8bd8ffe          POP      {r1-r11,pc}
;;;1612   
                          ENDP

                  |L28.152|
                          DCD      CardType
                  |L28.156|
                          DCD      SDIO_DATA_BUFFER

                          AREA ||i.SD_WriteMultiBlocks||, CODE, READONLY, ALIGN=2

                  SD_WriteMultiBlocks PROC
;;;927    //返回值:错误状态												   
;;;928    SD_Error SD_WriteMultiBlocks(u8 *buf,long long addr,u16 blksize,u32 nblks)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;929    {
000004  b084              SUB      sp,sp,#0x10
000006  e9dd4712          LDRD     r4,r7,[sp,#0x48]
;;;930    SD_Error errorstatus = SD_OK;
00000a  2600              MOVS     r6,#0
;;;931    	u8  power = 0, cardstate = 0;
00000c  2000              MOVS     r0,#0
00000e  9003              STR      r0,[sp,#0xc]
000010  9002              STR      r0,[sp,#8]
;;;932    	u32 timeout=0,bytestransferred=0;
000012  2500              MOVS     r5,#0
000014  4680              MOV      r8,r0
;;;933    	u32 count = 0, restwords = 0;
000016  4681              MOV      r9,r0
000018  9001              STR      r0,[sp,#4]
;;;934    	u32 tlen=nblks*blksize;				//总长度(字节)
00001a  fb07fb04          MUL      r11,r7,r4
;;;935    	u32 *tempbuff = (u32*)buf;  
00001e  f8dda010          LDR      r10,[sp,#0x10]
;;;936      if(buf==NULL)return SD_INVALID_PARAMETER; //参数错误  
000022  f8dda010          LDR      r10,[sp,#0x10]
000026  f1ba0f00          CMP      r10,#0
00002a  d103              BNE      |L29.52|
00002c  2026              MOVS     r0,#0x26
                  |L29.46|
;;;937      SDIO->DCTRL=0x0;							//数据控制寄存器清零(关DMA)   
;;;938    	
;;;939    	SDIO_DataInitStructure.SDIO_DataBlockSize= 0; ;	//清除DPSM状态机配置	
;;;940    	SDIO_DataInitStructure.SDIO_DataLength= 0 ;
;;;941    	SDIO_DataInitStructure.SDIO_DataTimeOut=SD_DATATIMEOUT ;
;;;942    	SDIO_DataInitStructure.SDIO_DPSM=SDIO_DPSM_Enable;
;;;943    	SDIO_DataInitStructure.SDIO_TransferDir=SDIO_TransferDir_ToCard;
;;;944    	SDIO_DataInitStructure.SDIO_TransferMode=SDIO_TransferMode_Block;
;;;945      SDIO_DataConfig(&SDIO_DataInitStructure);
;;;946    	
;;;947    	if(SDIO->RESP1&SD_CARD_LOCKED)return SD_LOCK_UNLOCK_FAILED;//卡锁了
;;;948     	if(CardType==SDIO_HIGH_CAPACITY_SD_CARD)//大容量卡
;;;949    	{
;;;950    		blksize=512;
;;;951    		addr>>=9;
;;;952    	}    
;;;953    	if((blksize>0)&&(blksize<=2048)&&((blksize&(blksize-1))==0))
;;;954    	{
;;;955    		power=convert_from_bytes_to_power_of_two(blksize);
;;;956    		
;;;957    		SDIO_CmdInitStructure.SDIO_Argument = blksize;	//发送CMD16+设置数据长度为blksize,短响应
;;;958    		SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
;;;959    		SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;960    		SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;961    		SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;962    		SDIO_SendCommand(&SDIO_CmdInitStructure);	
;;;963    		
;;;964    		errorstatus=CmdResp1Error(SD_CMD_SET_BLOCKLEN);	//等待R1响应  
;;;965    		
;;;966    		if(errorstatus!=SD_OK)return errorstatus;   	//响应错误	 
;;;967    		
;;;968    	}else return SD_INVALID_PARAMETER;	 
;;;969    	if(nblks>1)
;;;970    	{					  
;;;971    		if(nblks*blksize>SD_MAX_DATA_LENGTH)return SD_INVALID_PARAMETER;   
;;;972         	if((SDIO_STD_CAPACITY_SD_CARD_V1_1==CardType)||(SDIO_STD_CAPACITY_SD_CARD_V2_0==CardType)||(SDIO_HIGH_CAPACITY_SD_CARD==CardType))
;;;973        	{
;;;974    			//提高性能
;;;975    				SDIO_CmdInitStructure.SDIO_Argument = (u32)RCA<<16;		//发送ACMD55,短响应 	
;;;976    				SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;977    				SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;978    				SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;979    				SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;980    				SDIO_SendCommand(&SDIO_CmdInitStructure);	
;;;981    				
;;;982    			errorstatus=CmdResp1Error(SD_CMD_APP_CMD);		//等待R1响应 
;;;983    				
;;;984    			if(errorstatus!=SD_OK)return errorstatus;				 
;;;985    				
;;;986    				SDIO_CmdInitStructure.SDIO_Argument =nblks;		//发送CMD23,设置块数量,短响应 	 
;;;987    				SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCK_COUNT;
;;;988    				SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;989    				SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;990    				SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;991    				SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;992    			  
;;;993    				errorstatus=CmdResp1Error(SD_CMD_SET_BLOCK_COUNT);//等待R1响应 
;;;994    				
;;;995    			if(errorstatus!=SD_OK)return errorstatus;		
;;;996    		    
;;;997    		} 
;;;998    
;;;999    				SDIO_CmdInitStructure.SDIO_Argument =addr;	//发送CMD25,多块写指令,短响应 	  
;;;1000   				SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_WRITE_MULT_BLOCK;
;;;1001   				SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1002   				SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1003   				SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1004   				SDIO_SendCommand(&SDIO_CmdInitStructure);	
;;;1005   
;;;1006    		errorstatus=CmdResp1Error(SD_CMD_WRITE_MULT_BLOCK);	//等待R1响应   		   
;;;1007   	
;;;1008   		if(errorstatus!=SD_OK)return errorstatus;
;;;1009   
;;;1010           SDIO_DataInitStructure.SDIO_DataBlockSize= power<<4; ;	//blksize, 控制器到卡	
;;;1011   				SDIO_DataInitStructure.SDIO_DataLength= nblks*blksize ;
;;;1012   				SDIO_DataInitStructure.SDIO_DataTimeOut=SD_DATATIMEOUT ;
;;;1013   				SDIO_DataInitStructure.SDIO_DPSM=SDIO_DPSM_Enable;
;;;1014   				SDIO_DataInitStructure.SDIO_TransferDir=SDIO_TransferDir_ToCard;
;;;1015   				SDIO_DataInitStructure.SDIO_TransferMode=SDIO_TransferMode_Block;
;;;1016   				SDIO_DataConfig(&SDIO_DataInitStructure);
;;;1017   		
;;;1018   		if(DeviceMode==SD_POLLING_MODE)
;;;1019   	    {
;;;1020   			timeout=SDIO_DATATIMEOUT;
;;;1021   			INTX_DISABLE();//关闭总中断(POLLING模式,严禁中断打断SDIO读写操作!!!)
;;;1022   			while(!(SDIO->STA&((1<<4)|(1<<1)|(1<<8)|(1<<3)|(1<<9))))//下溢/CRC/数据结束/超时/起始位错误
;;;1023   			{
;;;1024   				if(SDIO->STA&(1<<14))							//发送区半空,表示至少存了8字(32字节)
;;;1025   				{	  
;;;1026   					if((tlen-bytestransferred)<SD_HALFFIFOBYTES)//不够32字节了
;;;1027   					{
;;;1028   						restwords=((tlen-bytestransferred)%4==0)?((tlen-bytestransferred)/4):((tlen-bytestransferred)/4+1);
;;;1029   						for(count=0;count<restwords;count++,tempbuff++,bytestransferred+=4)
;;;1030   						{
;;;1031   							SDIO_WriteData(*tempbuff);
;;;1032   						}
;;;1033   					}else 										//发送区半空,可以发送至少8字(32字节)数据
;;;1034   					{
;;;1035   						for(count=0;count<SD_HALFFIFO;count++)
;;;1036   						{
;;;1037   							SDIO_WriteData(*(tempbuff+count));
;;;1038   						}
;;;1039   						tempbuff+=SD_HALFFIFO;
;;;1040   						bytestransferred+=SD_HALFFIFOBYTES;
;;;1041   					}
;;;1042   					timeout=0X3FFFFFFF;	//写数据溢出时间
;;;1043   				}else
;;;1044   				{
;;;1045   					if(timeout==0)return SD_DATA_TIMEOUT; 
;;;1046   					timeout--;
;;;1047   				}
;;;1048   			} 
;;;1049   		if(SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)		//数据超时错误
;;;1050   		{										   
;;;1051   	 		SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT); 	//清错误标志
;;;1052   			return SD_DATA_TIMEOUT;
;;;1053   	 	}else if(SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)	//数据块CRC错误
;;;1054   		{
;;;1055   	 		SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);  		//清错误标志
;;;1056   			return SD_DATA_CRC_FAIL;		   
;;;1057   		}else if(SDIO_GetFlagStatus(SDIO_FLAG_TXUNDERR) != RESET) 	//接收fifo下溢错误
;;;1058   		{
;;;1059   	 		SDIO_ClearFlag(SDIO_FLAG_TXUNDERR);		//清错误标志
;;;1060   			return SD_TX_UNDERRUN;		 
;;;1061   		}else if(SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET) 	//接收起始位错误
;;;1062   		{
;;;1063   	 		SDIO_ClearFlag(SDIO_FLAG_STBITERR);//清错误标志
;;;1064   			return SD_START_BIT_ERR;		 
;;;1065   		}    										   
;;;1066   			if(SDIO_GetFlagStatus(SDIO_FLAG_DATAEND) != RESET)		//发送结束
;;;1067   			{															 
;;;1068   				if((SDIO_STD_CAPACITY_SD_CARD_V1_1==CardType)||(SDIO_STD_CAPACITY_SD_CARD_V2_0==CardType)||(SDIO_HIGH_CAPACITY_SD_CARD==CardType))
;;;1069   				{   
;;;1070   					SDIO_CmdInitStructure.SDIO_Argument =0;//发送CMD12+结束传输 	  
;;;1071   					SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_STOP_TRANSMISSION;
;;;1072   					SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1073   					SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1074   					SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1075   					SDIO_SendCommand(&SDIO_CmdInitStructure);	
;;;1076   					
;;;1077   					errorstatus=CmdResp1Error(SD_CMD_STOP_TRANSMISSION);//等待R1响应   
;;;1078   					if(errorstatus!=SD_OK)return errorstatus;	 
;;;1079   				}
;;;1080   			}
;;;1081   			INTX_ENABLE();//开启总中断
;;;1082   	 		SDIO_ClearFlag(SDIO_STATIC_FLAGS);//清除所有标记
;;;1083   	    }else if(DeviceMode==SD_DMA_MODE)
;;;1084   		{
;;;1085   			SD_DMA_Config((u32*)buf,nblks*blksize,DMA_DIR_PeripheralDST);//SDIO DMA配置
;;;1086   	   		TransferError=SD_OK;
;;;1087   			StopCondition=1;			//多块写,需要发送停止传输指令 
;;;1088   			TransferEnd=0;				//传输结束标置位，在中断服务置1
;;;1089   			SDIO->MASK|=(1<<1)|(1<<3)|(1<<8)|(1<<4)|(1<<9);	//配置产生数据接收完成中断
;;;1090   	 	 	SDIO->DCTRL|=1<<3;								//SDIO DMA使能. 
;;;1091   			timeout=SDIO_DATATIMEOUT;
;;;1092   	 		while(((DMA2->ISR&0X2000)==RESET)&&timeout)timeout--;//等待传输完成 
;;;1093   			if(timeout==0)	 								//超时
;;;1094   			{									  
;;;1095     				SD_Init();	 					//重新初始化SD卡,可以解决写入死机的问题
;;;1096   	 			return SD_DATA_TIMEOUT;			//超时	 
;;;1097   	 		}
;;;1098   			timeout=SDIO_DATATIMEOUT;
;;;1099   			while((TransferEnd==0)&&(TransferError==SD_OK)&&timeout)timeout--;
;;;1100   	 		if(timeout==0)return SD_DATA_TIMEOUT;			//超时	 
;;;1101   	 		if(TransferError!=SD_OK)return TransferError;	 
;;;1102   		}
;;;1103     	}
;;;1104    	SDIO_ClearFlag(SDIO_STATIC_FLAGS);//清除所有标记
;;;1105    	errorstatus=IsCardProgramming(&cardstate);
;;;1106    	while((errorstatus==SD_OK)&&((cardstate==SD_CARD_PROGRAMMING)||(cardstate==SD_CARD_RECEIVING)))
;;;1107   	{
;;;1108   		errorstatus=IsCardProgramming(&cardstate);
;;;1109   	}   
;;;1110   	return errorstatus;	   
;;;1111   }
00002e  b008              ADD      sp,sp,#0x20
000030  e8bd9ff0          POP      {r4-r12,pc}
                  |L29.52|
000034  2000              MOVS     r0,#0                 ;937
000036  49d8              LDR      r1,|L29.920|
000038  62c8              STR      r0,[r1,#0x2c]         ;937
00003a  49d8              LDR      r1,|L29.924|
00003c  6088              STR      r0,[r1,#8]            ;939  ; SDIO_DataInitStructure
00003e  6048              STR      r0,[r1,#4]            ;940  ; SDIO_DataInitStructure
000040  1e40              SUBS     r0,r0,#1              ;941
000042  6008              STR      r0,[r1,#0]            ;941  ; SDIO_DataInitStructure
000044  2001              MOVS     r0,#1                 ;942
000046  6148              STR      r0,[r1,#0x14]         ;942  ; SDIO_DataInitStructure
000048  2000              MOVS     r0,#0                 ;943
00004a  60c8              STR      r0,[r1,#0xc]          ;943  ; SDIO_DataInitStructure
00004c  6108              STR      r0,[r1,#0x10]         ;944  ; SDIO_DataInitStructure
00004e  4608              MOV      r0,r1                 ;945
000050  f7fffffe          BL       SDIO_DataConfig
000054  48d0              LDR      r0,|L29.920|
000056  6940              LDR      r0,[r0,#0x14]         ;947
000058  f0007000          AND      r0,r0,#0x2000000      ;947
00005c  b108              CBZ      r0,|L29.98|
00005e  200e              MOVS     r0,#0xe               ;947
000060  e7e5              B        |L29.46|
                  |L29.98|
000062  48cf              LDR      r0,|L29.928|
000064  7800              LDRB     r0,[r0,#0]            ;948  ; CardType
000066  2802              CMP      r0,#2                 ;948
000068  d108              BNE      |L29.124|
00006a  0204              LSLS     r4,r0,#8              ;950
00006c  e9dd0106          LDRD     r0,r1,[sp,#0x18]      ;951
000070  0a40              LSRS     r0,r0,#9              ;951
000072  ea4050c1          ORR      r0,r0,r1,LSL #23      ;951
000076  1249              ASRS     r1,r1,#9              ;951
000078  e9cd0106          STRD     r0,r1,[sp,#0x18]      ;951
                  |L29.124|
00007c  2c00              CMP      r4,#0                 ;953
00007e  dd1f              BLE      |L29.192|
000080  f5b46f00          CMP      r4,#0x800             ;953
000084  dc1c              BGT      |L29.192|
000086  1e60              SUBS     r0,r4,#1              ;953
000088  4020              ANDS     r0,r0,r4              ;953
00008a  b9c8              CBNZ     r0,|L29.192|
00008c  4620              MOV      r0,r4                 ;955
00008e  f7fffffe          BL       convert_from_bytes_to_power_of_two
000092  9003              STR      r0,[sp,#0xc]          ;955
000094  48c3              LDR      r0,|L29.932|
000096  6004              STR      r4,[r0,#0]            ;957  ; SDIO_CmdInitStructure
000098  2010              MOVS     r0,#0x10              ;958
00009a  49c2              LDR      r1,|L29.932|
00009c  6048              STR      r0,[r1,#4]            ;958  ; SDIO_CmdInitStructure
00009e  2040              MOVS     r0,#0x40              ;959
0000a0  6088              STR      r0,[r1,#8]            ;959  ; SDIO_CmdInitStructure
0000a2  2000              MOVS     r0,#0                 ;960
0000a4  60c8              STR      r0,[r1,#0xc]          ;960  ; SDIO_CmdInitStructure
0000a6  f44f6080          MOV      r0,#0x400             ;961
0000aa  6108              STR      r0,[r1,#0x10]         ;961  ; SDIO_CmdInitStructure
0000ac  4608              MOV      r0,r1                 ;962
0000ae  f7fffffe          BL       SDIO_SendCommand
0000b2  2010              MOVS     r0,#0x10              ;964
0000b4  f7fffffe          BL       CmdResp1Error
0000b8  4606              MOV      r6,r0                 ;964
0000ba  b11e              CBZ      r6,|L29.196|
0000bc  4630              MOV      r0,r6                 ;966
0000be  e7b6              B        |L29.46|
                  |L29.192|
0000c0  2026              MOVS     r0,#0x26              ;968
0000c2  e7b4              B        |L29.46|
                  |L29.196|
0000c4  2f01              CMP      r7,#1                 ;969
0000c6  d96f              BLS      |L29.424|
0000c8  fb07f004          MUL      r0,r7,r4              ;971
0000cc  f1b07f00          CMP      r0,#0x2000000         ;971
0000d0  d301              BCC      |L29.214|
0000d2  2026              MOVS     r0,#0x26              ;971
0000d4  e7ab              B        |L29.46|
                  |L29.214|
0000d6  48b2              LDR      r0,|L29.928|
0000d8  7800              LDRB     r0,[r0,#0]            ;972  ; CardType
0000da  b138              CBZ      r0,|L29.236|
0000dc  48b0              LDR      r0,|L29.928|
0000de  7800              LDRB     r0,[r0,#0]            ;972  ; CardType
0000e0  2801              CMP      r0,#1                 ;972
0000e2  d003              BEQ      |L29.236|
0000e4  48ae              LDR      r0,|L29.928|
0000e6  7800              LDRB     r0,[r0,#0]            ;972  ; CardType
0000e8  2802              CMP      r0,#2                 ;972
0000ea  d12d              BNE      |L29.328|
                  |L29.236|
0000ec  48ae              LDR      r0,|L29.936|
0000ee  8800              LDRH     r0,[r0,#0]            ;975  ; RCA
0000f0  0400              LSLS     r0,r0,#16             ;975
0000f2  49ac              LDR      r1,|L29.932|
0000f4  6008              STR      r0,[r1,#0]            ;975  ; SDIO_CmdInitStructure
0000f6  2037              MOVS     r0,#0x37              ;976
0000f8  6048              STR      r0,[r1,#4]            ;976  ; SDIO_CmdInitStructure
0000fa  2040              MOVS     r0,#0x40              ;977
0000fc  6088              STR      r0,[r1,#8]            ;977  ; SDIO_CmdInitStructure
0000fe  2000              MOVS     r0,#0                 ;978
000100  60c8              STR      r0,[r1,#0xc]          ;978  ; SDIO_CmdInitStructure
000102  f44f6080          MOV      r0,#0x400             ;979
000106  6108              STR      r0,[r1,#0x10]         ;979  ; SDIO_CmdInitStructure
000108  4608              MOV      r0,r1                 ;980
00010a  f7fffffe          BL       SDIO_SendCommand
00010e  2037              MOVS     r0,#0x37              ;982
000110  f7fffffe          BL       CmdResp1Error
000114  4606              MOV      r6,r0                 ;982
000116  b10e              CBZ      r6,|L29.284|
000118  4630              MOV      r0,r6                 ;984
00011a  e788              B        |L29.46|
                  |L29.284|
00011c  48a1              LDR      r0,|L29.932|
00011e  6007              STR      r7,[r0,#0]            ;986  ; SDIO_CmdInitStructure
000120  2017              MOVS     r0,#0x17              ;987
000122  49a0              LDR      r1,|L29.932|
000124  6048              STR      r0,[r1,#4]            ;987  ; SDIO_CmdInitStructure
000126  2040              MOVS     r0,#0x40              ;988
000128  6088              STR      r0,[r1,#8]            ;988  ; SDIO_CmdInitStructure
00012a  2000              MOVS     r0,#0                 ;989
00012c  60c8              STR      r0,[r1,#0xc]          ;989  ; SDIO_CmdInitStructure
00012e  f44f6080          MOV      r0,#0x400             ;990
000132  6108              STR      r0,[r1,#0x10]         ;990  ; SDIO_CmdInitStructure
000134  4608              MOV      r0,r1                 ;991
000136  f7fffffe          BL       SDIO_SendCommand
00013a  2017              MOVS     r0,#0x17              ;993
00013c  f7fffffe          BL       CmdResp1Error
000140  4606              MOV      r6,r0                 ;993
000142  b10e              CBZ      r6,|L29.328|
000144  4630              MOV      r0,r6                 ;995
000146  e772              B        |L29.46|
                  |L29.328|
000148  4996              LDR      r1,|L29.932|
00014a  9806              LDR      r0,[sp,#0x18]         ;999
00014c  6008              STR      r0,[r1,#0]            ;999  ; SDIO_CmdInitStructure
00014e  2019              MOVS     r0,#0x19              ;1000
000150  6048              STR      r0,[r1,#4]            ;1000  ; SDIO_CmdInitStructure
000152  2040              MOVS     r0,#0x40              ;1001
000154  6088              STR      r0,[r1,#8]            ;1001  ; SDIO_CmdInitStructure
000156  2000              MOVS     r0,#0                 ;1002
000158  60c8              STR      r0,[r1,#0xc]          ;1002  ; SDIO_CmdInitStructure
00015a  f44f6080          MOV      r0,#0x400             ;1003
00015e  6108              STR      r0,[r1,#0x10]         ;1003  ; SDIO_CmdInitStructure
000160  4608              MOV      r0,r1                 ;1004
000162  f7fffffe          BL       SDIO_SendCommand
000166  2019              MOVS     r0,#0x19              ;1006
000168  f7fffffe          BL       CmdResp1Error
00016c  4606              MOV      r6,r0                 ;1006
00016e  b10e              CBZ      r6,|L29.372|
000170  4630              MOV      r0,r6                 ;1008
000172  e75c              B        |L29.46|
                  |L29.372|
000174  9803              LDR      r0,[sp,#0xc]          ;1010
000176  0100              LSLS     r0,r0,#4              ;1010
000178  4988              LDR      r1,|L29.924|
00017a  6088              STR      r0,[r1,#8]            ;1010  ; SDIO_DataInitStructure
00017c  fb07f004          MUL      r0,r7,r4              ;1011
000180  6048              STR      r0,[r1,#4]            ;1011  ; SDIO_DataInitStructure
000182  f04f30ff          MOV      r0,#0xffffffff        ;1012
000186  6008              STR      r0,[r1,#0]            ;1012  ; SDIO_DataInitStructure
000188  2001              MOVS     r0,#1                 ;1013
00018a  6148              STR      r0,[r1,#0x14]         ;1013  ; SDIO_DataInitStructure
00018c  2000              MOVS     r0,#0                 ;1014
00018e  60c8              STR      r0,[r1,#0xc]          ;1014  ; SDIO_DataInitStructure
000190  6108              STR      r0,[r1,#0x10]         ;1015  ; SDIO_DataInitStructure
000192  4608              MOV      r0,r1                 ;1016
000194  f7fffffe          BL       SDIO_DataConfig
000198  4884              LDR      r0,|L29.940|
00019a  7800              LDRB     r0,[r0,#0]            ;1018  ; DeviceMode
00019c  2800              CMP      r0,#0                 ;1018
00019e  d171              BNE      |L29.644|
0001a0  1e45              SUBS     r5,r0,#1              ;1020
0001a2  f7fffffe          BL       INTX_DISABLE
0001a6  e040              B        |L29.554|
                  |L29.424|
0001a8  e0de              B        |L29.872|
                  |L29.426|
0001aa  487b              LDR      r0,|L29.920|
0001ac  6b40              LDR      r0,[r0,#0x34]         ;1024
0001ae  f4004080          AND      r0,r0,#0x4000         ;1024
0001b2  b3a8              CBZ      r0,|L29.544|
0001b4  ebab0008          SUB      r0,r11,r8             ;1026
0001b8  2820              CMP      r0,#0x20              ;1026
0001ba  d21e              BCS      |L29.506|
0001bc  ebab0008          SUB      r0,r11,r8             ;1028
0001c0  f0000003          AND      r0,r0,#3              ;1028
0001c4  b918              CBNZ     r0,|L29.462|
0001c6  ebab0008          SUB      r0,r11,r8             ;1028
0001ca  0880              LSRS     r0,r0,#2              ;1028
0001cc  e003              B        |L29.470|
                  |L29.462|
0001ce  ebab0008          SUB      r0,r11,r8             ;1028
0001d2  0880              LSRS     r0,r0,#2              ;1028
0001d4  1c40              ADDS     r0,r0,#1              ;1028
                  |L29.470|
0001d6  9001              STR      r0,[sp,#4]            ;1028
0001d8  f04f0900          MOV      r9,#0                 ;1029
0001dc  e009              B        |L29.498|
                  |L29.478|
0001de  f8da0000          LDR      r0,[r10,#0]           ;1031
0001e2  f7fffffe          BL       SDIO_WriteData
0001e6  f1090901          ADD      r9,r9,#1              ;1029
0001ea  f10a0a04          ADD      r10,r10,#4            ;1029
0001ee  f1080804          ADD      r8,r8,#4              ;1029
                  |L29.498|
0001f2  9801              LDR      r0,[sp,#4]            ;1029
0001f4  4581              CMP      r9,r0                 ;1029
0001f6  d3f2              BCC      |L29.478|
0001f8  e00f              B        |L29.538|
                  |L29.506|
0001fa  f04f0900          MOV      r9,#0                 ;1035
0001fe  e005              B        |L29.524|
                  |L29.512|
000200  f85a0029          LDR      r0,[r10,r9,LSL #2]    ;1037
000204  f7fffffe          BL       SDIO_WriteData
000208  f1090901          ADD      r9,r9,#1              ;1035
                  |L29.524|
00020c  f1b90f08          CMP      r9,#8                 ;1035
000210  d3f6              BCC      |L29.512|
000212  f10a0a20          ADD      r10,r10,#0x20         ;1039
000216  f1080820          ADD      r8,r8,#0x20           ;1040
                  |L29.538|
00021a  f06f4540          MVN      r5,#0xc0000000        ;1042
00021e  e004              B        |L29.554|
                  |L29.544|
000220  e7ff              B        |L29.546|
                  |L29.546|
000222  b90d              CBNZ     r5,|L29.552|
000224  2004              MOVS     r0,#4                 ;1045
000226  e702              B        |L29.46|
                  |L29.552|
000228  1e6d              SUBS     r5,r5,#1              ;1046
                  |L29.554|
00022a  485b              LDR      r0,|L29.920|
00022c  6b40              LDR      r0,[r0,#0x34]         ;1022
00022e  f240311a          MOV      r1,#0x31a             ;1022
000232  4008              ANDS     r0,r0,r1              ;1022
000234  2800              CMP      r0,#0                 ;1022
000236  d0b8              BEQ      |L29.426|
000238  2008              MOVS     r0,#8                 ;1049
00023a  f7fffffe          BL       SDIO_GetFlagStatus
00023e  b120              CBZ      r0,|L29.586|
000240  2008              MOVS     r0,#8                 ;1051
000242  f7fffffe          BL       SDIO_ClearFlag
000246  2004              MOVS     r0,#4                 ;1052
000248  e6f1              B        |L29.46|
                  |L29.586|
00024a  2002              MOVS     r0,#2                 ;1053
00024c  f7fffffe          BL       SDIO_GetFlagStatus
000250  b120              CBZ      r0,|L29.604|
000252  2002              MOVS     r0,#2                 ;1055
000254  f7fffffe          BL       SDIO_ClearFlag
000258  2002              MOVS     r0,#2                 ;1056
00025a  e6e8              B        |L29.46|
                  |L29.604|
00025c  2010              MOVS     r0,#0x10              ;1057
00025e  f7fffffe          BL       SDIO_GetFlagStatus
000262  b120              CBZ      r0,|L29.622|
000264  2010              MOVS     r0,#0x10              ;1059
000266  f7fffffe          BL       SDIO_ClearFlag
00026a  2005              MOVS     r0,#5                 ;1060
00026c  e6df              B        |L29.46|
                  |L29.622|
00026e  f44f7000          MOV      r0,#0x200             ;1061
000272  f7fffffe          BL       SDIO_GetFlagStatus
000276  b130              CBZ      r0,|L29.646|
000278  f44f7000          MOV      r0,#0x200             ;1063
00027c  f7fffffe          BL       SDIO_ClearFlag
000280  2007              MOVS     r0,#7                 ;1064
000282  e6d4              B        |L29.46|
                  |L29.644|
000284  e02c              B        |L29.736|
                  |L29.646|
000286  f44f7080          MOV      r0,#0x100             ;1066
00028a  f7fffffe          BL       SDIO_GetFlagStatus
00028e  b300              CBZ      r0,|L29.722|
000290  4843              LDR      r0,|L29.928|
000292  7800              LDRB     r0,[r0,#0]            ;1068  ; CardType
000294  b138              CBZ      r0,|L29.678|
000296  4842              LDR      r0,|L29.928|
000298  7800              LDRB     r0,[r0,#0]            ;1068  ; CardType
00029a  2801              CMP      r0,#1                 ;1068
00029c  d003              BEQ      |L29.678|
00029e  4840              LDR      r0,|L29.928|
0002a0  7800              LDRB     r0,[r0,#0]            ;1068  ; CardType
0002a2  2802              CMP      r0,#2                 ;1068
0002a4  d115              BNE      |L29.722|
                  |L29.678|
0002a6  2000              MOVS     r0,#0                 ;1070
0002a8  493e              LDR      r1,|L29.932|
0002aa  6008              STR      r0,[r1,#0]            ;1070  ; SDIO_CmdInitStructure
0002ac  200c              MOVS     r0,#0xc               ;1071
0002ae  6048              STR      r0,[r1,#4]            ;1071  ; SDIO_CmdInitStructure
0002b0  2040              MOVS     r0,#0x40              ;1072
0002b2  6088              STR      r0,[r1,#8]            ;1072  ; SDIO_CmdInitStructure
0002b4  2000              MOVS     r0,#0                 ;1073
0002b6  60c8              STR      r0,[r1,#0xc]          ;1073  ; SDIO_CmdInitStructure
0002b8  f44f6080          MOV      r0,#0x400             ;1074
0002bc  6108              STR      r0,[r1,#0x10]         ;1074  ; SDIO_CmdInitStructure
0002be  4608              MOV      r0,r1                 ;1075
0002c0  f7fffffe          BL       SDIO_SendCommand
0002c4  200c              MOVS     r0,#0xc               ;1077
0002c6  f7fffffe          BL       CmdResp1Error
0002ca  4606              MOV      r6,r0                 ;1077
0002cc  b10e              CBZ      r6,|L29.722|
0002ce  4630              MOV      r0,r6                 ;1078
0002d0  e6ad              B        |L29.46|
                  |L29.722|
0002d2  f7fffffe          BL       INTX_ENABLE
0002d6  f24050ff          MOV      r0,#0x5ff             ;1082
0002da  f7fffffe          BL       SDIO_ClearFlag
0002de  e043              B        |L29.872|
                  |L29.736|
0002e0  4832              LDR      r0,|L29.940|
0002e2  7800              LDRB     r0,[r0,#0]            ;1083  ; DeviceMode
0002e4  2801              CMP      r0,#1                 ;1083
0002e6  d13f              BNE      |L29.872|
0002e8  fb07f104          MUL      r1,r7,r4              ;1085
0002ec  2210              MOVS     r2,#0x10              ;1085
0002ee  9804              LDR      r0,[sp,#0x10]         ;1085
0002f0  f7fffffe          BL       SD_DMA_Config
0002f4  2000              MOVS     r0,#0                 ;1086
0002f6  492e              LDR      r1,|L29.944|
0002f8  7008              STRB     r0,[r1,#0]            ;1086
0002fa  2001              MOVS     r0,#1                 ;1087
0002fc  492d              LDR      r1,|L29.948|
0002fe  7008              STRB     r0,[r1,#0]            ;1087
000300  2000              MOVS     r0,#0                 ;1088
000302  492d              LDR      r1,|L29.952|
000304  7008              STRB     r0,[r1,#0]            ;1088
000306  4824              LDR      r0,|L29.920|
000308  6bc0              LDR      r0,[r0,#0x3c]         ;1089
00030a  f240311a          MOV      r1,#0x31a             ;1089
00030e  4308              ORRS     r0,r0,r1              ;1089
000310  4921              LDR      r1,|L29.920|
000312  63c8              STR      r0,[r1,#0x3c]         ;1089
000314  4608              MOV      r0,r1                 ;1090
000316  6ac0              LDR      r0,[r0,#0x2c]         ;1090
000318  f0400008          ORR      r0,r0,#8              ;1090
00031c  62c8              STR      r0,[r1,#0x2c]         ;1090
00031e  f04f35ff          MOV      r5,#0xffffffff        ;1091
000322  e000              B        |L29.806|
                  |L29.804|
000324  1e6d              SUBS     r5,r5,#1              ;1092
                  |L29.806|
000326  4825              LDR      r0,|L29.956|
000328  6800              LDR      r0,[r0,#0]            ;1092
00032a  f4005000          AND      r0,r0,#0x2000         ;1092
00032e  b908              CBNZ     r0,|L29.820|
000330  2d00              CMP      r5,#0                 ;1092
000332  d1f7              BNE      |L29.804|
                  |L29.820|
000334  b91d              CBNZ     r5,|L29.830|
000336  f7fffffe          BL       SD_Init
00033a  2004              MOVS     r0,#4                 ;1096
00033c  e677              B        |L29.46|
                  |L29.830|
00033e  f04f35ff          MOV      r5,#0xffffffff        ;1098
000342  e000              B        |L29.838|
                  |L29.836|
000344  1e6d              SUBS     r5,r5,#1              ;1099
                  |L29.838|
000346  481c              LDR      r0,|L29.952|
000348  7800              LDRB     r0,[r0,#0]            ;1099  ; TransferEnd
00034a  b920              CBNZ     r0,|L29.854|
00034c  4818              LDR      r0,|L29.944|
00034e  7800              LDRB     r0,[r0,#0]            ;1099  ; TransferError
000350  b908              CBNZ     r0,|L29.854|
000352  2d00              CMP      r5,#0                 ;1099
000354  d1f6              BNE      |L29.836|
                  |L29.854|
000356  b90d              CBNZ     r5,|L29.860|
000358  2004              MOVS     r0,#4                 ;1100
00035a  e668              B        |L29.46|
                  |L29.860|
00035c  4814              LDR      r0,|L29.944|
00035e  7800              LDRB     r0,[r0,#0]            ;1101  ; TransferError
000360  b110              CBZ      r0,|L29.872|
000362  4813              LDR      r0,|L29.944|
000364  7800              LDRB     r0,[r0,#0]            ;1101  ; TransferError
000366  e662              B        |L29.46|
                  |L29.872|
000368  f24050ff          MOV      r0,#0x5ff             ;1104
00036c  f7fffffe          BL       SDIO_ClearFlag
000370  a802              ADD      r0,sp,#8              ;1105
000372  f7fffffe          BL       IsCardProgramming
000376  4606              MOV      r6,r0                 ;1105
000378  e003              B        |L29.898|
                  |L29.890|
00037a  a802              ADD      r0,sp,#8              ;1108
00037c  f7fffffe          BL       IsCardProgramming
000380  4606              MOV      r6,r0                 ;1108
                  |L29.898|
000382  b93e              CBNZ     r6,|L29.916|
000384  f89d0008          LDRB     r0,[sp,#8]            ;1106
000388  2807              CMP      r0,#7                 ;1106
00038a  d0f6              BEQ      |L29.890|
00038c  f89d0008          LDRB     r0,[sp,#8]            ;1106
000390  2806              CMP      r0,#6                 ;1106
000392  d0f2              BEQ      |L29.890|
                  |L29.916|
000394  4630              MOV      r0,r6                 ;1110
000396  e64a              B        |L29.46|
;;;1112   //SDIO中断服务函数		  
                          ENDP

                  |L29.920|
                          DCD      0x40018000
                  |L29.924|
                          DCD      SDIO_DataInitStructure
                  |L29.928|
                          DCD      CardType
                  |L29.932|
                          DCD      SDIO_CmdInitStructure
                  |L29.936|
                          DCD      ||RCA||
                  |L29.940|
                          DCD      DeviceMode
                  |L29.944|
                          DCD      TransferError
                  |L29.948|
                          DCD      StopCondition
                  |L29.952|
                          DCD      TransferEnd
                  |L29.956|
                          DCD      0x40020400

                          AREA ||i.convert_from_bytes_to_power_of_two||, CODE, READONLY, ALIGN=1

                  convert_from_bytes_to_power_of_two PROC
;;;1521   //返回值:以2为底的指数值
;;;1522   u8 convert_from_bytes_to_power_of_two(u16 NumberOfBytes)
000000  4601              MOV      r1,r0
;;;1523   {
;;;1524   	u8 count=0;
000002  2000              MOVS     r0,#0
;;;1525   	while(NumberOfBytes!=1)
000004  e002              B        |L30.12|
                  |L30.6|
;;;1526   	{
;;;1527   		NumberOfBytes>>=1;
000006  1049              ASRS     r1,r1,#1
;;;1528   		count++;
000008  1c42              ADDS     r2,r0,#1
00000a  b2d0              UXTB     r0,r2
                  |L30.12|
00000c  2901              CMP      r1,#1                 ;1525
00000e  d1fa              BNE      |L30.6|
;;;1529   	}
;;;1530   	return count;
;;;1531   } 	 
000010  4770              BX       lr
;;;1532   //配置SDIO DMA  
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  SDIO_InitStructure
                          %        24
                  SDIO_CmdInitStructure
                          %        20
                  SDIO_DataInitStructure
                          %        24
                  CSD_Tab
                          %        16
                  CID_Tab
                          %        20
                  SDCardInfo
                          %        88
                  SDIO_DATA_BUFFER
                          %        512

                          AREA ||.data||, DATA, ALIGN=2

                  CardType
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  ||RCA||
                          DCD      0x00000000
                  DeviceMode
000008  01                DCB      0x01
                  StopCondition
000009  00                DCB      0x00
                  TransferError
00000a  00                DCB      0x00
                  TransferEnd
00000b  00                DCB      0x00
                  tempbuff
                          DCD      0x00000000
