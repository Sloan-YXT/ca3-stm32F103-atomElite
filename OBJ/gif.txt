; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\gif.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\gif.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\ATK-ESP8266 -I..\CORE -I..\FATFS\src -I..\FATFS\exfuns -I..\HARDWARE\24CXX -I..\HARDWARE\IIC -I..\HARDWARE\KEY -I..\HARDWARE\LCD -I..\HARDWARE\LED -I..\HARDWARE\SDIO -I..\HARDWARE\SPI -I..\HARDWARE\TIMER -I..\HARDWARE\TOUCH -I..\HARDWARE\USART3 -I..\HARDWARE\W25QXX -I..\MALLOC -I..\STM32F10x_FWLib\inc -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\TEXT -I..\USER -I..\USMART -I..\PICTURE -I..\HARDWARE\OV7725 -I..\HARDWARE\EXTI -I..\HARDWARE\BEEP -I..\HARDWARE\DHT11 -I.\RTE\_Target_1 -ID:\Users\86132\AppData\Local\Arm\Packs\Keil\STM32F1xx_DFP\2.3.0\Device\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=529 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\gif.crf ..\PICTURE\gif.c]
                          THUMB

                          AREA ||i.gif_check_head||, CODE, READONLY, ALIGN=1

                  gif_check_head PROC
;;;43     //返回值:0,是GIF89a/87a;非零,非GIF89a/87a
;;;44     u8 gif_check_head(FIL *file)
000000  b53e              PUSH     {r1-r5,lr}
;;;45     {
000002  4604              MOV      r4,r0
;;;46     	u8 gifversion[6];
;;;47     	u32 readed;
;;;48     	u8 res;
;;;49     	res=f_read(file,gifversion,6,(UINT*)&readed);
000004  466b              MOV      r3,sp
000006  2206              MOVS     r2,#6
000008  a901              ADD      r1,sp,#4
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       f_read
000010  4605              MOV      r5,r0
;;;50     	if(res)return 1;	   
000012  b10d              CBZ      r5,|L1.24|
000014  2001              MOVS     r0,#1
                  |L1.22|
;;;51     	if((gifversion[0]!='G')||(gifversion[1]!='I')||(gifversion[2]!='F')||
;;;52     	(gifversion[3]!='8')||((gifversion[4]!='7')&&(gifversion[4]!='9'))||
;;;53     	(gifversion[5]!='a'))return 2;
;;;54     	else return 0;	
;;;55     }
000016  bd3e              POP      {r1-r5,pc}
                  |L1.24|
000018  f89d0004          LDRB     r0,[sp,#4]            ;51
00001c  2847              CMP      r0,#0x47              ;51
00001e  d117              BNE      |L1.80|
000020  f89d0005          LDRB     r0,[sp,#5]            ;51
000024  2849              CMP      r0,#0x49              ;51
000026  d113              BNE      |L1.80|
000028  f89d0006          LDRB     r0,[sp,#6]            ;51
00002c  2846              CMP      r0,#0x46              ;51
00002e  d10f              BNE      |L1.80|
000030  f89d0007          LDRB     r0,[sp,#7]            ;52
000034  2838              CMP      r0,#0x38              ;52
000036  d10b              BNE      |L1.80|
000038  f89d0008          LDRB     r0,[sp,#8]            ;52
00003c  2837              CMP      r0,#0x37              ;52
00003e  d003              BEQ      |L1.72|
000040  f89d0008          LDRB     r0,[sp,#8]            ;52
000044  2839              CMP      r0,#0x39              ;52
000046  d103              BNE      |L1.80|
                  |L1.72|
000048  f89d0009          LDRB     r0,[sp,#9]            ;53
00004c  2861              CMP      r0,#0x61              ;53
00004e  d001              BEQ      |L1.84|
                  |L1.80|
000050  2002              MOVS     r0,#2                 ;53
000052  e7e0              B        |L1.22|
                  |L1.84|
000054  2000              MOVS     r0,#0                 ;54
000056  e7de              B        |L1.22|
;;;56     //将RGB888转为RGB565
                          ENDP


                          AREA ||i.gif_clear2bkcolor||, CODE, READONLY, ALIGN=2

                  gif_clear2bkcolor PROC
;;;385    //pimge:图像描述块信息
;;;386    void gif_clear2bkcolor(u16 x,u16 y,gif89a* gif,ImageScreenDescriptor pimge)
000000  b40f              PUSH     {r0-r3}
;;;387    {
000002  e92d4ff8          PUSH     {r3-r11,lr}
000006  4607              MOV      r7,r0
000008  4688              MOV      r8,r1
00000a  4614              MOV      r4,r2
;;;388    	u16 x0,y0,x1,y1;
;;;389    	u16 color=gif->colortbl[gif->gifLSD.bkcindex];
00000c  7961              LDRB     r1,[r4,#5]
00000e  f1040010          ADD      r0,r4,#0x10
000012  eb000041          ADD      r0,r0,r1,LSL #1
000016  f8b0b000          LDRH     r11,[r0,#0]
;;;390    	if(pimge.width==0||pimge.height==0)return;//直接不用清除了,原来没有图像!!
00001a  f8bd0038          LDRH     r0,[sp,#0x38]
00001e  b110              CBZ      r0,|L2.38|
000020  f8bd003a          LDRH     r0,[sp,#0x3a]
000024  b918              CBNZ     r0,|L2.46|
                  |L2.38|
;;;391    	if(gif->gifISD.yoff>pimge.yoff)
;;;392    	{
;;;393       		x0=x+pimge.xoff;
;;;394    		y0=y+pimge.yoff;
;;;395    		x1=x+pimge.xoff+pimge.width-1;;
;;;396    		y1=y+gif->gifISD.yoff-1;
;;;397    		if(x0<x1&&y0<y1&&x1<320&&y1<320)pic_phy.fill(x0,y0,x1,y1,color); //设定xy,的范围不能太大.
;;;398    	}
;;;399    	if(gif->gifISD.xoff>pimge.xoff)
;;;400    	{
;;;401       		x0=x+pimge.xoff;
;;;402    		y0=y+pimge.yoff;
;;;403    		x1=x+gif->gifISD.xoff-1;;
;;;404    		y1=y+pimge.yoff+pimge.height-1;
;;;405    		if(x0<x1&&y0<y1&&x1<320&&y1<320)pic_phy.fill(x0,y0,x1,y1,color);
;;;406    	}
;;;407    	if((gif->gifISD.yoff+gif->gifISD.height)<(pimge.yoff+pimge.height))
;;;408    	{
;;;409       		x0=x+pimge.xoff;
;;;410    		y0=y+gif->gifISD.yoff+gif->gifISD.height-1;
;;;411    		x1=x+pimge.xoff+pimge.width-1;;
;;;412    		y1=y+pimge.yoff+pimge.height-1;
;;;413    		if(x0<x1&&y0<y1&&x1<320&&y1<320)pic_phy.fill(x0,y0,x1,y1,color);
;;;414    	}
;;;415     	if((gif->gifISD.xoff+gif->gifISD.width)<(pimge.xoff+pimge.width))
;;;416    	{
;;;417       		x0=x+gif->gifISD.xoff+gif->gifISD.width-1;
;;;418    		y0=y+pimge.yoff;
;;;419    		x1=x+pimge.xoff+pimge.width-1;;
;;;420    		y1=y+pimge.yoff+pimge.height-1;
;;;421    		if(x0<x1&&y0<y1&&x1<320&&y1<320)pic_phy.fill(x0,y0,x1,y1,color);
;;;422    	}   
;;;423    }
000026  e8bd0ff8          POP      {r3-r11}
00002a  f85dfb14          LDR      pc,[sp],#0x14
                  |L2.46|
00002e  f8b40009          LDRH     r0,[r4,#9]            ;391
000032  f8bd1036          LDRH     r1,[sp,#0x36]         ;391
000036  4288              CMP      r0,r1                 ;391
000038  dd2a              BLE      |L2.144|
00003a  f8bd0034          LDRH     r0,[sp,#0x34]         ;393
00003e  4438              ADD      r0,r0,r7              ;393
000040  fa1ff980          UXTH     r9,r0                 ;393
000044  f8bd0036          LDRH     r0,[sp,#0x36]         ;394
000048  4440              ADD      r0,r0,r8              ;394
00004a  fa1ffa80          UXTH     r10,r0                ;394
00004e  f8bd0034          LDRH     r0,[sp,#0x34]         ;395
000052  4438              ADD      r0,r0,r7              ;395
000054  f8bd1038          LDRH     r1,[sp,#0x38]         ;395
000058  4408              ADD      r0,r0,r1              ;395
00005a  1e40              SUBS     r0,r0,#1              ;395
00005c  b285              UXTH     r5,r0                 ;395
00005e  f8b40009          LDRH     r0,[r4,#9]            ;396
000062  4440              ADD      r0,r0,r8              ;396
000064  1e40              SUBS     r0,r0,#1              ;396
000066  b286              UXTH     r6,r0                 ;396
000068  45a9              CMP      r9,r5                 ;397
00006a  da11              BGE      |L2.144|
00006c  45b2              CMP      r10,r6                ;397
00006e  da0f              BGE      |L2.144|
000070  f5b57fa0          CMP      r5,#0x140             ;397
000074  da0c              BGE      |L2.144|
000076  f5b67fa0          CMP      r6,#0x140             ;397
00007a  da09              BGE      |L2.144|
00007c  485c              LDR      r0,|L2.496|
00007e  f8cdb000          STR      r11,[sp,#0]           ;397
000082  4633              MOV      r3,r6                 ;397
000084  462a              MOV      r2,r5                 ;397
000086  4651              MOV      r1,r10                ;397
000088  f8d0c008          LDR      r12,[r0,#8]           ;397  ; pic_phy
00008c  4648              MOV      r0,r9                 ;397
00008e  47e0              BLX      r12                   ;397
                  |L2.144|
000090  f8b40007          LDRH     r0,[r4,#7]            ;399
000094  f8bd1034          LDRH     r1,[sp,#0x34]         ;399
000098  4288              CMP      r0,r1                 ;399
00009a  dd2a              BLE      |L2.242|
00009c  f8bd0034          LDRH     r0,[sp,#0x34]         ;401
0000a0  4438              ADD      r0,r0,r7              ;401
0000a2  fa1ff980          UXTH     r9,r0                 ;401
0000a6  f8bd0036          LDRH     r0,[sp,#0x36]         ;402
0000aa  4440              ADD      r0,r0,r8              ;402
0000ac  fa1ffa80          UXTH     r10,r0                ;402
0000b0  f8b40007          LDRH     r0,[r4,#7]            ;403
0000b4  4438              ADD      r0,r0,r7              ;403
0000b6  1e40              SUBS     r0,r0,#1              ;403
0000b8  b285              UXTH     r5,r0                 ;403
0000ba  f8bd0036          LDRH     r0,[sp,#0x36]         ;404
0000be  4440              ADD      r0,r0,r8              ;404
0000c0  f8bd103a          LDRH     r1,[sp,#0x3a]         ;404
0000c4  4408              ADD      r0,r0,r1              ;404
0000c6  1e40              SUBS     r0,r0,#1              ;404
0000c8  b286              UXTH     r6,r0                 ;404
0000ca  45a9              CMP      r9,r5                 ;405
0000cc  da11              BGE      |L2.242|
0000ce  45b2              CMP      r10,r6                ;405
0000d0  da0f              BGE      |L2.242|
0000d2  f5b57fa0          CMP      r5,#0x140             ;405
0000d6  da0c              BGE      |L2.242|
0000d8  f5b67fa0          CMP      r6,#0x140             ;405
0000dc  da09              BGE      |L2.242|
0000de  4844              LDR      r0,|L2.496|
0000e0  f8cdb000          STR      r11,[sp,#0]           ;405
0000e4  4633              MOV      r3,r6                 ;405
0000e6  462a              MOV      r2,r5                 ;405
0000e8  4651              MOV      r1,r10                ;405
0000ea  f8d0c008          LDR      r12,[r0,#8]           ;405  ; pic_phy
0000ee  4648              MOV      r0,r9                 ;405
0000f0  47e0              BLX      r12                   ;405
                  |L2.242|
0000f2  f8b41009          LDRH     r1,[r4,#9]            ;407
0000f6  f8b4000d          LDRH     r0,[r4,#0xd]          ;407
0000fa  4408              ADD      r0,r0,r1              ;407
0000fc  f8bd1036          LDRH     r1,[sp,#0x36]         ;407
000100  f8bd203a          LDRH     r2,[sp,#0x3a]         ;407
000104  4411              ADD      r1,r1,r2              ;407
000106  4288              CMP      r0,r1                 ;407
000108  da32              BGE      |L2.368|
00010a  f8bd0034          LDRH     r0,[sp,#0x34]         ;409
00010e  4438              ADD      r0,r0,r7              ;409
000110  fa1ff980          UXTH     r9,r0                 ;409
000114  f8b40009          LDRH     r0,[r4,#9]            ;410
000118  eb000108          ADD      r1,r0,r8              ;410
00011c  f8b4000d          LDRH     r0,[r4,#0xd]          ;410
000120  4408              ADD      r0,r0,r1              ;410
000122  1e40              SUBS     r0,r0,#1              ;410
000124  fa1ffa80          UXTH     r10,r0                ;410
000128  f8bd0034          LDRH     r0,[sp,#0x34]         ;411
00012c  4438              ADD      r0,r0,r7              ;411
00012e  f8bd1038          LDRH     r1,[sp,#0x38]         ;411
000132  4408              ADD      r0,r0,r1              ;411
000134  1e40              SUBS     r0,r0,#1              ;411
000136  b285              UXTH     r5,r0                 ;411
000138  f8bd0036          LDRH     r0,[sp,#0x36]         ;412
00013c  4440              ADD      r0,r0,r8              ;412
00013e  f8bd103a          LDRH     r1,[sp,#0x3a]         ;412
000142  4408              ADD      r0,r0,r1              ;412
000144  1e40              SUBS     r0,r0,#1              ;412
000146  b286              UXTH     r6,r0                 ;412
000148  45a9              CMP      r9,r5                 ;413
00014a  da11              BGE      |L2.368|
00014c  45b2              CMP      r10,r6                ;413
00014e  da0f              BGE      |L2.368|
000150  f5b57fa0          CMP      r5,#0x140             ;413
000154  da0c              BGE      |L2.368|
000156  f5b67fa0          CMP      r6,#0x140             ;413
00015a  da09              BGE      |L2.368|
00015c  4824              LDR      r0,|L2.496|
00015e  f8cdb000          STR      r11,[sp,#0]           ;413
000162  4633              MOV      r3,r6                 ;413
000164  462a              MOV      r2,r5                 ;413
000166  4651              MOV      r1,r10                ;413
000168  f8d0c008          LDR      r12,[r0,#8]           ;413  ; pic_phy
00016c  4648              MOV      r0,r9                 ;413
00016e  47e0              BLX      r12                   ;413
                  |L2.368|
000170  f8b41007          LDRH     r1,[r4,#7]            ;415
000174  f8b4000b          LDRH     r0,[r4,#0xb]          ;415
000178  4408              ADD      r0,r0,r1              ;415
00017a  f8bd1034          LDRH     r1,[sp,#0x34]         ;415
00017e  f8bd2038          LDRH     r2,[sp,#0x38]         ;415
000182  4411              ADD      r1,r1,r2              ;415
000184  4288              CMP      r0,r1                 ;415
000186  da31              BGE      |L2.492|
000188  f8b40007          LDRH     r0,[r4,#7]            ;417
00018c  19c1              ADDS     r1,r0,r7              ;417
00018e  f8b4000b          LDRH     r0,[r4,#0xb]          ;417
000192  4408              ADD      r0,r0,r1              ;417
000194  1e40              SUBS     r0,r0,#1              ;417
000196  fa1ff980          UXTH     r9,r0                 ;417
00019a  f8bd0036          LDRH     r0,[sp,#0x36]         ;418
00019e  4440              ADD      r0,r0,r8              ;418
0001a0  fa1ffa80          UXTH     r10,r0                ;418
0001a4  f8bd0034          LDRH     r0,[sp,#0x34]         ;419
0001a8  4438              ADD      r0,r0,r7              ;419
0001aa  f8bd1038          LDRH     r1,[sp,#0x38]         ;419
0001ae  4408              ADD      r0,r0,r1              ;419
0001b0  1e40              SUBS     r0,r0,#1              ;419
0001b2  b285              UXTH     r5,r0                 ;419
0001b4  f8bd0036          LDRH     r0,[sp,#0x36]         ;420
0001b8  4440              ADD      r0,r0,r8              ;420
0001ba  f8bd103a          LDRH     r1,[sp,#0x3a]         ;420
0001be  4408              ADD      r0,r0,r1              ;420
0001c0  1e40              SUBS     r0,r0,#1              ;420
0001c2  b286              UXTH     r6,r0                 ;420
0001c4  45a9              CMP      r9,r5                 ;421
0001c6  da11              BGE      |L2.492|
0001c8  45b2              CMP      r10,r6                ;421
0001ca  da0f              BGE      |L2.492|
0001cc  f5b57fa0          CMP      r5,#0x140             ;421
0001d0  da0c              BGE      |L2.492|
0001d2  f5b67fa0          CMP      r6,#0x140             ;421
0001d6  da09              BGE      |L2.492|
0001d8  4805              LDR      r0,|L2.496|
0001da  f8cdb000          STR      r11,[sp,#0]           ;421
0001de  4633              MOV      r3,r6                 ;421
0001e0  462a              MOV      r2,r5                 ;421
0001e2  4651              MOV      r1,r10                ;421
0001e4  f8d0c008          LDR      r12,[r0,#8]           ;421  ; pic_phy
0001e8  4648              MOV      r0,r9                 ;421
0001ea  47e0              BLX      r12                   ;421
                  |L2.492|
0001ec  bf00              NOP      
0001ee  e71a              B        |L2.38|
;;;424    
                          ENDP

                  |L2.496|
                          DCD      pic_phy

                          AREA ||i.gif_decode||, CODE, READONLY, ALIGN=2

                  gif_decode PROC
;;;493    //x,y,width,height:显示坐标及区域大小.
;;;494    u8 gif_decode(const u8 *filename,u16 x,u16 y,u16 width,u16 height)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;495    {
000004  4681              MOV      r9,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
00000c  f8dda028          LDR      r10,[sp,#0x28]
;;;496    	u8 res=0;
000010  2500              MOVS     r5,#0
;;;497    	u16 dtime=0;//解码延时
000012  2000              MOVS     r0,#0
000014  9000              STR      r0,[sp,#0]
;;;498    	gif89a *mygif89a;
;;;499    	FIL *gfile;
;;;500    #if GIF_USE_MALLOC==1 	//定义是否使用malloc,这里我们选择使用malloc
;;;501    	gfile=(FIL*)pic_memalloc(sizeof(FIL));
000016  f44f700a          MOV      r0,#0x228
00001a  f7fffffe          BL       pic_memalloc
00001e  4683              MOV      r11,r0
;;;502    	if(gfile==NULL)res=PIC_MEM_ERR;//申请内存失败 
000020  f1bb0f00          CMP      r11,#0
000024  d100              BNE      |L3.40|
000026  2511              MOVS     r5,#0x11
                  |L3.40|
;;;503    	mygif89a=(gif89a*)pic_memalloc(sizeof(gif89a));
000028  f44f6083          MOV      r0,#0x418
00002c  f7fffffe          BL       pic_memalloc
000030  4604              MOV      r4,r0
;;;504    	if(mygif89a==NULL)res=PIC_MEM_ERR;//申请内存失败    
000032  b904              CBNZ     r4,|L3.54|
000034  2511              MOVS     r5,#0x11
                  |L3.54|
;;;505    	mygif89a->lzw=(LZW_INFO*)pic_memalloc(sizeof(LZW_INFO));
000036  f64340f4          MOV      r0,#0x3cf4
00003a  f7fffffe          BL       pic_memalloc
00003e  f8c40414          STR      r0,[r4,#0x414]
;;;506    	if(mygif89a->lzw==NULL)res=PIC_MEM_ERR;//申请内存失败 
000042  f8d40414          LDR      r0,[r4,#0x414]
000046  b900              CBNZ     r0,|L3.74|
000048  2511              MOVS     r5,#0x11
                  |L3.74|
;;;507    #else
;;;508    	gfile=&f_gfile;
;;;509    	mygif89a=&tgif89a;
;;;510    	mygif89a->lzw=&tlzw;
;;;511    #endif
;;;512    
;;;513    	if(res==0)//OK
00004a  2d00              CMP      r5,#0
00004c  d15f              BNE      |L3.270|
;;;514    	{
;;;515    		res=f_open(gfile,(TCHAR *)filename,FA_READ);
00004e  2201              MOVS     r2,#1
000050  4649              MOV      r1,r9
000052  4658              MOV      r0,r11
000054  f7fffffe          BL       f_open
000058  4605              MOV      r5,r0
;;;516    		if(res==0)//打开文件ok
00005a  2d00              CMP      r5,#0
00005c  d154              BNE      |L3.264|
;;;517    		{
;;;518    			if(gif_check_head(gfile))res=PIC_FORMAT_ERR;
00005e  4658              MOV      r0,r11
000060  f7fffffe          BL       gif_check_head
000064  b100              CBZ      r0,|L3.104|
000066  2527              MOVS     r5,#0x27
                  |L3.104|
;;;519    			if(gif_getinfo(gfile,mygif89a))res=PIC_FORMAT_ERR;
000068  4621              MOV      r1,r4
00006a  4658              MOV      r0,r11
00006c  f7fffffe          BL       gif_getinfo
000070  b100              CBZ      r0,|L3.116|
000072  2527              MOVS     r5,#0x27
                  |L3.116|
;;;520    			if(mygif89a->gifLSD.width>width||mygif89a->gifLSD.height>height)res=PIC_SIZE_ERR;//尺寸太大.
000074  8820              LDRH     r0,[r4,#0]
000076  4540              CMP      r0,r8
000078  dc02              BGT      |L3.128|
00007a  8860              LDRH     r0,[r4,#2]
00007c  4550              CMP      r0,r10
00007e  dd01              BLE      |L3.132|
                  |L3.128|
000080  2528              MOVS     r5,#0x28
000082  e00f              B        |L3.164|
                  |L3.132|
;;;521    			else
;;;522    			{
;;;523    				x=(width-mygif89a->gifLSD.width)/2+x;
000084  8821              LDRH     r1,[r4,#0]
000086  eba80001          SUB      r0,r8,r1
00008a  eb0071d0          ADD      r1,r0,r0,LSR #31
00008e  eb060161          ADD      r1,r6,r1,ASR #1
000092  b28e              UXTH     r6,r1
;;;524    				y=(height-mygif89a->gifLSD.height)/2+y;
000094  8861              LDRH     r1,[r4,#2]
000096  ebaa0001          SUB      r0,r10,r1
00009a  eb0071d0          ADD      r1,r0,r0,LSR #31
00009e  eb070161          ADD      r1,r7,r1,ASR #1
0000a2  b28f              UXTH     r7,r1
                  |L3.164|
;;;525    			}
;;;526    			gifdecoding=1;
0000a4  2001              MOVS     r0,#1
0000a6  4920              LDR      r1,|L3.296|
0000a8  7008              STRB     r0,[r1,#0]
;;;527    			while(gifdecoding&&res==0)//解码循环
0000aa  e027              B        |L3.252|
                  |L3.172|
;;;528    			{	 
;;;529    				res=gif_drawimage(gfile,mygif89a,x,y);//显示一张图片
0000ac  463b              MOV      r3,r7
0000ae  4632              MOV      r2,r6
0000b0  4621              MOV      r1,r4
0000b2  4658              MOV      r0,r11
0000b4  f7fffffe          BL       gif_drawimage
0000b8  4605              MOV      r5,r0
;;;530    				if(mygif89a->gifISD.flag&0x80)gif_recovergctbl(mygif89a);//恢复全局颜色表
0000ba  7be0              LDRB     r0,[r4,#0xf]
0000bc  f0000080          AND      r0,r0,#0x80
0000c0  b110              CBZ      r0,|L3.200|
0000c2  4620              MOV      r0,r4
0000c4  f7fffffe          BL       gif_recovergctbl
                  |L3.200|
;;;531    				if(mygif89a->delay)dtime=mygif89a->delay;
0000c8  f8b40412          LDRH     r0,[r4,#0x412]
0000cc  b118              CBZ      r0,|L3.214|
0000ce  f8b40412          LDRH     r0,[r4,#0x412]
0000d2  9000              STR      r0,[sp,#0]
0000d4  e001              B        |L3.218|
                  |L3.214|
;;;532    				else dtime=10;//默认延时
0000d6  200a              MOVS     r0,#0xa
0000d8  9000              STR      r0,[sp,#0]
                  |L3.218|
;;;533    				while(dtime--&&gifdecoding)delay_ms(10);//延迟
0000da  e002              B        |L3.226|
                  |L3.220|
0000dc  200a              MOVS     r0,#0xa
0000de  f7fffffe          BL       delay_ms
                  |L3.226|
0000e2  9800              LDR      r0,[sp,#0]
0000e4  1e41              SUBS     r1,r0,#1
0000e6  b289              UXTH     r1,r1
0000e8  9100              STR      r1,[sp,#0]
0000ea  b118              CBZ      r0,|L3.244|
0000ec  480e              LDR      r0,|L3.296|
0000ee  7800              LDRB     r0,[r0,#0]  ; gifdecoding
0000f0  2800              CMP      r0,#0
0000f2  d1f3              BNE      |L3.220|
                  |L3.244|
;;;534    				if(res==2)
0000f4  2d02              CMP      r5,#2
0000f6  d101              BNE      |L3.252|
;;;535    				{
;;;536    					res=0;
0000f8  2500              MOVS     r5,#0
;;;537    					break;
0000fa  e004              B        |L3.262|
                  |L3.252|
0000fc  480a              LDR      r0,|L3.296|
0000fe  7800              LDRB     r0,[r0,#0]            ;527  ; gifdecoding
000100  b108              CBZ      r0,|L3.262|
000102  2d00              CMP      r5,#0                 ;527
000104  d0d2              BEQ      |L3.172|
                  |L3.262|
000106  bf00              NOP      
                  |L3.264|
;;;538    				}
;;;539    			}
;;;540    		}
;;;541    		f_close(gfile);
000108  4658              MOV      r0,r11
00010a  f7fffffe          BL       f_close
                  |L3.270|
;;;542    	}   
;;;543    #if GIF_USE_MALLOC==1 	//定义是否使用malloc,这里我们选择使用malloc
;;;544    	pic_memfree(gfile);
00010e  4658              MOV      r0,r11
000110  f7fffffe          BL       pic_memfree
;;;545    	pic_memfree(mygif89a->lzw);
000114  f8d40414          LDR      r0,[r4,#0x414]
000118  f7fffffe          BL       pic_memfree
;;;546    	pic_memfree(mygif89a); 
00011c  4620              MOV      r0,r4
00011e  f7fffffe          BL       pic_memfree
;;;547    #endif 
;;;548    	return res;
000122  4628              MOV      r0,r5
;;;549    }
000124  e8bd8ff8          POP      {r3-r11,pc}
;;;550    
                          ENDP

                  |L3.296|
                          DCD      gifdecoding

                          AREA ||i.gif_dispimage||, CODE, READONLY, ALIGN=2

                  gif_dispimage PROC
;;;303    //                 of the image are rendered with the background color.
;;;304    u8 gif_dispimage(FIL *gfile,gif89a* gif,u16 x0,u16 y0,int Transparency, u8 Disposal) 
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;305    {
000004  b08b              SUB      sp,sp,#0x2c
000006  460c              MOV      r4,r1
000008  469a              MOV      r10,r3
00000a  f8ddb060          LDR      r11,[sp,#0x60]
;;;306    	u32 readed;	   
;;;307       	u8 lzwlen;
;;;308    	int Index,OldIndex,XPos,YPos,YCnt,Pass,Interlace,XEnd;
;;;309    	int Width,Height,Cnt,ColorIndex;
;;;310    	u16 bkcolor;
;;;311    	u16 *pTrans;
;;;312    
;;;313    	Width=gif->gifISD.width;
00000e  f8b4000b          LDRH     r0,[r4,#0xb]
000012  9004              STR      r0,[sp,#0x10]
;;;314    	Height=gif->gifISD.height;
000014  f8b4000d          LDRH     r0,[r4,#0xd]
000018  9003              STR      r0,[sp,#0xc]
;;;315    	XEnd=Width+x0-1;
00001a  990d              LDR      r1,[sp,#0x34]
00001c  9804              LDR      r0,[sp,#0x10]
00001e  4408              ADD      r0,r0,r1
000020  1e40              SUBS     r0,r0,#1
000022  9005              STR      r0,[sp,#0x14]
;;;316    	bkcolor=gif->colortbl[gif->gifLSD.bkcindex];
000024  7961              LDRB     r1,[r4,#5]
000026  f1040010          ADD      r0,r4,#0x10
00002a  eb000041          ADD      r0,r0,r1,LSL #1
00002e  8800              LDRH     r0,[r0,#0]
000030  9001              STR      r0,[sp,#4]
;;;317    	pTrans=(u16*)gif->colortbl;
000032  f1040010          ADD      r0,r4,#0x10
000036  9000              STR      r0,[sp,#0]
;;;318    	f_read(gfile,&lzwlen,1,(UINT*)&readed);//得到LZW长度	 
000038  ab0a              ADD      r3,sp,#0x28
00003a  2201              MOVS     r2,#1
00003c  a909              ADD      r1,sp,#0x24
00003e  980b              LDR      r0,[sp,#0x2c]
000040  f7fffffe          BL       f_read
;;;319    	gif_initlzw(gif,lzwlen);//Initialize the LZW stack with the LZW code size 
000044  f89d1024          LDRB     r1,[sp,#0x24]
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       gif_initlzw
;;;320    	Interlace=gif->gifISD.flag&0x40;//是否交织编码
00004e  7be0              LDRB     r0,[r4,#0xf]
000050  f0000040          AND      r0,r0,#0x40
000054  9006              STR      r0,[sp,#0x18]
;;;321    	for(YCnt=0,YPos=y0,Pass=0;YCnt<Height;YCnt++)
000056  2000              MOVS     r0,#0
000058  9008              STR      r0,[sp,#0x20]
00005a  4656              MOV      r6,r10
00005c  9007              STR      r0,[sp,#0x1c]
00005e  e0d5              B        |L4.524|
                  |L4.96|
;;;322    	{
;;;323    		Cnt=0;
000060  2700              MOVS     r7,#0
;;;324    		OldIndex=-1;
000062  1e7d              SUBS     r5,r7,#1
;;;325    		for(XPos=x0;XPos<=XEnd;XPos++)
000064  f8dd8034          LDR      r8,[sp,#0x34]
000068  e082              B        |L4.368|
                  |L4.106|
;;;326    		{
;;;327    			if(gif->lzw->sp>gif->lzw->aDecompBuffer)Index=*--(gif->lzw->sp);
00006a  f8d40414          LDR      r0,[r4,#0x414]
00006e  f5005040          ADD      r0,r0,#0x3000
000072  f8d00cbc          LDR      r0,[r0,#0xcbc]
000076  f8d41414          LDR      r1,[r4,#0x414]
00007a  f2431202          MOV      r2,#0x3102
00007e  4411              ADD      r1,r1,r2
000080  4288              CMP      r0,r1
000082  d90f              BLS      |L4.164|
000084  f8d40414          LDR      r0,[r4,#0x414]
000088  f5005040          ADD      r0,r0,#0x3000
00008c  f8d00cbc          LDR      r0,[r0,#0xcbc]
000090  1e40              SUBS     r0,r0,#1
000092  f8d41414          LDR      r1,[r4,#0x414]
000096  f5015140          ADD      r1,r1,#0x3000
00009a  f8c10cbc          STR      r0,[r1,#0xcbc]
00009e  f8909000          LDRB     r9,[r0,#0]
0000a2  e004              B        |L4.174|
                  |L4.164|
;;;328    		    else Index=gif_getnextbyte(gfile,gif);	   
0000a4  4621              MOV      r1,r4
0000a6  980b              LDR      r0,[sp,#0x2c]
0000a8  f7fffffe          BL       gif_getnextbyte
0000ac  4681              MOV      r9,r0
                  |L4.174|
;;;329    			if(Index==-2)return 0;//Endcode     
0000ae  f1090002          ADD      r0,r9,#2
0000b2  b918              CBNZ     r0,|L4.188|
0000b4  2000              MOVS     r0,#0
                  |L4.182|
;;;330    			if((Index<0)||(Index>=gif->numcolors))
;;;331    			{
;;;332    				//IfIndex out of legal range stop decompressing
;;;333    				return 1;//Error
;;;334    			}
;;;335    			//If current index equals old index increment counter
;;;336    			if((Index==OldIndex)&&(XPos<=XEnd))Cnt++;
;;;337    	 		else
;;;338    			{
;;;339    				if(Cnt)
;;;340    				{
;;;341    					if(OldIndex!=Transparency)
;;;342    					{									    
;;;343    						pic_phy.draw_hline(XPos-Cnt-1,YPos,Cnt+1,*(pTrans+OldIndex));
;;;344    					}else if(Disposal==2)
;;;345    					{
;;;346    						pic_phy.draw_hline(XPos-Cnt-1,YPos,Cnt+1,bkcolor);
;;;347    					}
;;;348    					Cnt=0;
;;;349    				}else
;;;350    				{
;;;351    					if(OldIndex>=0)
;;;352    					{
;;;353    						if(OldIndex!=Transparency)pic_phy.draw_point(XPos-1,YPos,*(pTrans+OldIndex));
;;;354    					 	else if(Disposal==2)pic_phy.draw_point(XPos-1,YPos,bkcolor); 
;;;355    					}
;;;356    				}
;;;357    			}
;;;358    			OldIndex=Index;
;;;359    		}
;;;360    		if((OldIndex!=Transparency)||(Disposal==2))
;;;361    		{
;;;362    			if(OldIndex!=Transparency)ColorIndex=*(pTrans+OldIndex);
;;;363    		    else ColorIndex=bkcolor;
;;;364    	 		if(Cnt)
;;;365    			{
;;;366    				pic_phy.draw_hline(XPos-Cnt-1,YPos,Cnt+1,ColorIndex);
;;;367    			}else pic_phy.draw_point(XEnd,YPos,ColorIndex);	 
;;;368    		}
;;;369    		//Adjust YPos if image is interlaced 
;;;370    		if(Interlace)//交织编码
;;;371    		{
;;;372    			YPos+=_aInterlaceOffset[Pass];
;;;373    			if((YPos-y0)>=Height)
;;;374    			{
;;;375    				++Pass;
;;;376    				YPos=_aInterlaceYPos[Pass]+y0;
;;;377    			}
;;;378    		}else YPos++;	    
;;;379    	}
;;;380    	return 0;
;;;381    }  			   
0000b6  b00f              ADD      sp,sp,#0x3c
0000b8  e8bd8ff0          POP      {r4-r11,pc}
                  |L4.188|
0000bc  f1b90f00          CMP      r9,#0                 ;330
0000c0  db03              BLT      |L4.202|
0000c2  f8b40410          LDRH     r0,[r4,#0x410]        ;330
0000c6  4548              CMP      r0,r9                 ;330
0000c8  dc01              BGT      |L4.206|
                  |L4.202|
0000ca  2001              MOVS     r0,#1                 ;333
0000cc  e7f3              B        |L4.182|
                  |L4.206|
0000ce  45a9              CMP      r9,r5                 ;336
0000d0  d104              BNE      |L4.220|
0000d2  9805              LDR      r0,[sp,#0x14]         ;336
0000d4  4580              CMP      r8,r0                 ;336
0000d6  dc01              BGT      |L4.220|
0000d8  1c7f              ADDS     r7,r7,#1              ;336
0000da  e046              B        |L4.362|
                  |L4.220|
0000dc  b33f              CBZ      r7,|L4.302|
0000de  455d              CMP      r5,r11                ;341
0000e0  d014              BEQ      |L4.268|
0000e2  f8dde000          LDR      lr,[sp,#0]            ;343
0000e6  f83e3015          LDRH     r3,[lr,r5,LSL #1]     ;343
0000ea  f1070e01          ADD      lr,r7,#1              ;343
0000ee  fa1ff28e          UXTH     r2,lr                 ;343
0000f2  b2b1              UXTH     r1,r6                 ;343
0000f4  eba80e07          SUB      lr,r8,r7              ;343
0000f8  f1ae0e01          SUB      lr,lr,#1              ;343
0000fc  fa1ff08e          UXTH     r0,lr                 ;343
000100  f8dfe118          LDR      lr,|L4.540|
000104  f8dec00c          LDR      r12,[lr,#0xc]         ;343  ; pic_phy
000108  47e0              BLX      r12                   ;343
00010a  e00e              B        |L4.298|
                  |L4.268|
00010c  9819              LDR      r0,[sp,#0x64]         ;344
00010e  2802              CMP      r0,#2                 ;344
000110  d10b              BNE      |L4.298|
000112  1c7b              ADDS     r3,r7,#1              ;346
000114  b29a              UXTH     r2,r3                 ;346
000116  b2b1              UXTH     r1,r6                 ;346
000118  eba80307          SUB      r3,r8,r7              ;346
00011c  1e5b              SUBS     r3,r3,#1              ;346
00011e  b298              UXTH     r0,r3                 ;346
000120  4b3e              LDR      r3,|L4.540|
000122  f8d3c00c          LDR      r12,[r3,#0xc]         ;346  ; pic_phy
000126  9b01              LDR      r3,[sp,#4]            ;346
000128  47e0              BLX      r12                   ;346
                  |L4.298|
00012a  2700              MOVS     r7,#0                 ;348
00012c  e01d              B        |L4.362|
                  |L4.302|
00012e  2d00              CMP      r5,#0                 ;351
000130  db1b              BLT      |L4.362|
000132  455d              CMP      r5,r11                ;353
000134  d00e              BEQ      |L4.340|
000136  f8ddc000          LDR      r12,[sp,#0]           ;353
00013a  f83c2015          LDRH     r2,[r12,r5,LSL #1]    ;353
00013e  b2b1              UXTH     r1,r6                 ;353
000140  f1a80c01          SUB      r12,r8,#1             ;353
000144  fa1ff08c          UXTH     r0,r12                ;353
000148  f8dfc0d0          LDR      r12,|L4.540|
00014c  f8dc3004          LDR      r3,[r12,#4]           ;353  ; pic_phy
000150  4798              BLX      r3                    ;353
000152  e00a              B        |L4.362|
                  |L4.340|
000154  9819              LDR      r0,[sp,#0x64]         ;354
000156  2802              CMP      r0,#2                 ;354
000158  d107              BNE      |L4.362|
00015a  b2b1              UXTH     r1,r6                 ;354
00015c  f1a80201          SUB      r2,r8,#1              ;354
000160  b290              UXTH     r0,r2                 ;354
000162  4a2e              LDR      r2,|L4.540|
000164  6853              LDR      r3,[r2,#4]            ;354  ; pic_phy
000166  9a01              LDR      r2,[sp,#4]            ;354
000168  4798              BLX      r3                    ;354
                  |L4.362|
00016a  464d              MOV      r5,r9                 ;358
00016c  f1080801          ADD      r8,r8,#1              ;325
                  |L4.368|
000170  9805              LDR      r0,[sp,#0x14]         ;325
000172  4580              CMP      r8,r0                 ;325
000174  f77faf79          BLE      |L4.106|
000178  455d              CMP      r5,r11                ;360
00017a  d102              BNE      |L4.386|
00017c  9819              LDR      r0,[sp,#0x64]         ;360
00017e  2802              CMP      r0,#2                 ;360
000180  d12c              BNE      |L4.476|
                  |L4.386|
000182  455d              CMP      r5,r11                ;362
000184  d004              BEQ      |L4.400|
000186  9800              LDR      r0,[sp,#0]            ;362
000188  f8300015          LDRH     r0,[r0,r5,LSL #1]     ;362
00018c  9002              STR      r0,[sp,#8]            ;362
00018e  e001              B        |L4.404|
                  |L4.400|
000190  9801              LDR      r0,[sp,#4]            ;363
000192  9002              STR      r0,[sp,#8]            ;363
                  |L4.404|
000194  b1a7              CBZ      r7,|L4.448|
000196  f8dde008          LDR      lr,[sp,#8]            ;366
00019a  fa1ff38e          UXTH     r3,lr                 ;366
00019e  f1070e01          ADD      lr,r7,#1              ;366
0001a2  fa1ff28e          UXTH     r2,lr                 ;366
0001a6  b2b1              UXTH     r1,r6                 ;366
0001a8  eba80e07          SUB      lr,r8,r7              ;366
0001ac  f1ae0e01          SUB      lr,lr,#1              ;366
0001b0  fa1ff08e          UXTH     r0,lr                 ;366
0001b4  f8dfe064          LDR      lr,|L4.540|
0001b8  f8dec00c          LDR      r12,[lr,#0xc]         ;366  ; pic_phy
0001bc  47e0              BLX      r12                   ;366
0001be  e00d              B        |L4.476|
                  |L4.448|
0001c0  f8ddc008          LDR      r12,[sp,#8]           ;367
0001c4  fa1ff28c          UXTH     r2,r12                ;367
0001c8  b2b1              UXTH     r1,r6                 ;367
0001ca  f8ddc014          LDR      r12,[sp,#0x14]        ;367
0001ce  fa1ff08c          UXTH     r0,r12                ;367
0001d2  f8dfc048          LDR      r12,|L4.540|
0001d6  f8dc3004          LDR      r3,[r12,#4]           ;367  ; pic_phy
0001da  4798              BLX      r3                    ;367
                  |L4.476|
0001dc  9806              LDR      r0,[sp,#0x18]         ;370
0001de  b188              CBZ      r0,|L4.516|
0001e0  490f              LDR      r1,|L4.544|
0001e2  9807              LDR      r0,[sp,#0x1c]         ;372
0001e4  5c08              LDRB     r0,[r1,r0]            ;372
0001e6  4406              ADD      r6,r6,r0              ;372
0001e8  eba6010a          SUB      r1,r6,r10             ;373
0001ec  9803              LDR      r0,[sp,#0xc]          ;373
0001ee  4281              CMP      r1,r0                 ;373
0001f0  db09              BLT      |L4.518|
0001f2  9807              LDR      r0,[sp,#0x1c]         ;375
0001f4  1c40              ADDS     r0,r0,#1              ;375
0001f6  9007              STR      r0,[sp,#0x1c]         ;375
0001f8  490a              LDR      r1,|L4.548|
0001fa  9807              LDR      r0,[sp,#0x1c]         ;376
0001fc  5c08              LDRB     r0,[r1,r0]            ;376
0001fe  eb00060a          ADD      r6,r0,r10             ;376
000202  e000              B        |L4.518|
                  |L4.516|
000204  1c76              ADDS     r6,r6,#1              ;378
                  |L4.518|
000206  9808              LDR      r0,[sp,#0x20]         ;321
000208  1c40              ADDS     r0,r0,#1              ;321
00020a  9008              STR      r0,[sp,#0x20]         ;321
                  |L4.524|
00020c  9903              LDR      r1,[sp,#0xc]          ;321
00020e  9808              LDR      r0,[sp,#0x20]         ;321
000210  4288              CMP      r0,r1                 ;321
000212  f6ffaf25          BLT      |L4.96|
000216  2000              MOVS     r0,#0                 ;380
000218  e74d              B        |L4.182|
;;;382    //恢复成背景色
                          ENDP

00021a  0000              DCW      0x0000
                  |L4.540|
                          DCD      pic_phy
                  |L4.544|
                          DCD      _aInterlaceOffset
                  |L4.548|
                          DCD      _aInterlaceYPos

                          AREA ||i.gif_drawimage||, CODE, READONLY, ALIGN=1

                  gif_drawimage PROC
;;;427    //x0,y0:开始显示的坐标
;;;428    u8 gif_drawimage(FIL *gfile,gif89a* gif,u16 x0,u16 y0)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;429    {		  
000004  b08b              SUB      sp,sp,#0x2c
000006  4680              MOV      r8,r0
000008  460c              MOV      r4,r1
00000a  4615              MOV      r5,r2
00000c  461e              MOV      r6,r3
;;;430    	u32 readed;
;;;431    	u8 res,temp;    
;;;432    	u16 numcolors;
;;;433    	ImageScreenDescriptor previmg;
;;;434    
;;;435    	u8 Disposal;
;;;436    	int TransIndex;
;;;437    	u8 Introducer;
;;;438    	TransIndex=-1;				  
00000e  f04f30ff          MOV      r0,#0xffffffff
000012  9004              STR      r0,[sp,#0x10]
;;;439    	do
000014  bf00              NOP      
                  |L5.22|
;;;440    	{
;;;441    		res=f_read(gfile,&Introducer,1,(UINT*)&readed);//读取一个字节
000016  ab0a              ADD      r3,sp,#0x28
000018  2201              MOVS     r2,#1
00001a  a903              ADD      r1,sp,#0xc
00001c  4640              MOV      r0,r8
00001e  f7fffffe          BL       f_read
000022  4607              MOV      r7,r0
;;;442    		if(res)return 1;   
000024  b11f              CBZ      r7,|L5.46|
000026  2001              MOVS     r0,#1
                  |L5.40|
;;;443    		switch(Introducer)
;;;444    		{		 
;;;445    			case GIF_INTRO_IMAGE://图像描述
;;;446    				previmg.xoff=gif->gifISD.xoff;
;;;447     				previmg.yoff=gif->gifISD.yoff;
;;;448    				previmg.width=gif->gifISD.width;
;;;449    				previmg.height=gif->gifISD.height;
;;;450    
;;;451    				res=f_read(gfile,(u8*)&gif->gifISD,9,(UINT*)&readed);//读取一个字节
;;;452    				if(res)return 1;			 
;;;453    				if(gif->gifISD.flag&0x80)//存在局部颜色表
;;;454    				{							  
;;;455    					gif_savegctbl(gif);//保存全局颜色表
;;;456    					numcolors=2<<(gif->gifISD.flag&0X07);//得到局部颜色表大小
;;;457    					if(gif_readcolortbl(gfile,gif,numcolors))return 1;//读错误	
;;;458    				}
;;;459    				if(Disposal==2)gif_clear2bkcolor(x0,y0,gif,previmg); 
;;;460    				gif_dispimage(gfile,gif,x0+gif->gifISD.xoff,y0+gif->gifISD.yoff,TransIndex,Disposal);
;;;461     				while(1)
;;;462    				{
;;;463    					f_read(gfile,&temp,1,(UINT*)&readed);//读取一个字节
;;;464    					if(temp==0)break;
;;;465    					readed=f_tell(gfile);//还存在块.	
;;;466    					if(f_lseek(gfile,readed+temp))break;//继续向后偏移	 
;;;467    			    }
;;;468    				if(temp!=0)return 1;//Error 
;;;469    				return 0;
;;;470    			case GIF_INTRO_TERMINATOR://得到结束符了
;;;471    				return 2;//代表图像解码完成了.
;;;472    			case GIF_INTRO_EXTENSION:
;;;473    				//Read image extension*/
;;;474    				res=gif_readextension(gfile,gif,&TransIndex,&Disposal);//读取图像扩展块消息
;;;475    				if(res)return 1;
;;;476    	 			break;
;;;477    			default:
;;;478    				return 1;
;;;479    		}
;;;480    	}while(Introducer!=GIF_INTRO_TERMINATOR);//读到结束符了
;;;481    	return 0;
;;;482    }
000028  b00b              ADD      sp,sp,#0x2c
00002a  e8bd83f0          POP      {r4-r9,pc}
                  |L5.46|
00002e  f89d000c          LDRB     r0,[sp,#0xc]          ;443
000032  2821              CMP      r0,#0x21              ;443
000034  d079              BEQ      |L5.298|
000036  282c              CMP      r0,#0x2c              ;443
000038  d002              BEQ      |L5.64|
00003a  283b              CMP      r0,#0x3b              ;443
00003c  d170              BNE      |L5.288|
00003e  e072              B        |L5.294|
                  |L5.64|
000040  f8b40007          LDRH     r0,[r4,#7]            ;446
000044  f8ad0018          STRH     r0,[sp,#0x18]         ;446
000048  f8b40009          LDRH     r0,[r4,#9]            ;447
00004c  f8ad001a          STRH     r0,[sp,#0x1a]         ;447
000050  f8b4000b          LDRH     r0,[r4,#0xb]          ;448
000054  f8ad001c          STRH     r0,[sp,#0x1c]         ;448
000058  f8b4000d          LDRH     r0,[r4,#0xd]          ;449
00005c  f8ad001e          STRH     r0,[sp,#0x1e]         ;449
000060  ab0a              ADD      r3,sp,#0x28           ;451
000062  2209              MOVS     r2,#9                 ;451
000064  1de1              ADDS     r1,r4,#7              ;451
000066  4640              MOV      r0,r8                 ;451
000068  f7fffffe          BL       f_read
00006c  4607              MOV      r7,r0                 ;451
00006e  b10f              CBZ      r7,|L5.116|
000070  2001              MOVS     r0,#1                 ;452
000072  e7d9              B        |L5.40|
                  |L5.116|
000074  7be0              LDRB     r0,[r4,#0xf]          ;453
000076  f0000080          AND      r0,r0,#0x80           ;453
00007a  b188              CBZ      r0,|L5.160|
00007c  4620              MOV      r0,r4                 ;455
00007e  f7fffffe          BL       gif_savegctbl
000082  7be0              LDRB     r0,[r4,#0xf]          ;456
000084  f0000107          AND      r1,r0,#7              ;456
000088  2002              MOVS     r0,#2                 ;456
00008a  4088              LSLS     r0,r0,r1              ;456
00008c  fa1ff980          UXTH     r9,r0                 ;456
000090  464a              MOV      r2,r9                 ;457
000092  4621              MOV      r1,r4                 ;457
000094  4640              MOV      r0,r8                 ;457
000096  f7fffffe          BL       gif_readcolortbl
00009a  b108              CBZ      r0,|L5.160|
00009c  2001              MOVS     r0,#1                 ;457
00009e  e7c3              B        |L5.40|
                  |L5.160|
0000a0  f89d0014          LDRB     r0,[sp,#0x14]         ;459
0000a4  2802              CMP      r0,#2                 ;459
0000a6  d10b              BNE      |L5.192|
0000a8  9807              LDR      r0,[sp,#0x1c]         ;459
0000aa  9000              STR      r0,[sp,#0]            ;459
0000ac  f89d0020          LDRB     r0,[sp,#0x20]         ;459
0000b0  f88d0004          STRB     r0,[sp,#4]            ;459
0000b4  4622              MOV      r2,r4                 ;459
0000b6  4631              MOV      r1,r6                 ;459
0000b8  4628              MOV      r0,r5                 ;459
0000ba  9b06              LDR      r3,[sp,#0x18]         ;459
0000bc  f7fffffe          BL       gif_clear2bkcolor
                  |L5.192|
0000c0  f89d0014          LDRB     r0,[sp,#0x14]         ;460
0000c4  9904              LDR      r1,[sp,#0x10]         ;460
0000c6  e9cd1000          STRD     r1,r0,[sp,#0]         ;460
0000ca  f8b40009          LDRH     r0,[r4,#9]            ;460
0000ce  4430              ADD      r0,r0,r6              ;460
0000d0  b283              UXTH     r3,r0                 ;460
0000d2  f8b40007          LDRH     r0,[r4,#7]            ;460
0000d6  4428              ADD      r0,r0,r5              ;460
0000d8  b282              UXTH     r2,r0                 ;460
0000da  4621              MOV      r1,r4                 ;460
0000dc  4640              MOV      r0,r8                 ;460
0000de  f7fffffe          BL       gif_dispimage
0000e2  e015              B        |L5.272|
                  |L5.228|
0000e4  ab0a              ADD      r3,sp,#0x28           ;463
0000e6  2201              MOVS     r2,#1                 ;463
0000e8  a909              ADD      r1,sp,#0x24           ;463
0000ea  4640              MOV      r0,r8                 ;463
0000ec  f7fffffe          BL       f_read
0000f0  f89d0024          LDRB     r0,[sp,#0x24]         ;464
0000f4  b900              CBNZ     r0,|L5.248|
0000f6  e00c              B        |L5.274|
                  |L5.248|
0000f8  f8d80008          LDR      r0,[r8,#8]            ;465
0000fc  900a              STR      r0,[sp,#0x28]         ;465
0000fe  f89d2024          LDRB     r2,[sp,#0x24]         ;466
000102  980a              LDR      r0,[sp,#0x28]         ;466
000104  1881              ADDS     r1,r0,r2              ;466
000106  4640              MOV      r0,r8                 ;466
000108  f7fffffe          BL       f_lseek
00010c  b100              CBZ      r0,|L5.272|
00010e  e000              B        |L5.274|
                  |L5.272|
000110  e7e8              B        |L5.228|
                  |L5.274|
000112  bf00              NOP                            ;464
000114  f89d0024          LDRB     r0,[sp,#0x24]         ;468
000118  b118              CBZ      r0,|L5.290|
00011a  2001              MOVS     r0,#1                 ;468
00011c  e784              B        |L5.40|
00011e  e004              B        |L5.298|
                  |L5.288|
000120  e00e              B        |L5.320|
                  |L5.290|
000122  2000              MOVS     r0,#0                 ;469
000124  e780              B        |L5.40|
                  |L5.294|
000126  2002              MOVS     r0,#2                 ;471
000128  e77e              B        |L5.40|
                  |L5.298|
00012a  ab05              ADD      r3,sp,#0x14           ;474
00012c  aa04              ADD      r2,sp,#0x10           ;474
00012e  4621              MOV      r1,r4                 ;474
000130  4640              MOV      r0,r8                 ;474
000132  f7fffffe          BL       gif_readextension
000136  4607              MOV      r7,r0                 ;474
000138  b10f              CBZ      r7,|L5.318|
00013a  2001              MOVS     r0,#1                 ;475
00013c  e774              B        |L5.40|
                  |L5.318|
00013e  e001              B        |L5.324|
                  |L5.320|
000140  2001              MOVS     r0,#1                 ;478
000142  e771              B        |L5.40|
                  |L5.324|
000144  bf00              NOP                            ;476
000146  f89d000c          LDRB     r0,[sp,#0xc]          ;480
00014a  283b              CMP      r0,#0x3b              ;480
00014c  f47faf63          BNE      |L5.22|
000150  2000              MOVS     r0,#0                 ;481
000152  e769              B        |L5.40|
;;;483    
                          ENDP


                          AREA ||i.gif_getdatablock||, CODE, READONLY, ALIGN=1

                  gif_getdatablock PROC
;;;138    //maxnum:最大读写数据限制
;;;139    u16 gif_getdatablock(FIL *gfile,u8 *buf,u16 maxnum) 
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;140    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;141    	u8 cnt;
;;;142    	u32 readed;
;;;143    	u32 fpos;
;;;144    	f_read(gfile,&cnt,1,(UINT*)&readed);//得到LZW长度			 
00000a  466b              MOV      r3,sp
00000c  2201              MOVS     r2,#1
00000e  a901              ADD      r1,sp,#4
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       f_read
;;;145    	if(cnt) 
000016  f89d0004          LDRB     r0,[sp,#4]
00001a  b1f0              CBZ      r0,|L6.90|
;;;146    	{
;;;147    		if (buf)//需要读取 
00001c  b1b6              CBZ      r6,|L6.76|
;;;148    		{
;;;149    			if(cnt>maxnum)
00001e  f89d0004          LDRB     r0,[sp,#4]
000022  42b8              CMP      r0,r7
000024  dd0a              BLE      |L6.60|
;;;150    			{
;;;151    				fpos=f_tell(gfile);
000026  68ac              LDR      r4,[r5,#8]
;;;152    				f_lseek(gfile,fpos+cnt);//跳过
000028  f89d0004          LDRB     r0,[sp,#4]
00002c  1821              ADDS     r1,r4,r0
00002e  4628              MOV      r0,r5
000030  f7fffffe          BL       f_lseek
;;;153    				return cnt;//直接不读
000034  f89d0004          LDRB     r0,[sp,#4]
                  |L6.56|
;;;154    			}
;;;155    			f_read(gfile,buf,cnt,(UINT*)&readed);//得到LZW长度	
;;;156    		}else 	//直接跳过
;;;157    		{
;;;158    			fpos=f_tell(gfile);
;;;159    			f_lseek(gfile,fpos+cnt);//跳过
;;;160    		}
;;;161    	}
;;;162    	return cnt;
;;;163    }
000038  e8bd81fc          POP      {r2-r8,pc}
                  |L6.60|
00003c  466b              MOV      r3,sp                 ;155
00003e  f89d2004          LDRB     r2,[sp,#4]            ;155
000042  4631              MOV      r1,r6                 ;155
000044  4628              MOV      r0,r5                 ;155
000046  f7fffffe          BL       f_read
00004a  e006              B        |L6.90|
                  |L6.76|
00004c  68ac              LDR      r4,[r5,#8]            ;158
00004e  f89d0004          LDRB     r0,[sp,#4]            ;159
000052  1821              ADDS     r1,r4,r0              ;159
000054  4628              MOV      r0,r5                 ;159
000056  f7fffffe          BL       f_lseek
                  |L6.90|
00005a  f89d0004          LDRB     r0,[sp,#4]            ;162
00005e  e7eb              B        |L6.56|
;;;164    //ReadExtension		 
                          ENDP


                          AREA ||i.gif_getinfo||, CODE, READONLY, ALIGN=1

                  gif_getinfo PROC
;;;89     //返回值:0,OK;其他,失败;
;;;90     u8 gif_getinfo(FIL *file,gif89a * gif)
000000  b5f8              PUSH     {r3-r7,lr}
;;;91     {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;92     	u32 readed;	 
;;;93     	u8 res;   
;;;94     	res=f_read(file,(u8*)&gif->gifLSD,7,(UINT*)&readed);
000006  466b              MOV      r3,sp
000008  2207              MOVS     r2,#7
00000a  4621              MOV      r1,r4
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       f_read
000012  4606              MOV      r6,r0
;;;95     	if(res)return 1;
000014  b10e              CBZ      r6,|L7.26|
000016  2001              MOVS     r0,#1
                  |L7.24|
;;;96     	if(gif->gifLSD.flag&0x80)//存在全局颜色表
;;;97     	{
;;;98     		gif->numcolors=2<<(gif->gifLSD.flag&0x07);//得到颜色表大小
;;;99     		if(gif_readcolortbl(file,gif,gif->numcolors))return 1;//读错误	
;;;100    	}	   
;;;101    	return 0;
;;;102    }
000018  bdf8              POP      {r3-r7,pc}
                  |L7.26|
00001a  7920              LDRB     r0,[r4,#4]            ;96
00001c  f0000080          AND      r0,r0,#0x80           ;96
000020  b178              CBZ      r0,|L7.66|
000022  7920              LDRB     r0,[r4,#4]            ;98
000024  f0000107          AND      r1,r0,#7              ;98
000028  2002              MOVS     r0,#2                 ;98
00002a  4088              LSLS     r0,r0,r1              ;98
00002c  f8a40410          STRH     r0,[r4,#0x410]        ;98
000030  f8b42410          LDRH     r2,[r4,#0x410]        ;99
000034  4621              MOV      r1,r4                 ;99
000036  4628              MOV      r0,r5                 ;99
000038  f7fffffe          BL       gif_readcolortbl
00003c  b108              CBZ      r0,|L7.66|
00003e  2001              MOVS     r0,#1                 ;99
000040  e7ea              B        |L7.24|
                  |L7.66|
000042  2000              MOVS     r0,#0                 ;101
000044  e7e8              B        |L7.24|
;;;103    //保存全局颜色表	 
                          ENDP


                          AREA ||i.gif_getnextbyte||, CODE, READONLY, ALIGN=1

                  gif_getnextbyte PROC
;;;233    //		 >=0,OK.(LZW的第一个码)
;;;234    int gif_getnextbyte(FIL *gfile,gif89a* gif) 
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;235    {
000004  4680              MOV      r8,r0
000006  460c              MOV      r4,r1
;;;236    	int i,Code,Incode;
;;;237    	while((Code=gif_getnextcode(gfile,gif))>=0)
000008  e19d              B        |L8.838|
                  |L8.10|
;;;238    	{
;;;239    		if(Code==gif->lzw->ClearCode)
00000a  f8d40414          LDR      r0,[r4,#0x414]
00000e  f5005040          ADD      r0,r0,#0x3000
000012  f8d00ce4          LDR      r0,[r0,#0xce4]
000016  42a8              CMP      r0,r5
000018  d17d              BNE      |L8.278|
;;;240    		{
;;;241    			//Corrupt GIFs can make this happen  
;;;242    			if(gif->lzw->ClearCode>=(1<<MAX_NUM_LWZ_BITS))return -1;//Error 
00001a  f8d40414          LDR      r0,[r4,#0x414]
00001e  f5005040          ADD      r0,r0,#0x3000
000022  f8d00ce4          LDR      r0,[r0,#0xce4]
000026  f5b05f80          CMP      r0,#0x1000
00002a  db03              BLT      |L8.52|
00002c  f04f30ff          MOV      r0,#0xffffffff
                  |L8.48|
;;;243    			//Clear the tables 
;;;244    			mymemset((u8*)gif->lzw->aCode,0,sizeof(gif->lzw->aCode));
;;;245    			for(i=0;i<gif->lzw->ClearCode;++i)gif->lzw->aPrefix[i]=i;
;;;246    			//Calculate the'special codes' independence of the initial code size
;;;247    			//and initialize the stack pointer 
;;;248    			gif->lzw->CodeSize=gif->lzw->SetCodeSize+1;
;;;249    			gif->lzw->MaxCodeSize=gif->lzw->ClearCode<<1;
;;;250    			gif->lzw->MaxCode=gif->lzw->ClearCode+2;
;;;251    			gif->lzw->sp=gif->lzw->aDecompBuffer;
;;;252    			//Read the first code from the stack after clear ingand initializing*/
;;;253    			do
;;;254    			{
;;;255    				gif->lzw->FirstCode=gif_getnextcode(gfile,gif);
;;;256    			}while(gif->lzw->FirstCode==gif->lzw->ClearCode);
;;;257    			gif->lzw->OldCode=gif->lzw->FirstCode;
;;;258    			return gif->lzw->FirstCode;
;;;259    		}
;;;260    		if(Code==gif->lzw->EndCode)return -2;//End code
;;;261    		Incode=Code;
;;;262    		if(Code>=gif->lzw->MaxCode)
;;;263    		{
;;;264    			*(gif->lzw->sp)++=gif->lzw->FirstCode;
;;;265    			Code=gif->lzw->OldCode;
;;;266    		}
;;;267    		while(Code>=gif->lzw->ClearCode)
;;;268    		{
;;;269    			*(gif->lzw->sp)++=gif->lzw->aPrefix[Code];
;;;270    			if(Code==gif->lzw->aCode[Code])return Code;
;;;271    			if((gif->lzw->sp-gif->lzw->aDecompBuffer)>=sizeof(gif->lzw->aDecompBuffer))return Code;
;;;272    			Code=gif->lzw->aCode[Code];
;;;273    		}
;;;274    		*(gif->lzw->sp)++=gif->lzw->FirstCode=gif->lzw->aPrefix[Code];
;;;275    		if((Code=gif->lzw->MaxCode)<(1<<MAX_NUM_LWZ_BITS))
;;;276    		{
;;;277    			gif->lzw->aCode[Code]=gif->lzw->OldCode;
;;;278    			gif->lzw->aPrefix[Code]=gif->lzw->FirstCode;
;;;279    			++gif->lzw->MaxCode;
;;;280    			if((gif->lzw->MaxCode>=gif->lzw->MaxCodeSize)&&(gif->lzw->MaxCodeSize<(1<<MAX_NUM_LWZ_BITS)))
;;;281    			{
;;;282    				gif->lzw->MaxCodeSize<<=1;
;;;283    				++gif->lzw->CodeSize;
;;;284    			}
;;;285    		}
;;;286    		gif->lzw->OldCode=Incode;
;;;287    		if(gif->lzw->sp>gif->lzw->aDecompBuffer)return *--(gif->lzw->sp);
;;;288    	}
;;;289    	return Code;
;;;290    }
000030  e8bd81f0          POP      {r4-r8,pc}
                  |L8.52|
000034  f8d41414          LDR      r1,[r4,#0x414]        ;244
000038  f5017081          ADD      r0,r1,#0x102          ;244
00003c  f44f5200          MOV      r2,#0x2000            ;244
000040  2100              MOVS     r1,#0                 ;244
000042  f7fffffe          BL       mymemset
000046  2600              MOVS     r6,#0                 ;245
000048  e006              B        |L8.88|
                  |L8.74|
00004a  f8d41414          LDR      r1,[r4,#0x414]        ;245
00004e  f2421202          MOV      r2,#0x2102            ;245
000052  4411              ADD      r1,r1,r2              ;245
000054  558e              STRB     r6,[r1,r6]            ;245
000056  1c76              ADDS     r6,r6,#1              ;245
                  |L8.88|
000058  f8d40414          LDR      r0,[r4,#0x414]        ;245
00005c  f5005040          ADD      r0,r0,#0x3000         ;245
000060  f8d00ce4          LDR      r0,[r0,#0xce4]        ;245
000064  42b0              CMP      r0,r6                 ;245
000066  dcf0              BGT      |L8.74|
000068  f2044414          ADD      r4,r4,#0x414          ;248
00006c  6820              LDR      r0,[r4,#0]            ;248
00006e  f5005040          ADD      r0,r0,#0x3000         ;248
000072  f8d00cd8          LDR      r0,[r0,#0xcd8]        ;248
000076  1c40              ADDS     r0,r0,#1              ;248
000078  6821              LDR      r1,[r4,#0]            ;248
00007a  f5015140          ADD      r1,r1,#0x3000         ;248
00007e  f8c10cd4          STR      r0,[r1,#0xcd4]        ;248
000082  6820              LDR      r0,[r4,#0]            ;249
000084  f5005040          ADD      r0,r0,#0x3000         ;249
000088  f8d00ce4          LDR      r0,[r0,#0xce4]        ;249
00008c  0041              LSLS     r1,r0,#1              ;249
00008e  6820              LDR      r0,[r4,#0]            ;249
000090  f5005040          ADD      r0,r0,#0x3000         ;249
000094  f8c01ce0          STR      r1,[r0,#0xce0]        ;249
000098  6820              LDR      r0,[r4,#0]            ;250
00009a  f5005040          ADD      r0,r0,#0x3000         ;250
00009e  f8d00ce4          LDR      r0,[r0,#0xce4]        ;250
0000a2  1c80              ADDS     r0,r0,#2              ;250
0000a4  6821              LDR      r1,[r4,#0]            ;250
0000a6  f5015140          ADD      r1,r1,#0x3000         ;250
0000aa  f8c10cdc          STR      r0,[r1,#0xcdc]        ;250
0000ae  6820              LDR      r0,[r4,#0]            ;251
0000b0  f2431102          MOV      r1,#0x3102            ;251
0000b4  4401              ADD      r1,r1,r0              ;251
0000b6  f2a44414          SUB      r4,r4,#0x414          ;251
0000ba  f5005040          ADD      r0,r0,#0x3000         ;251
0000be  f8c01cbc          STR      r1,[r0,#0xcbc]        ;251
0000c2  bf00              NOP                            ;253
                  |L8.196|
0000c4  4621              MOV      r1,r4                 ;255
0000c6  4640              MOV      r0,r8                 ;255
0000c8  f7fffffe          BL       gif_getnextcode
0000cc  f8d41414          LDR      r1,[r4,#0x414]        ;255
0000d0  f5015140          ADD      r1,r1,#0x3000         ;255
0000d4  f8c10cec          STR      r0,[r1,#0xcec]        ;255
0000d8  f8d40414          LDR      r0,[r4,#0x414]        ;256
0000dc  f5005040          ADD      r0,r0,#0x3000         ;256
0000e0  f8d01cec          LDR      r1,[r0,#0xcec]        ;256
0000e4  f8d40414          LDR      r0,[r4,#0x414]        ;256
0000e8  f5005040          ADD      r0,r0,#0x3000         ;256
0000ec  f8d00ce4          LDR      r0,[r0,#0xce4]        ;256
0000f0  4281              CMP      r1,r0                 ;256
0000f2  d0e7              BEQ      |L8.196|
0000f4  f8d40414          LDR      r0,[r4,#0x414]        ;257
0000f8  f5005040          ADD      r0,r0,#0x3000         ;257
0000fc  f8d01cec          LDR      r1,[r0,#0xcec]        ;257
000100  f8d40414          LDR      r0,[r4,#0x414]        ;257
000104  f5005040          ADD      r0,r0,#0x3000         ;257
000108  f8c01cf0          STR      r1,[r0,#0xcf0]        ;257
00010c  f8d40414          LDR      r0,[r4,#0x414]        ;258
000110  f5005040          ADD      r0,r0,#0x3000         ;258
000114  e000              B        |L8.280|
                  |L8.278|
000116  e002              B        |L8.286|
                  |L8.280|
000118  f8d00cec          LDR      r0,[r0,#0xcec]        ;258
00011c  e788              B        |L8.48|
                  |L8.286|
00011e  f8d40414          LDR      r0,[r4,#0x414]        ;260
000122  f5005040          ADD      r0,r0,#0x3000         ;260
000126  f8d00ce8          LDR      r0,[r0,#0xce8]        ;260
00012a  42a8              CMP      r0,r5                 ;260
00012c  d102              BNE      |L8.308|
00012e  f06f0001          MVN      r0,#1                 ;260
000132  e77d              B        |L8.48|
                  |L8.308|
000134  462f              MOV      r7,r5                 ;261
000136  f8d40414          LDR      r0,[r4,#0x414]        ;262
00013a  f5005040          ADD      r0,r0,#0x3000         ;262
00013e  f8d00cdc          LDR      r0,[r0,#0xcdc]        ;262
000142  42a8              CMP      r0,r5                 ;262
000144  dc1e              BGT      |L8.388|
000146  f2044414          ADD      r4,r4,#0x414          ;264
00014a  6820              LDR      r0,[r4,#0]            ;264
00014c  f5005040          ADD      r0,r0,#0x3000         ;264
000150  f8902cec          LDRB     r2,[r0,#0xcec]        ;264
000154  6820              LDR      r0,[r4,#0]            ;264
000156  f5005040          ADD      r0,r0,#0x3000         ;264
00015a  f8d03cbc          LDR      r3,[r0,#0xcbc]        ;264
00015e  6820              LDR      r0,[r4,#0]            ;264
000160  f5005040          ADD      r0,r0,#0x3000         ;264
000164  f8d01cbc          LDR      r1,[r0,#0xcbc]        ;264
000168  1c49              ADDS     r1,r1,#1              ;264
00016a  6820              LDR      r0,[r4,#0]            ;264
00016c  f5005040          ADD      r0,r0,#0x3000         ;264
000170  f8c01cbc          STR      r1,[r0,#0xcbc]        ;264
000174  701a              STRB     r2,[r3,#0]            ;264
000176  6820              LDR      r0,[r4,#0]            ;265
000178  f2a44414          SUB      r4,r4,#0x414          ;265
00017c  f5005040          ADD      r0,r0,#0x3000         ;265
000180  f8d05cf0          LDR      r5,[r0,#0xcf0]        ;265
                  |L8.388|
000184  e03a              B        |L8.508|
                  |L8.390|
000186  f2044414          ADD      r4,r4,#0x414          ;269
00018a  6820              LDR      r0,[r4,#0]            ;269
00018c  f2421102          MOV      r1,#0x2102            ;269
000190  4408              ADD      r0,r0,r1              ;269
000192  5d42              LDRB     r2,[r0,r5]            ;269
000194  6820              LDR      r0,[r4,#0]            ;269
000196  f5005040          ADD      r0,r0,#0x3000         ;269
00019a  f8d03cbc          LDR      r3,[r0,#0xcbc]        ;269
00019e  6820              LDR      r0,[r4,#0]            ;269
0001a0  f5005040          ADD      r0,r0,#0x3000         ;269
0001a4  f8d00cbc          LDR      r0,[r0,#0xcbc]        ;269
0001a8  1c40              ADDS     r0,r0,#1              ;269
0001aa  6821              LDR      r1,[r4,#0]            ;269
0001ac  f5015140          ADD      r1,r1,#0x3000         ;269
0001b0  f8c10cbc          STR      r0,[r1,#0xcbc]        ;269
0001b4  701a              STRB     r2,[r3,#0]            ;269
0001b6  6820              LDR      r0,[r4,#0]            ;270
0001b8  f2a44414          SUB      r4,r4,#0x414          ;270
0001bc  f5007081          ADD      r0,r0,#0x102          ;270
0001c0  f9300015          LDRSH    r0,[r0,r5,LSL #1]     ;270
0001c4  42a8              CMP      r0,r5                 ;270
0001c6  d101              BNE      |L8.460|
0001c8  4628              MOV      r0,r5                 ;270
0001ca  e731              B        |L8.48|
                  |L8.460|
0001cc  f8d40414          LDR      r0,[r4,#0x414]        ;271
0001d0  f5005040          ADD      r0,r0,#0x3000         ;271
0001d4  f8d00cbc          LDR      r0,[r0,#0xcbc]        ;271
0001d8  f8d41414          LDR      r1,[r4,#0x414]        ;271
0001dc  f2431202          MOV      r2,#0x3102            ;271
0001e0  4411              ADD      r1,r1,r2              ;271
0001e2  1a40              SUBS     r0,r0,r1              ;271
0001e4  f64031b8          MOV      r1,#0xbb8             ;271
0001e8  4288              CMP      r0,r1                 ;271
0001ea  d301              BCC      |L8.496|
0001ec  4628              MOV      r0,r5                 ;271
0001ee  e71f              B        |L8.48|
                  |L8.496|
0001f0  f8d40414          LDR      r0,[r4,#0x414]        ;272
0001f4  f5007081          ADD      r0,r0,#0x102          ;272
0001f8  f9305015          LDRSH    r5,[r0,r5,LSL #1]     ;272
                  |L8.508|
0001fc  f8d40414          LDR      r0,[r4,#0x414]        ;267
000200  f5005040          ADD      r0,r0,#0x3000         ;267
000204  f8d00ce4          LDR      r0,[r0,#0xce4]        ;267
000208  42a8              CMP      r0,r5                 ;267
00020a  ddbc              BLE      |L8.390|
00020c  f2044414          ADD      r4,r4,#0x414          ;274
000210  6820              LDR      r0,[r4,#0]            ;274
000212  f2421102          MOV      r1,#0x2102            ;274
000216  4408              ADD      r0,r0,r1              ;274
000218  5d42              LDRB     r2,[r0,r5]            ;274
00021a  6820              LDR      r0,[r4,#0]            ;274
00021c  f5005040          ADD      r0,r0,#0x3000         ;274
000220  f8c02cec          STR      r2,[r0,#0xcec]        ;274
000224  6820              LDR      r0,[r4,#0]            ;274
000226  f5005040          ADD      r0,r0,#0x3000         ;274
00022a  f8d03cbc          LDR      r3,[r0,#0xcbc]        ;274
00022e  6820              LDR      r0,[r4,#0]            ;274
000230  f5005040          ADD      r0,r0,#0x3000         ;274
000234  f8d00cbc          LDR      r0,[r0,#0xcbc]        ;274
000238  1c41              ADDS     r1,r0,#1              ;274
00023a  6820              LDR      r0,[r4,#0]            ;274
00023c  f5005040          ADD      r0,r0,#0x3000         ;274
000240  f8c01cbc          STR      r1,[r0,#0xcbc]        ;274
000244  701a              STRB     r2,[r3,#0]            ;274
000246  6820              LDR      r0,[r4,#0]            ;275
000248  f2a44414          SUB      r4,r4,#0x414          ;275
00024c  f5005040          ADD      r0,r0,#0x3000         ;275
000250  f8d00cdc          LDR      r0,[r0,#0xcdc]        ;275
000254  4605              MOV      r5,r0                 ;275
000256  f5b05f80          CMP      r0,#0x1000            ;275
00025a  da52              BGE      |L8.770|
00025c  f2044414          ADD      r4,r4,#0x414          ;277
000260  6820              LDR      r0,[r4,#0]            ;277
000262  f5005040          ADD      r0,r0,#0x3000         ;277
000266  f8b00cf0          LDRH     r0,[r0,#0xcf0]        ;277
00026a  b201              SXTH     r1,r0                 ;277
00026c  6820              LDR      r0,[r4,#0]            ;277
00026e  f5007081          ADD      r0,r0,#0x102          ;277
000272  f8201015          STRH     r1,[r0,r5,LSL #1]     ;277
000276  6820              LDR      r0,[r4,#0]            ;278
000278  f5005040          ADD      r0,r0,#0x3000         ;278
00027c  f8900cec          LDRB     r0,[r0,#0xcec]        ;278
000280  6821              LDR      r1,[r4,#0]            ;278
000282  f2421202          MOV      r2,#0x2102            ;278
000286  4411              ADD      r1,r1,r2              ;278
000288  5548              STRB     r0,[r1,r5]            ;278
00028a  6820              LDR      r0,[r4,#0]            ;279
00028c  f5005040          ADD      r0,r0,#0x3000         ;279
000290  f8d00cdc          LDR      r0,[r0,#0xcdc]        ;279
000294  1c40              ADDS     r0,r0,#1              ;279
000296  6821              LDR      r1,[r4,#0]            ;279
000298  f5015140          ADD      r1,r1,#0x3000         ;279
00029c  f8c10cdc          STR      r0,[r1,#0xcdc]        ;279
0002a0  6820              LDR      r0,[r4,#0]            ;280
0002a2  f5005040          ADD      r0,r0,#0x3000         ;280
0002a6  f8d01cdc          LDR      r1,[r0,#0xcdc]        ;280
0002aa  6820              LDR      r0,[r4,#0]            ;280
0002ac  f2a44414          SUB      r4,r4,#0x414          ;280
0002b0  f5005040          ADD      r0,r0,#0x3000         ;280
0002b4  f8d00ce0          LDR      r0,[r0,#0xce0]        ;280
0002b8  4281              CMP      r1,r0                 ;280
0002ba  db22              BLT      |L8.770|
0002bc  f8d40414          LDR      r0,[r4,#0x414]        ;280
0002c0  f5005040          ADD      r0,r0,#0x3000         ;280
0002c4  f8d00ce0          LDR      r0,[r0,#0xce0]        ;280
0002c8  f5b05f80          CMP      r0,#0x1000            ;280
0002cc  da19              BGE      |L8.770|
0002ce  f8d40414          LDR      r0,[r4,#0x414]        ;282
0002d2  f5005040          ADD      r0,r0,#0x3000         ;282
0002d6  f8d00ce0          LDR      r0,[r0,#0xce0]        ;282
0002da  0041              LSLS     r1,r0,#1              ;282
0002dc  f8d40414          LDR      r0,[r4,#0x414]        ;282
0002e0  f5005040          ADD      r0,r0,#0x3000         ;282
0002e4  f8c01ce0          STR      r1,[r0,#0xce0]        ;282
0002e8  f8d40414          LDR      r0,[r4,#0x414]        ;283
0002ec  f5005040          ADD      r0,r0,#0x3000         ;283
0002f0  f8d00cd4          LDR      r0,[r0,#0xcd4]        ;283
0002f4  1c40              ADDS     r0,r0,#1              ;283
0002f6  f8d41414          LDR      r1,[r4,#0x414]        ;283
0002fa  f5015140          ADD      r1,r1,#0x3000         ;283
0002fe  f8c10cd4          STR      r0,[r1,#0xcd4]        ;283
                  |L8.770|
000302  f8d40414          LDR      r0,[r4,#0x414]        ;286
000306  f5005040          ADD      r0,r0,#0x3000         ;286
00030a  f8c07cf0          STR      r7,[r0,#0xcf0]        ;286
00030e  f8d40414          LDR      r0,[r4,#0x414]        ;287
000312  f5005040          ADD      r0,r0,#0x3000         ;287
000316  f8d00cbc          LDR      r0,[r0,#0xcbc]        ;287
00031a  f8d41414          LDR      r1,[r4,#0x414]        ;287
00031e  f2431202          MOV      r2,#0x3102            ;287
000322  4411              ADD      r1,r1,r2              ;287
000324  4288              CMP      r0,r1                 ;287
000326  d90e              BLS      |L8.838|
000328  f8d40414          LDR      r0,[r4,#0x414]        ;287
00032c  f5005040          ADD      r0,r0,#0x3000         ;287
000330  f8d00cbc          LDR      r0,[r0,#0xcbc]        ;287
000334  1e40              SUBS     r0,r0,#1              ;287
000336  f8d41414          LDR      r1,[r4,#0x414]        ;287
00033a  f5015140          ADD      r1,r1,#0x3000         ;287
00033e  f8c10cbc          STR      r0,[r1,#0xcbc]        ;287
000342  7800              LDRB     r0,[r0,#0]            ;287
000344  e674              B        |L8.48|
                  |L8.838|
000346  4621              MOV      r1,r4                 ;237
000348  4640              MOV      r0,r8                 ;237
00034a  f7fffffe          BL       gif_getnextcode
00034e  1e05              SUBS     r5,r0,#0              ;237
000350  f6bfae5b          BGE      |L8.10|
000354  4628              MOV      r0,r5                 ;289
000356  e66b              B        |L8.48|
;;;291    //DispGIFImage		 
                          ENDP


                          AREA ||i.gif_getnextcode||, CODE, READONLY, ALIGN=2

                  gif_getnextcode PROC
;;;197    //		 其他,正常.
;;;198    int gif_getnextcode(FIL *gfile,gif89a* gif) 
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;199    {
000004  4682              MOV      r10,r0
000006  460c              MOV      r4,r1
;;;200    	int i,j,End;
;;;201    	long Result;
;;;202    	if(gif->lzw->ReturnClear)
000008  f8d40414          LDR      r0,[r4,#0x414]
00000c  f5005040          ADD      r0,r0,#0x3000
000010  f8d00cd0          LDR      r0,[r0,#0xcd0]
000014  b170              CBZ      r0,|L9.52|
;;;203    	{
;;;204    		//The first code should be a clearcode.
;;;205    		gif->lzw->ReturnClear=0;
000016  2100              MOVS     r1,#0
000018  f8d40414          LDR      r0,[r4,#0x414]
00001c  f5005040          ADD      r0,r0,#0x3000
000020  f8c01cd0          STR      r1,[r0,#0xcd0]
;;;206    		return gif->lzw->ClearCode;
000024  f8d40414          LDR      r0,[r4,#0x414]
000028  f5005040          ADD      r0,r0,#0x3000
00002c  f8d00ce4          LDR      r0,[r0,#0xce4]
                  |L9.48|
;;;207    	}
;;;208    	End=gif->lzw->CurBit+gif->lzw->CodeSize;
;;;209    	if(End>=gif->lzw->LastBit)
;;;210    	{
;;;211    		int Count;
;;;212    		if(gif->lzw->GetDone)return-1;//Error 
;;;213    		gif->lzw->aBuffer[0]=gif->lzw->aBuffer[gif->lzw->LastByte-2];
;;;214    		gif->lzw->aBuffer[1]=gif->lzw->aBuffer[gif->lzw->LastByte-1];
;;;215    		if((Count=gif_getdatablock(gfile,&gif->lzw->aBuffer[2],300))==0)gif->lzw->GetDone=1;
;;;216    		if(Count<0)return -1;//Error 
;;;217    		gif->lzw->LastByte=2+Count;
;;;218    		gif->lzw->CurBit=(gif->lzw->CurBit-gif->lzw->LastBit)+16;
;;;219    		gif->lzw->LastBit=(2+Count)*8;
;;;220    		End=gif->lzw->CurBit+gif->lzw->CodeSize;
;;;221    	}
;;;222    	j=End>>3;
;;;223    	i=gif->lzw->CurBit>>3;
;;;224    	if(i==j)Result=(long)gif->lzw->aBuffer[i];
;;;225    	else if(i+1==j)Result=(long)gif->lzw->aBuffer[i]|((long)gif->lzw->aBuffer[i+1]<<8);
;;;226    	else Result=(long)gif->lzw->aBuffer[i]|((long)gif->lzw->aBuffer[i+1]<<8)|((long)gif->lzw->aBuffer[i+2]<<16);
;;;227    	Result=(Result>>(gif->lzw->CurBit&0x7))&_aMaskTbl[gif->lzw->CodeSize];
;;;228    	gif->lzw->CurBit+=gif->lzw->CodeSize;
;;;229    	return(int)Result;
;;;230    }	
000030  e8bd87f0          POP      {r4-r10,pc}
                  |L9.52|
000034  f8d40414          LDR      r0,[r4,#0x414]        ;208
000038  f5005040          ADD      r0,r0,#0x3000         ;208
00003c  f8d01cc0          LDR      r1,[r0,#0xcc0]        ;208
000040  f8d40414          LDR      r0,[r4,#0x414]        ;208
000044  f5005040          ADD      r0,r0,#0x3000         ;208
000048  f8d00cd4          LDR      r0,[r0,#0xcd4]        ;208
00004c  eb010900          ADD      r9,r1,r0              ;208
000050  f8d40414          LDR      r0,[r4,#0x414]        ;209
000054  f5005040          ADD      r0,r0,#0x3000         ;209
000058  f8d00cc4          LDR      r0,[r0,#0xcc4]        ;209
00005c  4548              CMP      r0,r9                 ;209
00005e  dc5f              BGT      |L9.288|
000060  f8d40414          LDR      r0,[r4,#0x414]        ;212
000064  f5005040          ADD      r0,r0,#0x3000         ;212
000068  f8d00cc8          LDR      r0,[r0,#0xcc8]        ;212
00006c  b110              CBZ      r0,|L9.116|
00006e  f04f30ff          MOV      r0,#0xffffffff        ;212
000072  e7dd              B        |L9.48|
                  |L9.116|
000074  f2044414          ADD      r4,r4,#0x414          ;213
000078  6821              LDR      r1,[r4,#0]            ;213
00007a  f64340cc          MOV      r0,#0x3ccc            ;213
00007e  5840              LDR      r0,[r0,r1]            ;213
000080  1e80              SUBS     r0,r0,#2              ;213
000082  5c08              LDRB     r0,[r1,r0]            ;213
000084  7008              STRB     r0,[r1,#0]            ;213
000086  6821              LDR      r1,[r4,#0]            ;214
000088  f64340cc          MOV      r0,#0x3ccc            ;214
00008c  5840              LDR      r0,[r0,r1]            ;214
00008e  1e40              SUBS     r0,r0,#1              ;214
000090  5c08              LDRB     r0,[r1,r0]            ;214
000092  7048              STRB     r0,[r1,#1]            ;214
000094  6820              LDR      r0,[r4,#0]            ;215
000096  f2a44414          SUB      r4,r4,#0x414          ;215
00009a  1c81              ADDS     r1,r0,#2              ;215
00009c  f44f7296          MOV      r2,#0x12c             ;215
0000a0  4650              MOV      r0,r10                ;215
0000a2  f7fffffe          BL       gif_getdatablock
0000a6  1e07              SUBS     r7,r0,#0              ;215
0000a8  d106              BNE      |L9.184|
0000aa  2101              MOVS     r1,#1                 ;215
0000ac  f8d40414          LDR      r0,[r4,#0x414]        ;215
0000b0  f5005040          ADD      r0,r0,#0x3000         ;215
0000b4  f8c01cc8          STR      r1,[r0,#0xcc8]        ;215
                  |L9.184|
0000b8  2f00              CMP      r7,#0                 ;216
0000ba  da02              BGE      |L9.194|
0000bc  f04f30ff          MOV      r0,#0xffffffff        ;216
0000c0  e7b6              B        |L9.48|
                  |L9.194|
0000c2  1cb8              ADDS     r0,r7,#2              ;217
0000c4  f2044414          ADD      r4,r4,#0x414          ;217
0000c8  6821              LDR      r1,[r4,#0]            ;217
0000ca  f5015140          ADD      r1,r1,#0x3000         ;217
0000ce  f8c10ccc          STR      r0,[r1,#0xccc]        ;217
0000d2  6820              LDR      r0,[r4,#0]            ;218
0000d4  f5005040          ADD      r0,r0,#0x3000         ;218
0000d8  f8d01cc0          LDR      r1,[r0,#0xcc0]        ;218
0000dc  6820              LDR      r0,[r4,#0]            ;218
0000de  f5005040          ADD      r0,r0,#0x3000         ;218
0000e2  f8d00cc4          LDR      r0,[r0,#0xcc4]        ;218
0000e6  1a08              SUBS     r0,r1,r0              ;218
0000e8  3010              ADDS     r0,r0,#0x10           ;218
0000ea  6821              LDR      r1,[r4,#0]            ;218
0000ec  f5015140          ADD      r1,r1,#0x3000         ;218
0000f0  f8c10cc0          STR      r0,[r1,#0xcc0]        ;218
0000f4  1cb8              ADDS     r0,r7,#2              ;219
0000f6  00c1              LSLS     r1,r0,#3              ;219
0000f8  6820              LDR      r0,[r4,#0]            ;219
0000fa  f5005040          ADD      r0,r0,#0x3000         ;219
0000fe  f8c01cc4          STR      r1,[r0,#0xcc4]        ;219
000102  6820              LDR      r0,[r4,#0]            ;220
000104  f5005040          ADD      r0,r0,#0x3000         ;220
000108  f8d01cc0          LDR      r1,[r0,#0xcc0]        ;220
00010c  6820              LDR      r0,[r4,#0]            ;220
00010e  f2a44414          SUB      r4,r4,#0x414          ;220
000112  f5005040          ADD      r0,r0,#0x3000         ;220
000116  f8d00cd4          LDR      r0,[r0,#0xcd4]        ;220
00011a  eb010900          ADD      r9,r1,r0              ;220
00011e  bf00              NOP                            ;221
                  |L9.288|
000120  ea4f08e9          ASR      r8,r9,#3              ;222
000124  f8d40414          LDR      r0,[r4,#0x414]        ;223
000128  f5005040          ADD      r0,r0,#0x3000         ;223
00012c  f8d00cc0          LDR      r0,[r0,#0xcc0]        ;223
000130  10c5              ASRS     r5,r0,#3              ;223
000132  4545              CMP      r5,r8                 ;224
000134  d103              BNE      |L9.318|
000136  f8d40414          LDR      r0,[r4,#0x414]        ;224
00013a  5d46              LDRB     r6,[r0,r5]            ;224
00013c  e019              B        |L9.370|
                  |L9.318|
00013e  1c68              ADDS     r0,r5,#1              ;225
000140  4540              CMP      r0,r8                 ;225
000142  d108              BNE      |L9.342|
000144  f8d40414          LDR      r0,[r4,#0x414]        ;225
000148  5d41              LDRB     r1,[r0,r5]            ;225
00014a  4602              MOV      r2,r0                 ;225
00014c  1c68              ADDS     r0,r5,#1              ;225
00014e  5c10              LDRB     r0,[r2,r0]            ;225
000150  ea412600          ORR      r6,r1,r0,LSL #8       ;225
000154  e00d              B        |L9.370|
                  |L9.342|
000156  f8d40414          LDR      r0,[r4,#0x414]        ;226
00015a  5d41              LDRB     r1,[r0,r5]            ;226
00015c  4602              MOV      r2,r0                 ;226
00015e  1c68              ADDS     r0,r5,#1              ;226
000160  5c10              LDRB     r0,[r2,r0]            ;226
000162  ea412100          ORR      r1,r1,r0,LSL #8       ;226
000166  f8d42414          LDR      r2,[r4,#0x414]        ;226
00016a  1ca8              ADDS     r0,r5,#2              ;226
00016c  5c10              LDRB     r0,[r2,r0]            ;226
00016e  ea414600          ORR      r6,r1,r0,LSL #16      ;226
                  |L9.370|
000172  f2044414          ADD      r4,r4,#0x414          ;227
000176  6820              LDR      r0,[r4,#0]            ;227
000178  f5005040          ADD      r0,r0,#0x3000         ;227
00017c  f8900cc0          LDRB     r0,[r0,#0xcc0]        ;227
000180  f0000107          AND      r1,r0,#7              ;227
000184  fa46f001          ASR      r0,r6,r1              ;227
000188  6821              LDR      r1,[r4,#0]            ;227
00018a  f5015140          ADD      r1,r1,#0x3000         ;227
00018e  f8d11cd4          LDR      r1,[r1,#0xcd4]        ;227
000192  4a0c              LDR      r2,|L9.452|
000194  f8321011          LDRH     r1,[r2,r1,LSL #1]     ;227
000198  ea000601          AND      r6,r0,r1              ;227
00019c  6820              LDR      r0,[r4,#0]            ;228
00019e  f5005040          ADD      r0,r0,#0x3000         ;228
0001a2  f8d01cc0          LDR      r1,[r0,#0xcc0]        ;228
0001a6  6820              LDR      r0,[r4,#0]            ;228
0001a8  f5005040          ADD      r0,r0,#0x3000         ;228
0001ac  f8d00cd4          LDR      r0,[r0,#0xcd4]        ;228
0001b0  4401              ADD      r1,r1,r0              ;228
0001b2  6820              LDR      r0,[r4,#0]            ;228
0001b4  f2a44414          SUB      r4,r4,#0x414          ;228
0001b8  f5005040          ADD      r0,r0,#0x3000         ;228
0001bc  f8c01cc0          STR      r1,[r0,#0xcc0]        ;228
0001c0  4630              MOV      r0,r6                 ;229
0001c2  e735              B        |L9.48|
;;;231    //得到LZW的下一个码
                          ENDP

                  |L9.452|
                          DCD      _aMaskTbl

                          AREA ||i.gif_getrgb565||, CODE, READONLY, ALIGN=1

                  gif_getrgb565 PROC
;;;58     //返回值:RGB565颜色.
;;;59     u16 gif_getrgb565(u8 *ctb) 
000000  b510              PUSH     {r4,lr}
;;;60     {
000002  4601              MOV      r1,r0
;;;61     	u16 r,g,b;
;;;62     	r=(ctb[0]>>3)&0X1F;
000004  7808              LDRB     r0,[r1,#0]
000006  08c2              LSRS     r2,r0,#3
;;;63     	g=(ctb[1]>>2)&0X3F;
000008  7848              LDRB     r0,[r1,#1]
00000a  0883              LSRS     r3,r0,#2
;;;64     	b=(ctb[2]>>3)&0X1F;
00000c  7888              LDRB     r0,[r1,#2]
00000e  08c4              LSRS     r4,r0,#3
;;;65     	return b+(g<<5)+(r<<11);
000010  eb041043          ADD      r0,r4,r3,LSL #5
000014  eb0020c2          ADD      r0,r0,r2,LSL #11
000018  b280              UXTH     r0,r0
;;;66     }
00001a  bd10              POP      {r4,pc}
;;;67     //读取颜色表
                          ENDP


                          AREA ||i.gif_initlzw||, CODE, READONLY, ALIGN=1

                  gif_initlzw PROC
;;;120    //codesize:lzw码长度
;;;121    void gif_initlzw(gif89a* gif,u8 codesize) 
000000  b570              PUSH     {r4-r6,lr}
;;;122    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;123     	mymemset((u8 *)gif->lzw, 0, sizeof(LZW_INFO));
000006  f2044414          ADD      r4,r4,#0x414
00000a  6820              LDR      r0,[r4,#0]
00000c  f64342f4          MOV      r2,#0x3cf4
000010  2100              MOVS     r1,#0
000012  f7fffffe          BL       mymemset
;;;124    	gif->lzw->SetCodeSize  = codesize;
000016  6820              LDR      r0,[r4,#0]
000018  f5005040          ADD      r0,r0,#0x3000
00001c  f8c05cd8          STR      r5,[r0,#0xcd8]
;;;125    	gif->lzw->CodeSize     = codesize + 1;
000020  1c68              ADDS     r0,r5,#1
000022  6821              LDR      r1,[r4,#0]
000024  f5015140          ADD      r1,r1,#0x3000
000028  f8c10cd4          STR      r0,[r1,#0xcd4]
;;;126    	gif->lzw->ClearCode    = (1 << codesize);
00002c  2001              MOVS     r0,#1
00002e  40a8              LSLS     r0,r0,r5
000030  6821              LDR      r1,[r4,#0]
000032  f5015140          ADD      r1,r1,#0x3000
000036  f8c10ce4          STR      r0,[r1,#0xce4]
;;;127    	gif->lzw->EndCode      = (1 << codesize) + 1;
00003a  2001              MOVS     r0,#1
00003c  40a8              LSLS     r0,r0,r5
00003e  1c40              ADDS     r0,r0,#1
000040  6821              LDR      r1,[r4,#0]
000042  f5015140          ADD      r1,r1,#0x3000
000046  f8c10ce8          STR      r0,[r1,#0xce8]
;;;128    	gif->lzw->MaxCode      = (1 << codesize) + 2;
00004a  2001              MOVS     r0,#1
00004c  40a8              LSLS     r0,r0,r5
00004e  1c80              ADDS     r0,r0,#2
000050  6821              LDR      r1,[r4,#0]
000052  f5015140          ADD      r1,r1,#0x3000
000056  f8c10cdc          STR      r0,[r1,#0xcdc]
;;;129    	gif->lzw->MaxCodeSize  = (1 << codesize) << 1;
00005a  2001              MOVS     r0,#1
00005c  40a8              LSLS     r0,r0,r5
00005e  0041              LSLS     r1,r0,#1
000060  6820              LDR      r0,[r4,#0]
000062  f5005040          ADD      r0,r0,#0x3000
000066  f8c01ce0          STR      r1,[r0,#0xce0]
;;;130    	gif->lzw->ReturnClear  = 1;
00006a  2101              MOVS     r1,#1
00006c  6820              LDR      r0,[r4,#0]
00006e  f5005040          ADD      r0,r0,#0x3000
000072  f8c01cd0          STR      r1,[r0,#0xcd0]
;;;131    	gif->lzw->LastByte     = 2;
000076  2102              MOVS     r1,#2
000078  6820              LDR      r0,[r4,#0]
00007a  f5005040          ADD      r0,r0,#0x3000
00007e  f8c01ccc          STR      r1,[r0,#0xccc]
;;;132    	gif->lzw->sp           = gif->lzw->aDecompBuffer;
000082  6820              LDR      r0,[r4,#0]
000084  f2431102          MOV      r1,#0x3102
000088  4401              ADD      r1,r1,r0
00008a  f2a44414          SUB      r4,r4,#0x414
00008e  f5005040          ADD      r0,r0,#0x3000
000092  f8c01cbc          STR      r1,[r0,#0xcbc]
;;;133    }
000096  bd70              POP      {r4-r6,pc}
;;;134    
                          ENDP


                          AREA ||i.gif_quit||, CODE, READONLY, ALIGN=2

                  gif_quit PROC
;;;484    //退出当前解码.
;;;485    void gif_quit(void)
000000  2000              MOVS     r0,#0
;;;486    {
;;;487    	gifdecoding=0;
000002  4901              LDR      r1,|L12.8|
000004  7008              STRB     r0,[r1,#0]
;;;488    }
000006  4770              BX       lr
;;;489    
                          ENDP

                  |L12.8|
                          DCD      gifdecoding

                          AREA ||i.gif_readcolortbl||, CODE, READONLY, ALIGN=1

                  gif_readcolortbl PROC
;;;71     //返回值:0,OK;其他,失败;
;;;72     u8 gif_readcolortbl(FIL *file,gif89a * gif,u16 num)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;73     {
000004  4680              MOV      r8,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;74     	u8 rgb[3];
;;;75     	u16 t;
;;;76     	u8 res;
;;;77     	u32 readed;
;;;78     	for(t=0;t<num;t++)
00000a  2400              MOVS     r4,#0
00000c  e014              B        |L13.56|
                  |L13.14|
;;;79     	{
;;;80     		res=f_read(file,rgb,3,(UINT*)&readed);
00000e  466b              MOV      r3,sp
000010  2203              MOVS     r2,#3
000012  a901              ADD      r1,sp,#4
000014  4640              MOV      r0,r8
000016  f7fffffe          BL       f_read
00001a  4605              MOV      r5,r0
;;;81     		if(res)return 1;//读错误
00001c  b115              CBZ      r5,|L13.36|
00001e  2001              MOVS     r0,#1
                  |L13.32|
;;;82     		gif->colortbl[t]=gif_getrgb565(rgb);
;;;83     	}
;;;84     	return 0;
;;;85     } 
000020  e8bd81fc          POP      {r2-r8,pc}
                  |L13.36|
000024  a801              ADD      r0,sp,#4              ;82
000026  f7fffffe          BL       gif_getrgb565
00002a  f1060110          ADD      r1,r6,#0x10           ;82
00002e  eb010144          ADD      r1,r1,r4,LSL #1       ;82
000032  8008              STRH     r0,[r1,#0]            ;82
000034  1c60              ADDS     r0,r4,#1              ;78
000036  b284              UXTH     r4,r0                 ;78
                  |L13.56|
000038  42bc              CMP      r4,r7                 ;78
00003a  dbe8              BLT      |L13.14|
00003c  2000              MOVS     r0,#0                 ;84
00003e  e7ef              B        |L13.32|
;;;86     //得到逻辑屏幕描述,图像尺寸等
                          ENDP


                          AREA ||i.gif_readextension||, CODE, READONLY, ALIGN=1

                  gif_readextension PROC
;;;169    // 		 其他,失败
;;;170    u8 gif_readextension(FIL *gfile,gif89a* gif, int *pTransIndex,u8 *pDisposal)
000000  b5fe              PUSH     {r1-r7,lr}
;;;171    {
000002  4607              MOV      r7,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
000008  461e              MOV      r6,r3
;;;172    	u8 temp;
;;;173    	u32 readed;	 
;;;174    	u8 buf[4];  
;;;175    	f_read(gfile,&temp,1,(UINT*)&readed);//得到长度		 
00000a  ab01              ADD      r3,sp,#4
00000c  2201              MOVS     r2,#1
00000e  a902              ADD      r1,sp,#8
000010  4638              MOV      r0,r7
000012  f7fffffe          BL       f_read
;;;176    	switch(temp)
000016  f89d0008          LDRB     r0,[sp,#8]
00001a  2801              CMP      r0,#1
00001c  d006              BEQ      |L14.44|
00001e  28f9              CMP      r0,#0xf9
000020  d011              BEQ      |L14.70|
000022  28fe              CMP      r0,#0xfe
000024  d004              BEQ      |L14.48|
000026  28ff              CMP      r0,#0xff
000028  d138              BNE      |L14.156|
00002a  e000              B        |L14.46|
                  |L14.44|
;;;177    	{
;;;178    		case GIF_PLAINTEXT:
;;;179    		case GIF_APPLICATION:
00002c  bf00              NOP      
                  |L14.46|
;;;180    		case GIF_COMMENT:
00002e  bf00              NOP      
                  |L14.48|
;;;181    			while(gif_getdatablock(gfile,0,256)>0);			//获取数据块
000030  bf00              NOP      
                  |L14.50|
000032  f44f7280          MOV      r2,#0x100
000036  2100              MOVS     r1,#0
000038  4638              MOV      r0,r7
00003a  f7fffffe          BL       gif_getdatablock
00003e  2800              CMP      r0,#0
000040  dcf7              BGT      |L14.50|
;;;182    			return 0;
000042  2000              MOVS     r0,#0
                  |L14.68|
;;;183    		case GIF_GRAPHICCTL://图形控制扩展块
;;;184    			if(gif_getdatablock(gfile,buf,4)!=4)return 1;	//图形控制扩展块的长度必须为4 
;;;185     		 	gif->delay=(buf[2]<<8)|buf[1];					//得到延时 
;;;186    			*pDisposal=(buf[0]>>2)&0x7; 	    			//得到处理方法
;;;187    			if((buf[0]&0x1)!=0)*pTransIndex=buf[3];			//透明色表 
;;;188    			f_read(gfile,&temp,1,(UINT*)&readed);	 		//得到LZW长度	
;;;189     			if(temp!=0)return 1;							//读取数据块结束符错误.
;;;190    			return 0;
;;;191    	}
;;;192    	return 1;//错误的数据
;;;193    }
000044  bdfe              POP      {r1-r7,pc}
                  |L14.70|
000046  2204              MOVS     r2,#4                 ;184
000048  4669              MOV      r1,sp                 ;184
00004a  4638              MOV      r0,r7                 ;184
00004c  f7fffffe          BL       gif_getdatablock
000050  2804              CMP      r0,#4                 ;184
000052  d001              BEQ      |L14.88|
000054  2001              MOVS     r0,#1                 ;184
000056  e7f5              B        |L14.68|
                  |L14.88|
000058  f89d0001          LDRB     r0,[sp,#1]            ;185
00005c  f89d1002          LDRB     r1,[sp,#2]            ;185
000060  ea402001          ORR      r0,r0,r1,LSL #8       ;185
000064  f8a40412          STRH     r0,[r4,#0x412]        ;185
000068  f89d0000          LDRB     r0,[sp,#0]            ;186
00006c  f3c00082          UBFX     r0,r0,#2,#3           ;186
000070  7030              STRB     r0,[r6,#0]            ;186
000072  f89d0000          LDRB     r0,[sp,#0]            ;187
000076  f0000001          AND      r0,r0,#1              ;187
00007a  b110              CBZ      r0,|L14.130|
00007c  f89d0003          LDRB     r0,[sp,#3]            ;187
000080  6028              STR      r0,[r5,#0]            ;187
                  |L14.130|
000082  ab01              ADD      r3,sp,#4              ;188
000084  2201              MOVS     r2,#1                 ;188
000086  a902              ADD      r1,sp,#8              ;188
000088  4638              MOV      r0,r7                 ;188
00008a  f7fffffe          BL       f_read
00008e  f89d0008          LDRB     r0,[sp,#8]            ;189
000092  b108              CBZ      r0,|L14.152|
000094  2001              MOVS     r0,#1                 ;189
000096  e7d5              B        |L14.68|
                  |L14.152|
000098  2000              MOVS     r0,#0                 ;190
00009a  e7d3              B        |L14.68|
                  |L14.156|
00009c  2001              MOVS     r0,#1                 ;192
00009e  e7d1              B        |L14.68|
;;;194    
                          ENDP


                          AREA ||i.gif_recovergctbl||, CODE, READONLY, ALIGN=1

                  gif_recovergctbl PROC
;;;111    //gif:gif信息;
;;;112    void gif_recovergctbl(gif89a* gif)
000000  4601              MOV      r1,r0
;;;113    {
;;;114    	u16 i=0;
000002  2000              MOVS     r0,#0
;;;115    	for(i=0;i<256;i++)gif->colortbl[i]=gif->bkpcolortbl[i];//恢复全局颜色.
000004  bf00              NOP      
000006  e00b              B        |L15.32|
                  |L15.8|
000008  f5017204          ADD      r2,r1,#0x210
00000c  eb020240          ADD      r2,r2,r0,LSL #1
000010  8813              LDRH     r3,[r2,#0]
000012  f1010210          ADD      r2,r1,#0x10
000016  eb020240          ADD      r2,r2,r0,LSL #1
00001a  8013              STRH     r3,[r2,#0]
00001c  1c42              ADDS     r2,r0,#1
00001e  b290              UXTH     r0,r2
                  |L15.32|
000020  28ff              CMP      r0,#0xff
000022  ddf1              BLE      |L15.8|
;;;116    }
000024  4770              BX       lr
;;;117    
                          ENDP


                          AREA ||i.gif_savegctbl||, CODE, READONLY, ALIGN=1

                  gif_savegctbl PROC
;;;104    //gif:gif信息;
;;;105    void gif_savegctbl(gif89a* gif)
000000  4601              MOV      r1,r0
;;;106    {
;;;107    	u16 i=0;
000002  2000              MOVS     r0,#0
;;;108    	for(i=0;i<256;i++)gif->bkpcolortbl[i]=gif->colortbl[i];//保存全局颜色.
000004  bf00              NOP      
000006  e00b              B        |L16.32|
                  |L16.8|
000008  f1010210          ADD      r2,r1,#0x10
00000c  eb020240          ADD      r2,r2,r0,LSL #1
000010  8813              LDRH     r3,[r2,#0]
000012  f5017204          ADD      r2,r1,#0x210
000016  eb020240          ADD      r2,r2,r0,LSL #1
00001a  8013              STRH     r3,[r2,#0]
00001c  1c42              ADDS     r2,r0,#1
00001e  b290              UXTH     r0,r2
                  |L16.32|
000020  28ff              CMP      r0,#0xff
000022  ddf1              BLE      |L16.8|
;;;109    }
000024  4770              BX       lr
;;;110    //恢复全局颜色表	 
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  _aMaskTbl
000000  00000001          DCW      0x0000,0x0001
000004  00030007          DCW      0x0003,0x0007
000008  000f001f          DCW      0x000f,0x001f
00000c  003f007f          DCW      0x003f,0x007f
000010  00ff01ff          DCW      0x00ff,0x01ff
000014  03ff07ff          DCW      0x03ff,0x07ff
000018  0fff1fff          DCW      0x0fff,0x1fff
00001c  3fff7fff          DCW      0x3fff,0x7fff
                  _aInterlaceOffset
000020  08080402          DCB      0x08,0x08,0x04,0x02
                  _aInterlaceYPos
000024  00040201          DCB      0x00,0x04,0x02,0x01

                          AREA ||.data||, DATA, ALIGN=0

                  gifdecoding
000000  00                DCB      0x00
