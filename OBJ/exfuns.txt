; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\exfuns.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\exfuns.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\ATK-ESP8266 -I..\CORE -I..\FATFS\src -I..\FATFS\exfuns -I..\HARDWARE\24CXX -I..\HARDWARE\IIC -I..\HARDWARE\KEY -I..\HARDWARE\LCD -I..\HARDWARE\LED -I..\HARDWARE\SDIO -I..\HARDWARE\SPI -I..\HARDWARE\TIMER -I..\HARDWARE\TOUCH -I..\HARDWARE\USART3 -I..\HARDWARE\W25QXX -I..\MALLOC -I..\STM32F10x_FWLib\inc -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\TEXT -I..\USER -I..\USMART -I..\PICTURE -I..\HARDWARE\OV7725 -I..\HARDWARE\EXTI -I..\HARDWARE\BEEP -I..\HARDWARE\DHT11 -I.\RTE\_Target_1 -ID:\Users\86132\AppData\Local\Arm\Packs\Keil\STM32F1xx_DFP\2.3.0\Device\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=529 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\exfuns.crf ..\FATFS\exfuns\exfuns.c]
                          THUMB

                          AREA ||i.char_upper||, CODE, READONLY, ALIGN=1

                  char_upper PROC
;;;59     //将小写字母转为大写字母,如果是数字,则保持不变.
;;;60     u8 char_upper(u8 c)
000000  4601              MOV      r1,r0
;;;61     {
;;;62     	if(c<'A')return c;//数字,保持不变.
000002  2941              CMP      r1,#0x41
000004  da01              BGE      |L1.10|
000006  4608              MOV      r0,r1
                  |L1.8|
;;;63     	if(c>='a')return c-0x20;//变为大写.
;;;64     	else return c;//大写,保持不变
;;;65     }	      
000008  4770              BX       lr
                  |L1.10|
00000a  2961              CMP      r1,#0x61              ;63
00000c  db03              BLT      |L1.22|
00000e  f1a10020          SUB      r0,r1,#0x20           ;63
000012  b2c0              UXTB     r0,r0                 ;63
000014  e7f8              B        |L1.8|
                  |L1.22|
000016  4608              MOV      r0,r1                 ;64
000018  e7f6              B        |L1.8|
;;;66     //报告文件的类型
                          ENDP


                          AREA ||i.exf_getfree||, CODE, READONLY, ALIGN=1

                  exf_getfree PROC
;;;112    //返回值:0,正常.其他,错误代码
;;;113    u8 exf_getfree(u8 *drv,u32 *total,u32 *free)
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;114    {
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;115    	FATFS *fs1;
;;;116    	u8 res;
;;;117        u32 fre_clust=0, fre_sect=0, tot_sect=0;
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
00000e  4680              MOV      r8,r0
000010  4681              MOV      r9,r0
;;;118        //得到磁盘信息及空闲簇数量
;;;119        res =(u32)f_getfree((const TCHAR*)drv, (DWORD*)&fre_clust, &fs1);
000012  aa01              ADD      r2,sp,#4
000014  4669              MOV      r1,sp
000016  4638              MOV      r0,r7
000018  f7fffffe          BL       f_getfree
00001c  4606              MOV      r6,r0
;;;120        if(res==0)
00001e  b98e              CBNZ     r6,|L2.68|
;;;121    	{											   
;;;122    	    tot_sect=(fs1->n_fatent-2)*fs1->csize;	//得到总扇区数
000020  9801              LDR      r0,[sp,#4]
000022  6940              LDR      r0,[r0,#0x14]
000024  1e80              SUBS     r0,r0,#2
000026  9901              LDR      r1,[sp,#4]
000028  7889              LDRB     r1,[r1,#2]
00002a  fb00f901          MUL      r9,r0,r1
;;;123    	    fre_sect=fre_clust*fs1->csize;			//得到空闲扇区数	   
00002e  9801              LDR      r0,[sp,#4]
000030  7880              LDRB     r0,[r0,#2]
000032  9900              LDR      r1,[sp,#0]
000034  fb00f801          MUL      r8,r0,r1
;;;124    #if _MAX_SS!=512				  				//扇区大小不是512字节,则转换为512字节
;;;125    		tot_sect*=fs1->ssize/512;
;;;126    		fre_sect*=fs1->ssize/512;
;;;127    #endif	  
;;;128    		*total=tot_sect>>1;	//单位为KB
000038  ea4f0059          LSR      r0,r9,#1
00003c  6020              STR      r0,[r4,#0]
;;;129    		*free=fre_sect>>1;	//单位为KB 
00003e  ea4f0058          LSR      r0,r8,#1
000042  6028              STR      r0,[r5,#0]
                  |L2.68|
;;;130     	}
;;;131    	return res;
000044  4630              MOV      r0,r6
;;;132    }	
000046  e8bd87fc          POP      {r2-r10,pc}
;;;133    
                          ENDP


                          AREA ||i.exfuns_init||, CODE, READONLY, ALIGN=2

                  exfuns_init PROC
;;;43     //1,失败
;;;44     u8 exfuns_init(void)
000000  b510              PUSH     {r4,lr}
;;;45     {
;;;46     	u8 i;
;;;47     	for(i=0;i<_VOLUMES;i++)
000002  2400              MOVS     r4,#0
000004  e00e              B        |L3.36|
                  |L3.6|
;;;48     	{
;;;49     		fs[i]=(FATFS*)mymalloc(SRAMIN,sizeof(FATFS));	//为磁盘i工作区申请内存	
000006  f44f710c          MOV      r1,#0x230
00000a  2000              MOVS     r0,#0
00000c  f7fffffe          BL       mymalloc
000010  4918              LDR      r1,|L3.116|
000012  f8410024          STR      r0,[r1,r4,LSL #2]
;;;50     		if(!fs[i])break;
000016  4608              MOV      r0,r1
000018  f8500024          LDR      r0,[r0,r4,LSL #2]
00001c  b900              CBNZ     r0,|L3.32|
00001e  e003              B        |L3.40|
                  |L3.32|
000020  1c60              ADDS     r0,r4,#1              ;47
000022  b2c4              UXTB     r4,r0                 ;47
                  |L3.36|
000024  2c02              CMP      r4,#2                 ;47
000026  dbee              BLT      |L3.6|
                  |L3.40|
000028  bf00              NOP      
;;;51     	}
;;;52     	file=(FIL*)mymalloc(SRAMIN,sizeof(FIL));		//为file申请内存
00002a  f44f710a          MOV      r1,#0x228
00002e  2000              MOVS     r0,#0
000030  f7fffffe          BL       mymalloc
000034  4910              LDR      r1,|L3.120|
000036  6008              STR      r0,[r1,#0]  ; file
;;;53     	ftemp=(FIL*)mymalloc(SRAMIN,sizeof(FIL));		//为ftemp申请内存
000038  f44f710a          MOV      r1,#0x228
00003c  2000              MOVS     r0,#0
00003e  f7fffffe          BL       mymalloc
000042  490e              LDR      r1,|L3.124|
000044  6008              STR      r0,[r1,#0]  ; ftemp
;;;54     	fatbuf=(u8*)mymalloc(SRAMIN,512);				//为fatbuf申请内存
000046  f44f7100          MOV      r1,#0x200
00004a  2000              MOVS     r0,#0
00004c  f7fffffe          BL       mymalloc
000050  490b              LDR      r1,|L3.128|
000052  6008              STR      r0,[r1,#0]  ; fatbuf
;;;55     	if(i==_VOLUMES&&file&&ftemp&&fatbuf)return 0;  //申请有一个失败,即失败.
000054  2c02              CMP      r4,#2
000056  d10a              BNE      |L3.110|
000058  4807              LDR      r0,|L3.120|
00005a  6800              LDR      r0,[r0,#0]  ; file
00005c  b138              CBZ      r0,|L3.110|
00005e  4807              LDR      r0,|L3.124|
000060  6800              LDR      r0,[r0,#0]  ; ftemp
000062  b120              CBZ      r0,|L3.110|
000064  4608              MOV      r0,r1
000066  6800              LDR      r0,[r0,#0]  ; fatbuf
000068  b108              CBZ      r0,|L3.110|
00006a  2000              MOVS     r0,#0
                  |L3.108|
;;;56     	else return 1;	
;;;57     }
00006c  bd10              POP      {r4,pc}
                  |L3.110|
00006e  2001              MOVS     r0,#1                 ;56
000070  e7fc              B        |L3.108|
;;;58     
                          ENDP

000072  0000              DCW      0x0000
                  |L3.116|
                          DCD      ||fs||
                  |L3.120|
                          DCD      file
                  |L3.124|
                          DCD      ftemp
                  |L3.128|
                          DCD      fatbuf

                          AREA ||i.f_typetell||, CODE, READONLY, ALIGN=2

                  f_typetell PROC
;;;69     //		 其他,高四位表示所属大类,低四位表示所属小类.
;;;70     u8 f_typetell(u8 *fname)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;71     {
000004  4605              MOV      r5,r0
;;;72     	u8 tbuf[5];
;;;73     	u8 *attr='\0';//后缀名
000006  2700              MOVS     r7,#0
;;;74     	u8 i=0,j;
000008  2400              MOVS     r4,#0
;;;75     	while(i<250)
00000a  e005              B        |L4.24|
                  |L4.12|
;;;76     	{
;;;77     		i++;
00000c  1c60              ADDS     r0,r4,#1
00000e  b2c4              UXTB     r4,r0
;;;78     		if(*fname=='\0')break;//偏移到了最后了.
000010  7828              LDRB     r0,[r5,#0]
000012  b900              CBNZ     r0,|L4.22|
000014  e002              B        |L4.28|
                  |L4.22|
;;;79     		fname++;
000016  1c6d              ADDS     r5,r5,#1
                  |L4.24|
000018  2cfa              CMP      r4,#0xfa              ;75
00001a  dbf7              BLT      |L4.12|
                  |L4.28|
00001c  bf00              NOP                            ;78
;;;80     	}
;;;81     	if(i==250)return 0XFF;//错误的字符串.
00001e  2cfa              CMP      r4,#0xfa
000020  d102              BNE      |L4.40|
000022  20ff              MOVS     r0,#0xff
                  |L4.36|
;;;82      	for(i=0;i<5;i++)//得到后缀名
;;;83     	{
;;;84     		fname--;
;;;85     		if(*fname=='.')
;;;86     		{
;;;87     			fname++;
;;;88     			attr=fname;
;;;89     			break;
;;;90     		}
;;;91       	}
;;;92     	strcpy((char *)tbuf,(const char*)attr);//copy
;;;93      	for(i=0;i<4;i++)tbuf[i]=char_upper(tbuf[i]);//全部变为大写 
;;;94     	for(i=0;i<FILE_MAX_TYPE_NUM;i++)	//大类对比
;;;95     	{
;;;96     		for(j=0;j<FILE_MAX_SUBT_NUM;j++)//子类对比
;;;97     		{
;;;98     			if(*FILE_TYPE_TBL[i][j]==0)break;//此组已经没有可对比的成员了.
;;;99     			if(strcmp((const char *)FILE_TYPE_TBL[i][j],(const char *)tbuf)==0)//找到了
;;;100    			{
;;;101    				return (i<<4)|j;
;;;102    			}
;;;103    		}
;;;104    	}
;;;105    	return 0XFF;//没找到		 			   
;;;106    }	 
000024  e8bd81fc          POP      {r2-r8,pc}
                  |L4.40|
000028  2400              MOVS     r4,#0                 ;82
00002a  e008              B        |L4.62|
                  |L4.44|
00002c  1e6d              SUBS     r5,r5,#1              ;84
00002e  7828              LDRB     r0,[r5,#0]            ;85
000030  282e              CMP      r0,#0x2e              ;85
000032  d102              BNE      |L4.58|
000034  1c6d              ADDS     r5,r5,#1              ;87
000036  462f              MOV      r7,r5                 ;88
000038  e003              B        |L4.66|
                  |L4.58|
00003a  1c60              ADDS     r0,r4,#1              ;82
00003c  b2c4              UXTB     r4,r0                 ;82
                  |L4.62|
00003e  2c05              CMP      r4,#5                 ;82
000040  dbf4              BLT      |L4.44|
                  |L4.66|
000042  bf00              NOP                            ;89
000044  4639              MOV      r1,r7                 ;92
000046  4668              MOV      r0,sp                 ;92
000048  f7fffffe          BL       strcpy
00004c  2400              MOVS     r4,#0                 ;93
00004e  e007              B        |L4.96|
                  |L4.80|
000050  f81d0004          LDRB     r0,[sp,r4]            ;93
000054  f7fffffe          BL       char_upper
000058  f80d0004          STRB     r0,[sp,r4]            ;93
00005c  1c60              ADDS     r0,r4,#1              ;93
00005e  b2c4              UXTB     r4,r0                 ;93
                  |L4.96|
000060  2c04              CMP      r4,#4                 ;93
000062  dbf5              BLT      |L4.80|
000064  2400              MOVS     r4,#0                 ;94
000066  e025              B        |L4.180|
                  |L4.104|
000068  2600              MOVS     r6,#0                 ;96
00006a  e01e              B        |L4.170|
                  |L4.108|
00006c  eb040084          ADD      r0,r4,r4,LSL #2       ;98
000070  eb0000c4          ADD      r0,r0,r4,LSL #3       ;98
000074  4911              LDR      r1,|L4.188|
000076  eb010080          ADD      r0,r1,r0,LSL #2       ;98
00007a  f8500026          LDR      r0,[r0,r6,LSL #2]     ;98
00007e  7800              LDRB     r0,[r0,#0]            ;98
000080  b900              CBNZ     r0,|L4.132|
000082  e014              B        |L4.174|
                  |L4.132|
000084  eb040184          ADD      r1,r4,r4,LSL #2       ;99
000088  eb0101c4          ADD      r1,r1,r4,LSL #3       ;99
00008c  4a0b              LDR      r2,|L4.188|
00008e  eb020181          ADD      r1,r2,r1,LSL #2       ;99
000092  f8510026          LDR      r0,[r1,r6,LSL #2]     ;99
000096  4669              MOV      r1,sp                 ;99
000098  f7fffffe          BL       strcmp
00009c  b918              CBNZ     r0,|L4.166|
00009e  ea461004          ORR      r0,r6,r4,LSL #4       ;101
0000a2  b2c0              UXTB     r0,r0                 ;101
0000a4  e7be              B        |L4.36|
                  |L4.166|
0000a6  1c70              ADDS     r0,r6,#1              ;96
0000a8  b2c6              UXTB     r6,r0                 ;96
                  |L4.170|
0000aa  2e0d              CMP      r6,#0xd               ;96
0000ac  dbde              BLT      |L4.108|
                  |L4.174|
0000ae  bf00              NOP                            ;98
0000b0  1c60              ADDS     r0,r4,#1              ;94
0000b2  b2c4              UXTB     r4,r0                 ;94
                  |L4.180|
0000b4  2c06              CMP      r4,#6                 ;94
0000b6  dbd7              BLT      |L4.104|
0000b8  20ff              MOVS     r0,#0xff              ;105
0000ba  e7b3              B        |L4.36|
;;;107    
                          ENDP

                  |L4.188|
                          DCD      FILE_TYPE_TBL

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  fileinfo
                          %        32
                  ||dir||
                          %        36

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  FILE_TYPE_TBL
                          DCD      ||.conststring||
                          %        48
                          DCD      ||.conststring||+0x4
                          %        48
                          DCD      ||.conststring||+0x8
                          %        48
                          DCD      ||.conststring||+0xc
                          DCD      ||.conststring||+0x10
                          DCD      ||.conststring||+0x14
                          %        40
                          DCD      ||.conststring||+0x18
                          DCD      ||.conststring||+0x1c
                          DCD      ||.conststring||+0x20
                          DCD      ||.conststring||+0x24
                          DCD      ||.conststring||+0x28
                          DCD      ||.conststring||+0x2c
                          DCD      ||.conststring||+0x30
                          DCD      ||.conststring||+0x34
                          DCD      ||.conststring||+0x38
                          DCD      ||.conststring||+0x3c
                          DCD      ||.conststring||+0x40
                          DCD      ||.conststring||+0x44
                          DCD      ||.conststring||+0x48
                          DCD      ||.conststring||+0x50
                          DCD      ||.conststring||+0x54
                          DCD      ||.conststring||+0x58
                          DCD      ||.conststring||+0x60
                          %        36

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  42494e00          DCB      "BIN",0
000004  4c524300          DCB      "LRC",0
000008  4e455300          DCB      "NES",0
00000c  54585400          DCB      "TXT",0
000010  4300              DCB      "C",0
000012  00                DCB      0
000013  00                DCB      0
000014  4800              DCB      "H",0
000016  00                DCB      0
000017  00                DCB      0
000018  4d503100          DCB      "MP1",0
00001c  4d503200          DCB      "MP2",0
000020  4d503300          DCB      "MP3",0
000024  4d503400          DCB      "MP4",0
000028  4d344100          DCB      "M4A",0
00002c  33475000          DCB      "3GP",0
000030  33473200          DCB      "3G2",0
000034  4f474700          DCB      "OGG",0
000038  41414300          DCB      "AAC",0
00003c  574d4100          DCB      "WMA",0
000040  57415600          DCB      "WAV",0
000044  4d494400          DCB      "MID",0
000048  464c4143          DCB      "FLAC",0
00004c  00      
00004d  00                DCB      0
00004e  00                DCB      0
00004f  00                DCB      0
000050  424d5000          DCB      "BMP",0
000054  4a504700          DCB      "JPG",0
000058  4a504547          DCB      "JPEG",0
00005c  00      
00005d  00                DCB      0
00005e  00                DCB      0
00005f  00                DCB      0
000060  47494600          DCB      "GIF",0

                          AREA ||.data||, DATA, ALIGN=2

                  ||fs||
                          %        8
                  file
                          DCD      0x00000000
                  ftemp
                          DCD      0x00000000
                  ||br||
                          DCD      0x00000000
                  ||bw||
                          DCD      0x00000000
                  fatbuf
                          DCD      0x00000000
