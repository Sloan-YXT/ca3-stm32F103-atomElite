; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\common.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\common.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\ATK-ESP8266 -I..\CORE -I..\FATFS\src -I..\FATFS\exfuns -I..\HARDWARE\24CXX -I..\HARDWARE\IIC -I..\HARDWARE\KEY -I..\HARDWARE\LCD -I..\HARDWARE\LED -I..\HARDWARE\SDIO -I..\HARDWARE\SPI -I..\HARDWARE\TIMER -I..\HARDWARE\TOUCH -I..\HARDWARE\USART3 -I..\HARDWARE\W25QXX -I..\MALLOC -I..\STM32F10x_FWLib\inc -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\TEXT -I..\USER -I..\USMART -I..\PICTURE -I..\HARDWARE\OV7725 -I..\HARDWARE\EXTI -I..\HARDWARE\BEEP -I..\HARDWARE\DHT11 -I.\RTE\_Target_1 -ID:\Users\86132\AppData\Local\Arm\Packs\Keil\STM32F1xx_DFP\2.3.0\Device\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=529 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\common.crf ..\ATK-ESP8266\common.c]
                          THUMB

                          AREA ||i.atk_8266_at_response||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  atk_8266_at_response PROC
;;;6      //     1,清零USART3_RX_STA;
;;;7      void atk_8266_at_response(u8 mode)
000000  b510              PUSH     {r4,lr}
;;;8      {
000002  4604              MOV      r4,r0
;;;9      	if(USART3_RX_STA&0X8000)		//接收到一次数据了
000004  480a              LDR      r0,|L1.48|
000006  8800              LDRH     r0,[r0,#0]  ; USART3_RX_STA
000008  f4004000          AND      r0,r0,#0x8000
00000c  b170              CBZ      r0,|L1.44|
;;;10     	{ 
;;;11     		USART3_RX_BUF[USART3_RX_STA&0X7FFF]=0;//添加结束符
00000e  2000              MOVS     r0,#0
000010  4907              LDR      r1,|L1.48|
000012  8809              LDRH     r1,[r1,#0]  ; USART3_RX_STA
000014  f3c1010e          UBFX     r1,r1,#0,#15
000018  4a06              LDR      r2,|L1.52|
00001a  5450              STRB     r0,[r2,r1]
;;;12     		printf("%s",USART3_RX_BUF);	//发送到串口
00001c  4611              MOV      r1,r2
00001e  a006              ADR      r0,|L1.56|
000020  f7fffffe          BL       __2printf
;;;13     		if(mode)USART3_RX_STA=0;
000024  b114              CBZ      r4,|L1.44|
000026  2000              MOVS     r0,#0
000028  4901              LDR      r1,|L1.48|
00002a  8008              STRH     r0,[r1,#0]
                  |L1.44|
;;;14     	} 
;;;15     }
00002c  bd10              POP      {r4,pc}
;;;16     //ATK-ESP8266发送命令后,检测接收到的应答
                          ENDP

00002e  0000              DCW      0x0000
                  |L1.48|
                          DCD      USART3_RX_STA
                  |L1.52|
                          DCD      USART3_RX_BUF
                  |L1.56|
000038  257300            DCB      "%s",0
00003b  00                DCB      0

                          AREA ||i.atk_8266_check_cmd||, CODE, READONLY, ALIGN=2

                  atk_8266_check_cmd PROC
;;;19     //    其他,期待应答结果的位置(str的位置)
;;;20     u8* atk_8266_check_cmd(const u8* debug,u8 *str)
000000  b570              PUSH     {r4-r6,lr}
;;;21     {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;22     	char *strx=0;
000006  2500              MOVS     r5,#0
;;;23     	USART3_RX_BUF[USART3_RX_STA&0X3FFF]=0;//添加结束符
000008  2000              MOVS     r0,#0
00000a  4906              LDR      r1,|L2.36|
00000c  8809              LDRH     r1,[r1,#0]  ; USART3_RX_STA
00000e  f3c1010d          UBFX     r1,r1,#0,#14
000012  4a05              LDR      r2,|L2.40|
000014  5450              STRB     r0,[r2,r1]
;;;24     	//printf("(%d)(%s)debug::%s||%s\r\n",sendno,debug,str,USART3_RX_BUF);
;;;25     	strx=strstr((const char*)USART3_RX_BUF,(const char*)str);
000016  4621              MOV      r1,r4
000018  4610              MOV      r0,r2
00001a  f7fffffe          BL       strstr
00001e  4605              MOV      r5,r0
;;;26     	return (u8*)strx;
000020  4628              MOV      r0,r5
;;;27     }
000022  bd70              POP      {r4-r6,pc}
;;;28     u8 atk_8266_send_cmd(u8 *cmd,u8 *ack,short waittime)
                          ENDP

                  |L2.36|
                          DCD      USART3_RX_STA
                  |L2.40|
                          DCD      USART3_RX_BUF

                          AREA ||i.atk_8266_send_cmd||, CODE, READONLY, ALIGN=2

                  atk_8266_send_cmd PROC
;;;27     }
;;;28     u8 atk_8266_send_cmd(u8 *cmd,u8 *ack,short waittime)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;29     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;30     	sendno++;
00000a  4866              LDR      r0,|L3.420|
00000c  6800              LDR      r0,[r0,#0]  ; sendno
00000e  1c40              ADDS     r0,r0,#1
000010  4964              LDR      r1,|L3.420|
000012  6008              STR      r0,[r1,#0]  ; sendno
;;;31     	u8 res=0; 
000014  2700              MOVS     r7,#0
;;;32     	USART3_RX_STA=0;
000016  2000              MOVS     r0,#0
000018  4963              LDR      r1,|L3.424|
00001a  8008              STRH     r0,[r1,#0]
;;;33     	u3_printf("%s\r\n",cmd);	//发送命令
00001c  4629              MOV      r1,r5
00001e  a063              ADR      r0,|L3.428|
000020  f7fffffe          BL       u3_printf
;;;34     	if(ack&&waittime)		//需要等待应答
000024  2e00              CMP      r6,#0
                  |L3.38|
000026  d05f              BEQ      |L3.232|
000028  2c00              CMP      r4,#0
00002a  d0fc              BEQ      |L3.38|
;;;35     	{
;;;36     		if(waittime>0)
00002c  dd5d              BLE      |L3.234|
;;;37     		{
;;;38     		while(--waittime)	//等待倒计时
00002e  e053              B        |L3.216|
                  |L3.48|
;;;39     		{
;;;40     			delay_ms(10);
000030  200a              MOVS     r0,#0xa
000032  f7fffffe          BL       delay_ms
;;;41     			if(USART3_RX_STA&0X4000)
000036  485c              LDR      r0,|L3.424|
000038  8800              LDRH     r0,[r0,#0]  ; USART3_RX_STA
00003a  f4004080          AND      r0,r0,#0x4000
00003e  2800              CMP      r0,#0
000040  d022              BEQ      |L3.136|
;;;42     			{
;;;43     				if(atk_8266_check_cmd("SEND DATA",ack))
000042  4631              MOV      r1,r6
000044  a05b              ADR      r0,|L3.436|
000046  f7fffffe          BL       atk_8266_check_cmd
00004a  b118              CBZ      r0,|L3.84|
;;;44     				{
;;;45     					USART3_RX_STA = 0;
00004c  2000              MOVS     r0,#0
00004e  4956              LDR      r1,|L3.424|
000050  8008              STRH     r0,[r1,#0]
;;;46     					break;//得到有效数据 
000052  e045              B        |L3.224|
                  |L3.84|
;;;47     				}
;;;48     				else if(atk_8266_check_cmd("SEND DATA","ERROR"))
000054  a15a              ADR      r1,|L3.448|
000056  a057              ADR      r0,|L3.436|
000058  f7fffffe          BL       atk_8266_check_cmd
00005c  b128              CBZ      r0,|L3.106|
;;;49     				{
;;;50     					USART3_RX_STA = 0;
00005e  2000              MOVS     r0,#0
000060  4951              LDR      r1,|L3.424|
000062  8008              STRH     r0,[r1,#0]
;;;51     					return 3;
000064  2003              MOVS     r0,#3
                  |L3.102|
;;;52     				}
;;;53     				else if(atk_8266_check_cmd("SEND DATA","FAIL"))
;;;54     				{
;;;55     					USART3_RX_STA = 0;
;;;56     					return 4;
;;;57     				}
;;;58     				USART3_RX_STA = 0;
;;;59     				return 2;
;;;60     			}
;;;61     			if(USART3_RX_STA&0X8000)
;;;62     			{
;;;63     				USART3_RX_STA &= (~0x8000);
;;;64     				if(atk_8266_check_cmd("SEND DATA",ack))//接收到期待的应答结果
;;;65     				{
;;;66     					USART3_RX_STA=0;
;;;67     					break;//得到有效数据 
;;;68     				}
;;;69     				else if(atk_8266_check_cmd("SEND DATA","ERROR"))
;;;70     				{
;;;71     					USART3_RX_STA = 0;
;;;72     					return 3;
;;;73     				}
;;;74     				else if(atk_8266_check_cmd("SEND DATA","FAIL"))
;;;75     				{
;;;76     					USART3_RX_STA = 0;
;;;77     					return 4;
;;;78     				}
;;;79     			}
;;;80     		}
;;;81     		if(waittime==0)res=1; 
;;;82     		}
;;;83     		else if(waittime<0)
;;;84     		{
;;;85     			while(1)
;;;86     			{
;;;87     			delay_ms(10);
;;;88     			if(USART3_RX_STA&0X4000)
;;;89     			{
;;;90     				if(atk_8266_check_cmd("SEND DATA",ack))
;;;91     				{
;;;92     					USART3_RX_STA = 0;
;;;93     					break;//得到有效数据 
;;;94     				}
;;;95     				else if(atk_8266_check_cmd("SEND DATA","ERROR"))
;;;96     				{
;;;97     					USART3_RX_STA = 0;
;;;98     					return 3;
;;;99     				}
;;;100    				else if(atk_8266_check_cmd("SEND DATA","FAIL"))
;;;101    				{
;;;102    					USART3_RX_STA = 0;
;;;103    					return 4;
;;;104    				}
;;;105    				USART3_RX_STA = 0;
;;;106    				return 2;
;;;107    			}
;;;108    			if(USART3_RX_STA&0X8000)
;;;109    			{
;;;110    				USART3_RX_STA &= (~0x8000);
;;;111    				if(atk_8266_check_cmd("SEND DATA",ack))//接收到期待的应答结果
;;;112    				{
;;;113    					USART3_RX_STA=0;
;;;114    					break;//得到有效数据 
;;;115    				}
;;;116    				else if(atk_8266_check_cmd("SEND DATA","ERROR"))
;;;117    				{
;;;118    					USART3_RX_STA = 0;
;;;119    					return 3;
;;;120    				}
;;;121    				else if(atk_8266_check_cmd("SEND DATA","FAIL"))
;;;122    				{
;;;123    					USART3_RX_STA = 0;
;;;124    					return 4;
;;;125    				}
;;;126    			}
;;;127    			}
;;;128    		}
;;;129    	}
;;;130    	USART3_RX_STA = 0;
;;;131    	return res;
;;;132    } 
000066  e8bd81f0          POP      {r4-r8,pc}
                  |L3.106|
00006a  a157              ADR      r1,|L3.456|
00006c  a051              ADR      r0,|L3.436|
00006e  f7fffffe          BL       atk_8266_check_cmd
000072  b120              CBZ      r0,|L3.126|
000074  2000              MOVS     r0,#0                 ;55
000076  494c              LDR      r1,|L3.424|
000078  8008              STRH     r0,[r1,#0]            ;55
00007a  2004              MOVS     r0,#4                 ;56
00007c  e7f3              B        |L3.102|
                  |L3.126|
00007e  2000              MOVS     r0,#0                 ;58
000080  4949              LDR      r1,|L3.424|
000082  8008              STRH     r0,[r1,#0]            ;58
000084  2002              MOVS     r0,#2                 ;59
000086  e7ee              B        |L3.102|
                  |L3.136|
000088  4847              LDR      r0,|L3.424|
00008a  8800              LDRH     r0,[r0,#0]            ;61  ; USART3_RX_STA
00008c  f4004000          AND      r0,r0,#0x8000         ;61
000090  b310              CBZ      r0,|L3.216|
000092  4845              LDR      r0,|L3.424|
000094  8800              LDRH     r0,[r0,#0]            ;63  ; USART3_RX_STA
000096  f4204000          BIC      r0,r0,#0x8000         ;63
00009a  4943              LDR      r1,|L3.424|
00009c  8008              STRH     r0,[r1,#0]            ;63
00009e  4631              MOV      r1,r6                 ;64
0000a0  a044              ADR      r0,|L3.436|
0000a2  f7fffffe          BL       atk_8266_check_cmd
0000a6  b118              CBZ      r0,|L3.176|
0000a8  2000              MOVS     r0,#0                 ;66
0000aa  493f              LDR      r1,|L3.424|
0000ac  8008              STRH     r0,[r1,#0]            ;66
0000ae  e017              B        |L3.224|
                  |L3.176|
0000b0  a143              ADR      r1,|L3.448|
0000b2  a040              ADR      r0,|L3.436|
0000b4  f7fffffe          BL       atk_8266_check_cmd
0000b8  b120              CBZ      r0,|L3.196|
0000ba  2000              MOVS     r0,#0                 ;71
0000bc  493a              LDR      r1,|L3.424|
0000be  8008              STRH     r0,[r1,#0]            ;71
0000c0  2003              MOVS     r0,#3                 ;72
0000c2  e7d0              B        |L3.102|
                  |L3.196|
0000c4  a140              ADR      r1,|L3.456|
0000c6  a03b              ADR      r0,|L3.436|
0000c8  f7fffffe          BL       atk_8266_check_cmd
0000cc  b120              CBZ      r0,|L3.216|
0000ce  2000              MOVS     r0,#0                 ;76
0000d0  4935              LDR      r1,|L3.424|
0000d2  8008              STRH     r0,[r1,#0]            ;76
0000d4  2004              MOVS     r0,#4                 ;77
0000d6  e7c6              B        |L3.102|
                  |L3.216|
0000d8  1e60              SUBS     r0,r4,#1              ;38
0000da  b200              SXTH     r0,r0                 ;38
0000dc  1e04              SUBS     r4,r0,#0              ;38
0000de  d1a7              BNE      |L3.48|
                  |L3.224|
0000e0  bf00              NOP                            ;46
0000e2  2c00              CMP      r4,#0                 ;81
0000e4  d158              BNE      |L3.408|
0000e6  2701              MOVS     r7,#1                 ;81
                  |L3.232|
0000e8  e056              B        |L3.408|
                  |L3.234|
0000ea  2c00              CMP      r4,#0                 ;83
0000ec  da54              BGE      |L3.408|
0000ee  e051              B        |L3.404|
                  |L3.240|
0000f0  200a              MOVS     r0,#0xa               ;87
0000f2  f7fffffe          BL       delay_ms
0000f6  482c              LDR      r0,|L3.424|
0000f8  8800              LDRH     r0,[r0,#0]            ;88  ; USART3_RX_STA
0000fa  f4004080          AND      r0,r0,#0x4000         ;88
0000fe  b308              CBZ      r0,|L3.324|
000100  4631              MOV      r1,r6                 ;90
000102  a02c              ADR      r0,|L3.436|
000104  f7fffffe          BL       atk_8266_check_cmd
000108  b118              CBZ      r0,|L3.274|
00010a  2000              MOVS     r0,#0                 ;92
00010c  4926              LDR      r1,|L3.424|
00010e  8008              STRH     r0,[r1,#0]            ;92
000110  e041              B        |L3.406|
                  |L3.274|
000112  a12b              ADR      r1,|L3.448|
000114  a027              ADR      r0,|L3.436|
000116  f7fffffe          BL       atk_8266_check_cmd
00011a  b120              CBZ      r0,|L3.294|
00011c  2000              MOVS     r0,#0                 ;97
00011e  4922              LDR      r1,|L3.424|
000120  8008              STRH     r0,[r1,#0]            ;97
000122  2003              MOVS     r0,#3                 ;98
000124  e79f              B        |L3.102|
                  |L3.294|
000126  a128              ADR      r1,|L3.456|
000128  a022              ADR      r0,|L3.436|
00012a  f7fffffe          BL       atk_8266_check_cmd
00012e  b120              CBZ      r0,|L3.314|
000130  2000              MOVS     r0,#0                 ;102
000132  491d              LDR      r1,|L3.424|
000134  8008              STRH     r0,[r1,#0]            ;102
000136  2004              MOVS     r0,#4                 ;103
000138  e795              B        |L3.102|
                  |L3.314|
00013a  2000              MOVS     r0,#0                 ;105
00013c  491a              LDR      r1,|L3.424|
00013e  8008              STRH     r0,[r1,#0]            ;105
000140  2002              MOVS     r0,#2                 ;106
000142  e790              B        |L3.102|
                  |L3.324|
000144  4818              LDR      r0,|L3.424|
000146  8800              LDRH     r0,[r0,#0]            ;108  ; USART3_RX_STA
000148  f4004000          AND      r0,r0,#0x8000         ;108
00014c  b310              CBZ      r0,|L3.404|
00014e  4816              LDR      r0,|L3.424|
000150  8800              LDRH     r0,[r0,#0]            ;110  ; USART3_RX_STA
000152  f4204000          BIC      r0,r0,#0x8000         ;110
000156  4914              LDR      r1,|L3.424|
000158  8008              STRH     r0,[r1,#0]            ;110
00015a  4631              MOV      r1,r6                 ;111
00015c  a015              ADR      r0,|L3.436|
00015e  f7fffffe          BL       atk_8266_check_cmd
000162  b118              CBZ      r0,|L3.364|
000164  2000              MOVS     r0,#0                 ;113
000166  4910              LDR      r1,|L3.424|
000168  8008              STRH     r0,[r1,#0]            ;113
00016a  e014              B        |L3.406|
                  |L3.364|
00016c  a114              ADR      r1,|L3.448|
00016e  a011              ADR      r0,|L3.436|
000170  f7fffffe          BL       atk_8266_check_cmd
000174  b120              CBZ      r0,|L3.384|
000176  2000              MOVS     r0,#0                 ;118
000178  490b              LDR      r1,|L3.424|
00017a  8008              STRH     r0,[r1,#0]            ;118
00017c  2003              MOVS     r0,#3                 ;119
00017e  e772              B        |L3.102|
                  |L3.384|
000180  a111              ADR      r1,|L3.456|
000182  a00c              ADR      r0,|L3.436|
000184  f7fffffe          BL       atk_8266_check_cmd
000188  b120              CBZ      r0,|L3.404|
00018a  2000              MOVS     r0,#0                 ;123
00018c  4906              LDR      r1,|L3.424|
00018e  8008              STRH     r0,[r1,#0]            ;123
000190  2004              MOVS     r0,#4                 ;124
000192  e768              B        |L3.102|
                  |L3.404|
000194  e7ac              B        |L3.240|
                  |L3.406|
000196  bf00              NOP                            ;93
                  |L3.408|
000198  2000              MOVS     r0,#0                 ;130
00019a  4903              LDR      r1,|L3.424|
00019c  8008              STRH     r0,[r1,#0]            ;130
00019e  4638              MOV      r0,r7                 ;131
0001a0  e761              B        |L3.102|
;;;133    //向ATK-ESP8266发送指定数据
                          ENDP

0001a2  0000              DCW      0x0000
                  |L3.420|
                          DCD      sendno
                  |L3.424|
                          DCD      USART3_RX_STA
                  |L3.428|
0001ac  25730d0a          DCB      "%s\r\n",0
0001b0  00      
0001b1  00                DCB      0
0001b2  00                DCB      0
0001b3  00                DCB      0
                  |L3.436|
0001b4  53454e44          DCB      "SEND DATA",0
0001b8  20444154
0001bc  4100    
0001be  00                DCB      0
0001bf  00                DCB      0
                  |L3.448|
0001c0  4552524f          DCB      "ERROR",0
0001c4  5200    
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L3.456|
0001c8  4641494c          DCB      "FAIL",0
0001cc  00      
0001cd  00                DCB      0
0001ce  00                DCB      0
0001cf  00                DCB      0

                          AREA ||i.atk_8266_send_data||, CODE, READONLY, ALIGN=2

                  atk_8266_send_data PROC
;;;272    }
;;;273    u8 atk_8266_send_data(u8 *data,u8 *ack,short waittime)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;274    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;275    	sendno++;
00000a  4866              LDR      r0,|L4.420|
00000c  6800              LDR      r0,[r0,#0]  ; sendno
00000e  1c40              ADDS     r0,r0,#1
000010  4964              LDR      r1,|L4.420|
000012  6008              STR      r0,[r1,#0]  ; sendno
;;;276    	u8 res=0; 
000014  2700              MOVS     r7,#0
;;;277    	USART3_RX_STA=0;
000016  2000              MOVS     r0,#0
000018  4963              LDR      r1,|L4.424|
00001a  8008              STRH     r0,[r1,#0]
;;;278    	u3_printf("%s",data);	//发送命令
00001c  4629              MOV      r1,r5
00001e  a063              ADR      r0,|L4.428|
000020  f7fffffe          BL       u3_printf
;;;279    	if(ack&&waittime)		//需要等待应答
000024  2e00              CMP      r6,#0
                  |L4.38|
000026  d05f              BEQ      |L4.232|
000028  2c00              CMP      r4,#0
00002a  d0fc              BEQ      |L4.38|
;;;280    	{
;;;281    		if(waittime>0)
00002c  dd5d              BLE      |L4.234|
;;;282    		{
;;;283    		while(--waittime)	//等待倒计时
00002e  e053              B        |L4.216|
                  |L4.48|
;;;284    		{
;;;285    			delay_ms(10);
000030  200a              MOVS     r0,#0xa
000032  f7fffffe          BL       delay_ms
;;;286    			if(USART3_RX_STA&0X4000)
000036  485c              LDR      r0,|L4.424|
000038  8800              LDRH     r0,[r0,#0]  ; USART3_RX_STA
00003a  f4004080          AND      r0,r0,#0x4000
00003e  2800              CMP      r0,#0
000040  d022              BEQ      |L4.136|
;;;287    			{
;;;288    				if(atk_8266_check_cmd("SEND DATA",ack))
000042  4631              MOV      r1,r6
000044  a05a              ADR      r0,|L4.432|
000046  f7fffffe          BL       atk_8266_check_cmd
00004a  b118              CBZ      r0,|L4.84|
;;;289    				{
;;;290    					USART3_RX_STA = 0;
00004c  2000              MOVS     r0,#0
00004e  4956              LDR      r1,|L4.424|
000050  8008              STRH     r0,[r1,#0]
;;;291    					break;//得到有效数据 
000052  e045              B        |L4.224|
                  |L4.84|
;;;292    				}
;;;293    				else if(atk_8266_check_cmd("SEND DATA","ERROR"))
000054  a159              ADR      r1,|L4.444|
000056  a056              ADR      r0,|L4.432|
000058  f7fffffe          BL       atk_8266_check_cmd
00005c  b128              CBZ      r0,|L4.106|
;;;294    				{
;;;295    					USART3_RX_STA = 0;
00005e  2000              MOVS     r0,#0
000060  4951              LDR      r1,|L4.424|
000062  8008              STRH     r0,[r1,#0]
;;;296    					return 3;
000064  2003              MOVS     r0,#3
                  |L4.102|
;;;297    				}
;;;298    				else if(atk_8266_check_cmd("SEND DATA","FAIL"))
;;;299    				{
;;;300    					USART3_RX_STA = 0;
;;;301    					return 4;
;;;302    				}
;;;303    				USART3_RX_STA = 0;
;;;304    				return 2;
;;;305    			}
;;;306    			if(USART3_RX_STA&0X8000)
;;;307    			{
;;;308    				USART3_RX_STA &= (~0x8000);
;;;309    				if(atk_8266_check_cmd("SEND DATA",ack))//接收到期待的应答结果
;;;310    				{
;;;311    					USART3_RX_STA=0;
;;;312    					break;//得到有效数据 
;;;313    				}
;;;314    				else if(atk_8266_check_cmd("SEND DATA","ERROR"))
;;;315    				{
;;;316    					USART3_RX_STA = 0;
;;;317    					return 3;
;;;318    				}
;;;319    				else if(atk_8266_check_cmd("SEND DATA","FAIL"))
;;;320    				{
;;;321    					USART3_RX_STA = 0;
;;;322    					return 4;
;;;323    				}
;;;324    			}
;;;325    		}
;;;326    		if(waittime==0)res=1; 
;;;327    		}
;;;328    		else if(waittime<0)
;;;329    		{
;;;330    			while(1)
;;;331    			{
;;;332    			delay_ms(10);
;;;333    			if(USART3_RX_STA&0X4000)
;;;334    			{
;;;335    				if(atk_8266_check_cmd("SEND DATA",ack))
;;;336    				{
;;;337    					USART3_RX_STA = 0;
;;;338    					break;//得到有效数据 
;;;339    				}
;;;340    				else if(atk_8266_check_cmd("SEND DATA","ERROR"))
;;;341    				{
;;;342    					USART3_RX_STA = 0;
;;;343    					return 3;
;;;344    				}
;;;345    				else if(atk_8266_check_cmd("SEND DATA","FAIL"))
;;;346    				{
;;;347    					USART3_RX_STA = 0;
;;;348    					return 4;
;;;349    				}
;;;350    				USART3_RX_STA = 0;
;;;351    				return 2;
;;;352    			}
;;;353    			if(USART3_RX_STA&0X8000)
;;;354    			{
;;;355    				USART3_RX_STA &= (~0x8000);
;;;356    				if(atk_8266_check_cmd("SEND DATA",ack))//接收到期待的应答结果
;;;357    				{
;;;358    					USART3_RX_STA=0;
;;;359    					break;//得到有效数据 
;;;360    				}
;;;361    				else if(atk_8266_check_cmd("SEND DATA","ERROR"))
;;;362    				{
;;;363    					USART3_RX_STA = 0;
;;;364    					return 3;
;;;365    				}
;;;366    				else if(atk_8266_check_cmd("SEND DATA","FAIL"))
;;;367    				{
;;;368    					USART3_RX_STA = 0;
;;;369    					return 4;
;;;370    				}
;;;371    			}
;;;372    			}
;;;373    		}
;;;374    	}
;;;375    	USART3_RX_STA = 0;
;;;376    	return res;
;;;377    }
000066  e8bd81f0          POP      {r4-r8,pc}
                  |L4.106|
00006a  a156              ADR      r1,|L4.452|
00006c  a050              ADR      r0,|L4.432|
00006e  f7fffffe          BL       atk_8266_check_cmd
000072  b120              CBZ      r0,|L4.126|
000074  2000              MOVS     r0,#0                 ;300
000076  494c              LDR      r1,|L4.424|
000078  8008              STRH     r0,[r1,#0]            ;300
00007a  2004              MOVS     r0,#4                 ;301
00007c  e7f3              B        |L4.102|
                  |L4.126|
00007e  2000              MOVS     r0,#0                 ;303
000080  4949              LDR      r1,|L4.424|
000082  8008              STRH     r0,[r1,#0]            ;303
000084  2002              MOVS     r0,#2                 ;304
000086  e7ee              B        |L4.102|
                  |L4.136|
000088  4847              LDR      r0,|L4.424|
00008a  8800              LDRH     r0,[r0,#0]            ;306  ; USART3_RX_STA
00008c  f4004000          AND      r0,r0,#0x8000         ;306
000090  b310              CBZ      r0,|L4.216|
000092  4845              LDR      r0,|L4.424|
000094  8800              LDRH     r0,[r0,#0]            ;308  ; USART3_RX_STA
000096  f4204000          BIC      r0,r0,#0x8000         ;308
00009a  4943              LDR      r1,|L4.424|
00009c  8008              STRH     r0,[r1,#0]            ;308
00009e  4631              MOV      r1,r6                 ;309
0000a0  a043              ADR      r0,|L4.432|
0000a2  f7fffffe          BL       atk_8266_check_cmd
0000a6  b118              CBZ      r0,|L4.176|
0000a8  2000              MOVS     r0,#0                 ;311
0000aa  493f              LDR      r1,|L4.424|
0000ac  8008              STRH     r0,[r1,#0]            ;311
0000ae  e017              B        |L4.224|
                  |L4.176|
0000b0  a142              ADR      r1,|L4.444|
0000b2  a03f              ADR      r0,|L4.432|
0000b4  f7fffffe          BL       atk_8266_check_cmd
0000b8  b120              CBZ      r0,|L4.196|
0000ba  2000              MOVS     r0,#0                 ;316
0000bc  493a              LDR      r1,|L4.424|
0000be  8008              STRH     r0,[r1,#0]            ;316
0000c0  2003              MOVS     r0,#3                 ;317
0000c2  e7d0              B        |L4.102|
                  |L4.196|
0000c4  a13f              ADR      r1,|L4.452|
0000c6  a03a              ADR      r0,|L4.432|
0000c8  f7fffffe          BL       atk_8266_check_cmd
0000cc  b120              CBZ      r0,|L4.216|
0000ce  2000              MOVS     r0,#0                 ;321
0000d0  4935              LDR      r1,|L4.424|
0000d2  8008              STRH     r0,[r1,#0]            ;321
0000d4  2004              MOVS     r0,#4                 ;322
0000d6  e7c6              B        |L4.102|
                  |L4.216|
0000d8  1e60              SUBS     r0,r4,#1              ;283
0000da  b200              SXTH     r0,r0                 ;283
0000dc  1e04              SUBS     r4,r0,#0              ;283
0000de  d1a7              BNE      |L4.48|
                  |L4.224|
0000e0  bf00              NOP                            ;291
0000e2  2c00              CMP      r4,#0                 ;326
0000e4  d158              BNE      |L4.408|
0000e6  2701              MOVS     r7,#1                 ;326
                  |L4.232|
0000e8  e056              B        |L4.408|
                  |L4.234|
0000ea  2c00              CMP      r4,#0                 ;328
0000ec  da54              BGE      |L4.408|
0000ee  e051              B        |L4.404|
                  |L4.240|
0000f0  200a              MOVS     r0,#0xa               ;332
0000f2  f7fffffe          BL       delay_ms
0000f6  482c              LDR      r0,|L4.424|
0000f8  8800              LDRH     r0,[r0,#0]            ;333  ; USART3_RX_STA
0000fa  f4004080          AND      r0,r0,#0x4000         ;333
0000fe  b308              CBZ      r0,|L4.324|
000100  4631              MOV      r1,r6                 ;335
000102  a02b              ADR      r0,|L4.432|
000104  f7fffffe          BL       atk_8266_check_cmd
000108  b118              CBZ      r0,|L4.274|
00010a  2000              MOVS     r0,#0                 ;337
00010c  4926              LDR      r1,|L4.424|
00010e  8008              STRH     r0,[r1,#0]            ;337
000110  e041              B        |L4.406|
                  |L4.274|
000112  a12a              ADR      r1,|L4.444|
000114  a026              ADR      r0,|L4.432|
000116  f7fffffe          BL       atk_8266_check_cmd
00011a  b120              CBZ      r0,|L4.294|
00011c  2000              MOVS     r0,#0                 ;342
00011e  4922              LDR      r1,|L4.424|
000120  8008              STRH     r0,[r1,#0]            ;342
000122  2003              MOVS     r0,#3                 ;343
000124  e79f              B        |L4.102|
                  |L4.294|
000126  a127              ADR      r1,|L4.452|
000128  a021              ADR      r0,|L4.432|
00012a  f7fffffe          BL       atk_8266_check_cmd
00012e  b120              CBZ      r0,|L4.314|
000130  2000              MOVS     r0,#0                 ;347
000132  491d              LDR      r1,|L4.424|
000134  8008              STRH     r0,[r1,#0]            ;347
000136  2004              MOVS     r0,#4                 ;348
000138  e795              B        |L4.102|
                  |L4.314|
00013a  2000              MOVS     r0,#0                 ;350
00013c  491a              LDR      r1,|L4.424|
00013e  8008              STRH     r0,[r1,#0]            ;350
000140  2002              MOVS     r0,#2                 ;351
000142  e790              B        |L4.102|
                  |L4.324|
000144  4818              LDR      r0,|L4.424|
000146  8800              LDRH     r0,[r0,#0]            ;353  ; USART3_RX_STA
000148  f4004000          AND      r0,r0,#0x8000         ;353
00014c  b310              CBZ      r0,|L4.404|
00014e  4816              LDR      r0,|L4.424|
000150  8800              LDRH     r0,[r0,#0]            ;355  ; USART3_RX_STA
000152  f4204000          BIC      r0,r0,#0x8000         ;355
000156  4914              LDR      r1,|L4.424|
000158  8008              STRH     r0,[r1,#0]            ;355
00015a  4631              MOV      r1,r6                 ;356
00015c  a014              ADR      r0,|L4.432|
00015e  f7fffffe          BL       atk_8266_check_cmd
000162  b118              CBZ      r0,|L4.364|
000164  2000              MOVS     r0,#0                 ;358
000166  4910              LDR      r1,|L4.424|
000168  8008              STRH     r0,[r1,#0]            ;358
00016a  e014              B        |L4.406|
                  |L4.364|
00016c  a113              ADR      r1,|L4.444|
00016e  a010              ADR      r0,|L4.432|
000170  f7fffffe          BL       atk_8266_check_cmd
000174  b120              CBZ      r0,|L4.384|
000176  2000              MOVS     r0,#0                 ;363
000178  490b              LDR      r1,|L4.424|
00017a  8008              STRH     r0,[r1,#0]            ;363
00017c  2003              MOVS     r0,#3                 ;364
00017e  e772              B        |L4.102|
                  |L4.384|
000180  a110              ADR      r1,|L4.452|
000182  a00b              ADR      r0,|L4.432|
000184  f7fffffe          BL       atk_8266_check_cmd
000188  b120              CBZ      r0,|L4.404|
00018a  2000              MOVS     r0,#0                 ;368
00018c  4906              LDR      r1,|L4.424|
00018e  8008              STRH     r0,[r1,#0]            ;368
000190  2004              MOVS     r0,#4                 ;369
000192  e768              B        |L4.102|
                  |L4.404|
000194  e7ac              B        |L4.240|
                  |L4.406|
000196  bf00              NOP                            ;338
                  |L4.408|
000198  2000              MOVS     r0,#0                 ;375
00019a  4903              LDR      r1,|L4.424|
00019c  8008              STRH     r0,[r1,#0]            ;375
00019e  4638              MOV      r0,r7                 ;376
0001a0  e761              B        |L4.102|
                          ENDP

0001a2  0000              DCW      0x0000
                  |L4.420|
                          DCD      sendno
                  |L4.424|
                          DCD      USART3_RX_STA
                  |L4.428|
0001ac  257300            DCB      "%s",0
0001af  00                DCB      0
                  |L4.432|
0001b0  53454e44          DCB      "SEND DATA",0
0001b4  20444154
0001b8  4100    
0001ba  00                DCB      0
0001bb  00                DCB      0
                  |L4.444|
0001bc  4552524f          DCB      "ERROR",0
0001c0  5200    
0001c2  00                DCB      0
0001c3  00                DCB      0
                  |L4.452|
0001c4  4641494c          DCB      "FAIL",0
0001c8  00      
0001c9  00                DCB      0
0001ca  00                DCB      0
0001cb  00                DCB      0

                          AREA ||i.atk_8266_send_data_neat||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  atk_8266_send_data_neat PROC
;;;164    }
;;;165    u8 atk_8266_send_data_neat(u8 *data,u32 len,u8 *ack,short waittime)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;166    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
00000a  461c              MOV      r4,r3
;;;167    	sendno++;
00000c  4868              LDR      r0,|L5.432|
00000e  6800              LDR      r0,[r0,#0]  ; sendno
000010  1c40              ADDS     r0,r0,#1
000012  4967              LDR      r1,|L5.432|
000014  6008              STR      r0,[r1,#0]  ; sendno
;;;168    	u8 res=0; 
000016  f04f0800          MOV      r8,#0
;;;169    	USART3_RX_STA=0;
00001a  2000              MOVS     r0,#0
00001c  4965              LDR      r1,|L5.436|
00001e  8008              STRH     r0,[r1,#0]
;;;170    	printf("(%d bytes)send data turn\r\n",len);
000020  4639              MOV      r1,r7
000022  a065              ADR      r0,|L5.440|
000024  f7fffffe          BL       __2printf
;;;171    	u3_printf_neat(data,len);	//发送命令
000028  4639              MOV      r1,r7
00002a  4630              MOV      r0,r6
00002c  f7fffffe          BL       u3_printf_neat
;;;172    	if(ack&&waittime)		//需要等待应答
000030  2d00              CMP      r5,#0
                  |L5.50|
000032  d060              BEQ      |L5.246|
000034  2c00              CMP      r4,#0
000036  d0fc              BEQ      |L5.50|
;;;173    	{
;;;174    		if(waittime>0)
000038  dd5e              BLE      |L5.248|
;;;175    		{
;;;176    		while(--waittime)	//等待倒计时
00003a  e053              B        |L5.228|
                  |L5.60|
;;;177    		{
;;;178    			delay_ms(10);
00003c  200a              MOVS     r0,#0xa
00003e  f7fffffe          BL       delay_ms
;;;179    			//printf("in send len:%d\r\n",USART3_RX_STA);
;;;180    			if(USART3_RX_STA&0X4000)
000042  485c              LDR      r0,|L5.436|
000044  8800              LDRH     r0,[r0,#0]  ; USART3_RX_STA
000046  f4004080          AND      r0,r0,#0x4000
00004a  2800              CMP      r0,#0
00004c  d022              BEQ      |L5.148|
;;;181    			{
;;;182    				if(atk_8266_check_cmd("SEND DATA",ack))
00004e  4629              MOV      r1,r5
000050  a060              ADR      r0,|L5.468|
000052  f7fffffe          BL       atk_8266_check_cmd
000056  b118              CBZ      r0,|L5.96|
;;;183    				{
;;;184    					USART3_RX_STA = 0;
000058  2000              MOVS     r0,#0
00005a  4956              LDR      r1,|L5.436|
00005c  8008              STRH     r0,[r1,#0]
;;;185    					break;//得到有效数据 
00005e  e045              B        |L5.236|
                  |L5.96|
;;;186    				}
;;;187    				else if(atk_8266_check_cmd("SEND DATA","ERROR"))
000060  a15f              ADR      r1,|L5.480|
000062  a05c              ADR      r0,|L5.468|
000064  f7fffffe          BL       atk_8266_check_cmd
000068  b128              CBZ      r0,|L5.118|
;;;188    				{
;;;189    					USART3_RX_STA = 0;
00006a  2000              MOVS     r0,#0
00006c  4951              LDR      r1,|L5.436|
00006e  8008              STRH     r0,[r1,#0]
;;;190    					return 3;
000070  2003              MOVS     r0,#3
                  |L5.114|
;;;191    				}
;;;192    				else if(atk_8266_check_cmd("SEND DATA","FAIL"))
;;;193    				{
;;;194    					USART3_RX_STA = 0;
;;;195    					return 4;
;;;196    				}
;;;197    				USART3_RX_STA = 0;
;;;198    				return 2;
;;;199    			}
;;;200    			if(USART3_RX_STA&0X8000)
;;;201    			{
;;;202    				USART3_RX_STA &= (~0x8000);
;;;203    				if(atk_8266_check_cmd("SEND DATA",ack))//接收到期待的应答结果
;;;204    				{
;;;205    					USART3_RX_STA=0;
;;;206    					break;//得到有效数据 
;;;207    				}
;;;208    				else if(atk_8266_check_cmd("SEND DATA","ERROR"))
;;;209    				{
;;;210    					USART3_RX_STA = 0;
;;;211    					return 3;
;;;212    				}
;;;213    				else if(atk_8266_check_cmd("SEND DATA","FAIL"))
;;;214    				{
;;;215    					USART3_RX_STA = 0;
;;;216    					return 4;
;;;217    				}
;;;218    			}
;;;219    		}
;;;220    		if(waittime==0)res=1; 
;;;221    		}
;;;222    		else if(waittime<0)
;;;223    		{
;;;224    			while(1)
;;;225    			{
;;;226    			delay_ms(10);
;;;227    			//printf("in send len:%d\r\n",USART3_RX_STA);
;;;228    			if(USART3_RX_STA&0X4000)
;;;229    			{
;;;230    				if(atk_8266_check_cmd("SEND DATA",ack))
;;;231    				{
;;;232    					USART3_RX_STA = 0;
;;;233    					break;//得到有效数据 
;;;234    				}
;;;235    				else if(atk_8266_check_cmd("SEND DATA","ERROR"))
;;;236    				{
;;;237    					USART3_RX_STA = 0;
;;;238    					return 3;
;;;239    				}
;;;240    				else if(atk_8266_check_cmd("SEND DATA","FAIL"))
;;;241    				{
;;;242    					USART3_RX_STA = 0;
;;;243    					return 4;
;;;244    				}
;;;245    				USART3_RX_STA = 0;
;;;246    				return 2;
;;;247    			}
;;;248    			if(USART3_RX_STA&0X8000)
;;;249    			{
;;;250    				USART3_RX_STA &= (~0x8000);
;;;251    				if(atk_8266_check_cmd("SEND DATA",ack))//接收到期待的应答结果
;;;252    				{
;;;253    					USART3_RX_STA=0;
;;;254    					break;//得到有效数据 
;;;255    				}
;;;256    				else if(atk_8266_check_cmd("SEND DATA","ERROR"))
;;;257    				{
;;;258    					USART3_RX_STA = 0;
;;;259    					return 3;
;;;260    				}
;;;261    				else if(atk_8266_check_cmd("SEND DATA","FAIL"))
;;;262    				{
;;;263    					USART3_RX_STA = 0;
;;;264    					return 4;
;;;265    				}
;;;266    			}
;;;267    			}
;;;268    		}
;;;269    	}
;;;270    	USART3_RX_STA = 0;
;;;271    	return res;
;;;272    }
000072  e8bd81f0          POP      {r4-r8,pc}
                  |L5.118|
000076  a15c              ADR      r1,|L5.488|
000078  a056              ADR      r0,|L5.468|
00007a  f7fffffe          BL       atk_8266_check_cmd
00007e  b120              CBZ      r0,|L5.138|
000080  2000              MOVS     r0,#0                 ;194
000082  494c              LDR      r1,|L5.436|
000084  8008              STRH     r0,[r1,#0]            ;194
000086  2004              MOVS     r0,#4                 ;195
000088  e7f3              B        |L5.114|
                  |L5.138|
00008a  2000              MOVS     r0,#0                 ;197
00008c  4949              LDR      r1,|L5.436|
00008e  8008              STRH     r0,[r1,#0]            ;197
000090  2002              MOVS     r0,#2                 ;198
000092  e7ee              B        |L5.114|
                  |L5.148|
000094  4847              LDR      r0,|L5.436|
000096  8800              LDRH     r0,[r0,#0]            ;200  ; USART3_RX_STA
000098  f4004000          AND      r0,r0,#0x8000         ;200
00009c  b310              CBZ      r0,|L5.228|
00009e  4845              LDR      r0,|L5.436|
0000a0  8800              LDRH     r0,[r0,#0]            ;202  ; USART3_RX_STA
0000a2  f4204000          BIC      r0,r0,#0x8000         ;202
0000a6  4943              LDR      r1,|L5.436|
0000a8  8008              STRH     r0,[r1,#0]            ;202
0000aa  4629              MOV      r1,r5                 ;203
0000ac  a049              ADR      r0,|L5.468|
0000ae  f7fffffe          BL       atk_8266_check_cmd
0000b2  b118              CBZ      r0,|L5.188|
0000b4  2000              MOVS     r0,#0                 ;205
0000b6  493f              LDR      r1,|L5.436|
0000b8  8008              STRH     r0,[r1,#0]            ;205
0000ba  e017              B        |L5.236|
                  |L5.188|
0000bc  a148              ADR      r1,|L5.480|
0000be  a045              ADR      r0,|L5.468|
0000c0  f7fffffe          BL       atk_8266_check_cmd
0000c4  b120              CBZ      r0,|L5.208|
0000c6  2000              MOVS     r0,#0                 ;210
0000c8  493a              LDR      r1,|L5.436|
0000ca  8008              STRH     r0,[r1,#0]            ;210
0000cc  2003              MOVS     r0,#3                 ;211
0000ce  e7d0              B        |L5.114|
                  |L5.208|
0000d0  a145              ADR      r1,|L5.488|
0000d2  a040              ADR      r0,|L5.468|
0000d4  f7fffffe          BL       atk_8266_check_cmd
0000d8  b120              CBZ      r0,|L5.228|
0000da  2000              MOVS     r0,#0                 ;215
0000dc  4935              LDR      r1,|L5.436|
0000de  8008              STRH     r0,[r1,#0]            ;215
0000e0  2004              MOVS     r0,#4                 ;216
0000e2  e7c6              B        |L5.114|
                  |L5.228|
0000e4  1e60              SUBS     r0,r4,#1              ;176
0000e6  b200              SXTH     r0,r0                 ;176
0000e8  1e04              SUBS     r4,r0,#0              ;176
0000ea  d1a7              BNE      |L5.60|
                  |L5.236|
0000ec  bf00              NOP                            ;185
0000ee  2c00              CMP      r4,#0                 ;220
0000f0  d159              BNE      |L5.422|
0000f2  f04f0801          MOV      r8,#1                 ;220
                  |L5.246|
0000f6  e056              B        |L5.422|
                  |L5.248|
0000f8  2c00              CMP      r4,#0                 ;222
0000fa  da54              BGE      |L5.422|
0000fc  e051              B        |L5.418|
                  |L5.254|
0000fe  200a              MOVS     r0,#0xa               ;226
000100  f7fffffe          BL       delay_ms
000104  482b              LDR      r0,|L5.436|
000106  8800              LDRH     r0,[r0,#0]            ;228  ; USART3_RX_STA
000108  f4004080          AND      r0,r0,#0x4000         ;228
00010c  b308              CBZ      r0,|L5.338|
00010e  4629              MOV      r1,r5                 ;230
000110  a030              ADR      r0,|L5.468|
000112  f7fffffe          BL       atk_8266_check_cmd
000116  b118              CBZ      r0,|L5.288|
000118  2000              MOVS     r0,#0                 ;232
00011a  4926              LDR      r1,|L5.436|
00011c  8008              STRH     r0,[r1,#0]            ;232
00011e  e041              B        |L5.420|
                  |L5.288|
000120  a12f              ADR      r1,|L5.480|
000122  a02c              ADR      r0,|L5.468|
000124  f7fffffe          BL       atk_8266_check_cmd
000128  b120              CBZ      r0,|L5.308|
00012a  2000              MOVS     r0,#0                 ;237
00012c  4921              LDR      r1,|L5.436|
00012e  8008              STRH     r0,[r1,#0]            ;237
000130  2003              MOVS     r0,#3                 ;238
000132  e79e              B        |L5.114|
                  |L5.308|
000134  a12c              ADR      r1,|L5.488|
000136  a027              ADR      r0,|L5.468|
000138  f7fffffe          BL       atk_8266_check_cmd
00013c  b120              CBZ      r0,|L5.328|
00013e  2000              MOVS     r0,#0                 ;242
000140  491c              LDR      r1,|L5.436|
000142  8008              STRH     r0,[r1,#0]            ;242
000144  2004              MOVS     r0,#4                 ;243
000146  e794              B        |L5.114|
                  |L5.328|
000148  2000              MOVS     r0,#0                 ;245
00014a  491a              LDR      r1,|L5.436|
00014c  8008              STRH     r0,[r1,#0]            ;245
00014e  2002              MOVS     r0,#2                 ;246
000150  e78f              B        |L5.114|
                  |L5.338|
000152  4818              LDR      r0,|L5.436|
000154  8800              LDRH     r0,[r0,#0]            ;248  ; USART3_RX_STA
000156  f4004000          AND      r0,r0,#0x8000         ;248
00015a  b310              CBZ      r0,|L5.418|
00015c  4815              LDR      r0,|L5.436|
00015e  8800              LDRH     r0,[r0,#0]            ;250  ; USART3_RX_STA
000160  f4204000          BIC      r0,r0,#0x8000         ;250
000164  4913              LDR      r1,|L5.436|
000166  8008              STRH     r0,[r1,#0]            ;250
000168  4629              MOV      r1,r5                 ;251
00016a  a01a              ADR      r0,|L5.468|
00016c  f7fffffe          BL       atk_8266_check_cmd
000170  b118              CBZ      r0,|L5.378|
000172  2000              MOVS     r0,#0                 ;253
000174  490f              LDR      r1,|L5.436|
000176  8008              STRH     r0,[r1,#0]            ;253
000178  e014              B        |L5.420|
                  |L5.378|
00017a  a119              ADR      r1,|L5.480|
00017c  a015              ADR      r0,|L5.468|
00017e  f7fffffe          BL       atk_8266_check_cmd
000182  b120              CBZ      r0,|L5.398|
000184  2000              MOVS     r0,#0                 ;258
000186  490b              LDR      r1,|L5.436|
000188  8008              STRH     r0,[r1,#0]            ;258
00018a  2003              MOVS     r0,#3                 ;259
00018c  e771              B        |L5.114|
                  |L5.398|
00018e  a116              ADR      r1,|L5.488|
000190  a010              ADR      r0,|L5.468|
000192  f7fffffe          BL       atk_8266_check_cmd
000196  b120              CBZ      r0,|L5.418|
000198  2000              MOVS     r0,#0                 ;263
00019a  4906              LDR      r1,|L5.436|
00019c  8008              STRH     r0,[r1,#0]            ;263
00019e  2004              MOVS     r0,#4                 ;264
0001a0  e767              B        |L5.114|
                  |L5.418|
0001a2  e7ac              B        |L5.254|
                  |L5.420|
0001a4  bf00              NOP                            ;233
                  |L5.422|
0001a6  2000              MOVS     r0,#0                 ;270
0001a8  4902              LDR      r1,|L5.436|
0001aa  8008              STRH     r0,[r1,#0]            ;270
0001ac  4640              MOV      r0,r8                 ;271
0001ae  e760              B        |L5.114|
;;;273    u8 atk_8266_send_data(u8 *data,u8 *ack,short waittime)
                          ENDP

                  |L5.432|
                          DCD      sendno
                  |L5.436|
                          DCD      USART3_RX_STA
                  |L5.440|
0001b8  28256420          DCB      "(%d bytes)send data turn\r\n",0
0001bc  62797465
0001c0  73297365
0001c4  6e642064
0001c8  61746120
0001cc  7475726e
0001d0  0d0a00  
0001d3  00                DCB      0
                  |L5.468|
0001d4  53454e44          DCB      "SEND DATA",0
0001d8  20444154
0001dc  4100    
0001de  00                DCB      0
0001df  00                DCB      0
                  |L5.480|
0001e0  4552524f          DCB      "ERROR",0
0001e4  5200    
0001e6  00                DCB      0
0001e7  00                DCB      0
                  |L5.488|
0001e8  4641494c          DCB      "FAIL",0
0001ec  00      
0001ed  00                DCB      0
0001ee  00                DCB      0
0001ef  00                DCB      0

                          AREA ||i.atk_8266_send_data_neat_large||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  atk_8266_send_data_neat_large PROC
;;;137    //返回值:0,发送成功(得到了期待的应答结果)luojian
;;;138    void atk_8266_send_data_neat_large(u8 *data,u32 len,u8 *ack,short waittime)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;139    {
000004  b09b              SUB      sp,sp,#0x6c
000006  4607              MOV      r7,r0
000008  4688              MOV      r8,r1
00000a  4692              MOV      r10,r2
00000c  469b              MOV      r11,r3
;;;140    	const u32 mtu = 2048;//保险起见设置小一点
00000e  f44f6000          MOV      r0,#0x800
000012  901a              STR      r0,[sp,#0x68]
;;;141    	u32 pos=0,rest=len;
000014  f04f0900          MOV      r9,#0
000018  4644              MOV      r4,r8
;;;142    	u32 sendlen;
;;;143    	u8 res;
;;;144    	u8 s[100];
;;;145    	while(rest>0)
00001a  e027              B        |L6.108|
                  |L6.28|
;;;146    	{
;;;147    		int32_t i = rest - mtu;
00001c  f5a46000          SUB      r0,r4,#0x800
000020  9000              STR      r0,[sp,#0]
;;;148    		if(i>0)sendlen = mtu;
000022  9800              LDR      r0,[sp,#0]
000024  2800              CMP      r0,#0
000026  dd02              BLE      |L6.46|
000028  f44f6500          MOV      r5,#0x800
00002c  e000              B        |L6.48|
                  |L6.46|
;;;149    		else
;;;150    		{
;;;151    			sendlen = rest;
00002e  4625              MOV      r5,r4
                  |L6.48|
;;;152    		}
;;;153    		sprintf(s,"AT+CIPSEND=%d\r\n",sendlen);
000030  462a              MOV      r2,r5
000032  a111              ADR      r1,|L6.120|
000034  a801              ADD      r0,sp,#4
000036  f7fffffe          BL       __2sprintf
;;;154    		do
00003a  bf00              NOP      
                  |L6.60|
;;;155    		{
;;;156    			atk_8266_send_cmd(s,(u8 *)"OK",-1);
00003c  f04f32ff          MOV      r2,#0xffffffff
000040  a111              ADR      r1,|L6.136|
000042  a801              ADD      r0,sp,#4
000044  f7fffffe          BL       atk_8266_send_cmd
;;;157    			res = atk_8266_send_data_neat(data+pos,sendlen,ack,waittime);
000048  eb070009          ADD      r0,r7,r9
00004c  465b              MOV      r3,r11
00004e  4652              MOV      r2,r10
000050  4629              MOV      r1,r5
000052  f7fffffe          BL       atk_8266_send_data_neat
000056  4606              MOV      r6,r0
;;;158    			delay_ms(20);
000058  2014              MOVS     r0,#0x14
00005a  f7fffffe          BL       delay_ms
;;;159    		}
;;;160    		while(res==3||res==4);
00005e  2e03              CMP      r6,#3
000060  d0ec              BEQ      |L6.60|
000062  2e04              CMP      r6,#4
000064  d0ea              BEQ      |L6.60|
;;;161    		pos+=sendlen;
000066  44a9              ADD      r9,r9,r5
;;;162    		rest-=sendlen;
000068  1b64              SUBS     r4,r4,r5
;;;163    	}
00006a  bf00              NOP      
                  |L6.108|
00006c  2c00              CMP      r4,#0                 ;145
00006e  d1d5              BNE      |L6.28|
;;;164    }
000070  b01b              ADD      sp,sp,#0x6c
000072  e8bd8ff0          POP      {r4-r11,pc}
;;;165    u8 atk_8266_send_data_neat(u8 *data,u32 len,u8 *ack,short waittime)
                          ENDP

000076  0000              DCW      0x0000
                  |L6.120|
000078  41542b43          DCB      "AT+CIPSEND=%d\r\n",0
00007c  49505345
000080  4e443d25
000084  640d0a00
                  |L6.136|
000088  4f4b00            DCB      "OK",0
00008b  00                DCB      0

                          AREA ||.data||, DATA, ALIGN=2

                  sendno
                          DCD      0x00000000
