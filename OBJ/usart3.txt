; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\usart3.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\usart3.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\ATK-ESP8266 -I..\CORE -I..\FATFS\src -I..\FATFS\exfuns -I..\HARDWARE\24CXX -I..\HARDWARE\IIC -I..\HARDWARE\KEY -I..\HARDWARE\LCD -I..\HARDWARE\LED -I..\HARDWARE\SDIO -I..\HARDWARE\SPI -I..\HARDWARE\TIMER -I..\HARDWARE\TOUCH -I..\HARDWARE\USART3 -I..\HARDWARE\W25QXX -I..\MALLOC -I..\STM32F10x_FWLib\inc -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\TEXT -I..\USER -I..\USMART -I..\PICTURE -I..\HARDWARE\OV7725 -I..\HARDWARE\EXTI -I..\HARDWARE\BEEP -I..\HARDWARE\DHT11 -I.\RTE\_Target_1 -ID:\Users\86132\AppData\Local\Arm\Packs\Keil\STM32F1xx_DFP\2.3.0\Device\Include -ID:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=529 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\usart3.crf ..\HARDWARE\USART3\usart3.c]
                          THUMB

                          AREA ||i.USART3_IRQHandler||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  USART3_IRQHandler PROC
;;;34     int new_data;
;;;35     void USART3_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;36     {
;;;37     		u8 res;	      
;;;38     		if(USART_GetITStatus(USART3, USART_IT_RXNE) != RESET)//接收到数据
000002  f2405125          MOV      r1,#0x525
000006  481e              LDR      r0,|L1.128|
000008  f7fffffe          BL       USART_GetITStatus
00000c  2800              CMP      r0,#0
00000e  d035              BEQ      |L1.124|
;;;39     		{	 
;;;40     		new_data = 1;
000010  2001              MOVS     r0,#1
000012  491c              LDR      r1,|L1.132|
000014  6008              STR      r0,[r1,#0]  ; new_data
;;;41     		res = USART_ReceiveData(USART3);
000016  481a              LDR      r0,|L1.128|
000018  f7fffffe          BL       USART_ReceiveData
00001c  b2c4              UXTB     r4,r0
;;;42     		USART_SendData(USART1,res);
00001e  4621              MOV      r1,r4
000020  4819              LDR      r0,|L1.136|
000022  f7fffffe          BL       USART_SendData
;;;43     		//USART3的中断处理中如果执行Printf usaet3 buffer就会乱，因为新来的接受不到了
;;;44     		//printf("%c:%d\n",res,res);
;;;45     		if((USART3_RX_STA&~(1<<15|1<<14))<USART3_MAX_RECV_LEN)	//还可以接收数据
000026  4819              LDR      r0,|L1.140|
000028  8800              LDRH     r0,[r0,#0]  ; USART3_RX_STA
00002a  f4204040          BIC      r0,r0,#0xc000
00002e  f2417170          MOV      r1,#0x1770
000032  4288              CMP      r0,r1
000034  da14              BGE      |L1.96|
;;;46     		{
;;;47     				//printf("*****\r\n");
;;;48     			TIM_SetCounter(TIM7,0);//计数器清空          				//计数器清空
000036  2100              MOVS     r1,#0
000038  4815              LDR      r0,|L1.144|
00003a  f7fffffe          BL       TIM_SetCounter
;;;49     			if((USART3_RX_STA&(1<<15))==0) 				//使能定时器7的中断 
00003e  4813              LDR      r0,|L1.140|
000040  8800              LDRH     r0,[r0,#0]  ; USART3_RX_STA
000042  f4004000          AND      r0,r0,#0x8000
000046  b918              CBNZ     r0,|L1.80|
;;;50     			{
;;;51     				TIM_Cmd(TIM7,ENABLE);//使能定时器7
000048  2101              MOVS     r1,#1
00004a  4811              LDR      r0,|L1.144|
00004c  f7fffffe          BL       TIM_Cmd
                  |L1.80|
;;;52     			}
;;;53     			USART3_RX_BUF[USART3_RX_STA++]=res;	//记录接收到的值	 	
000050  490e              LDR      r1,|L1.140|
000052  8808              LDRH     r0,[r1,#0]  ; USART3_RX_STA
000054  1c41              ADDS     r1,r0,#1
000056  4a0d              LDR      r2,|L1.140|
000058  8011              STRH     r1,[r2,#0]
00005a  490e              LDR      r1,|L1.148|
00005c  540c              STRB     r4,[r1,r0]
00005e  e00d              B        |L1.124|
                  |L1.96|
;;;54     		}
;;;55     		else 
;;;56     		{
;;;57     			printf("usart3 buffer overflow:%d,%s\r\n",(USART3_RX_STA&~(1<<15|1<<14)),USART3_RX_BUF);
000060  480a              LDR      r0,|L1.140|
000062  8800              LDRH     r0,[r0,#0]  ; USART3_RX_STA
000064  f4204140          BIC      r1,r0,#0xc000
000068  4a0a              LDR      r2,|L1.148|
00006a  a00b              ADR      r0,|L1.152|
00006c  f7fffffe          BL       __2printf
;;;58     			USART3_RX_STA|=1<<14;				//强制标记接收完成
000070  4806              LDR      r0,|L1.140|
000072  8800              LDRH     r0,[r0,#0]  ; USART3_RX_STA
000074  f4404080          ORR      r0,r0,#0x4000
000078  4904              LDR      r1,|L1.140|
00007a  8008              STRH     r0,[r1,#0]
                  |L1.124|
;;;59     		} 
;;;60     		}				 											 
;;;61     }   
00007c  bd10              POP      {r4,pc}
;;;62     
                          ENDP

00007e  0000              DCW      0x0000
                  |L1.128|
                          DCD      0x40004800
                  |L1.132|
                          DCD      new_data
                  |L1.136|
                          DCD      0x40013800
                  |L1.140|
                          DCD      USART3_RX_STA
                  |L1.144|
                          DCD      0x40001400
                  |L1.148|
                          DCD      USART3_RX_BUF
                  |L1.152|
000098  75736172          DCB      "usart3 buffer overflow:%d,%s\r\n",0
00009c  74332062
0000a0  75666665
0000a4  72206f76
0000a8  6572666c
0000ac  6f773a25
0000b0  642c2573
0000b4  0d0a00  
0000b7  00                DCB      0

                          AREA ||i.u3_printf||, CODE, READONLY, ALIGN=2

                  u3_printf PROC
;;;143    }
;;;144    void u3_printf(char* fmt,...)  
000000  b40f              PUSH     {r0-r3}
;;;145    {  
000002  b538              PUSH     {r3-r5,lr}
;;;146    	u16 i,j; 
;;;147    	va_list ap; 
;;;148    	va_start(ap,fmt);
000004  a805              ADD      r0,sp,#0x14
000006  9000              STR      r0,[sp,#0]
;;;149    	vsprintf((char*)USART3_TX_BUF,fmt,ap);
000008  480f              LDR      r0,|L2.72|
00000a  9a00              LDR      r2,[sp,#0]
00000c  9904              LDR      r1,[sp,#0x10]
00000e  f7fffffe          BL       vsprintf
;;;150    	va_end(ap);
000012  2000              MOVS     r0,#0
000014  9000              STR      r0,[sp,#0]
;;;151    	i=strlen((const char*)USART3_TX_BUF);		//此次发送数据的长度
000016  480c              LDR      r0,|L2.72|
000018  f7fffffe          BL       strlen
00001c  b285              UXTH     r5,r0
;;;152    	for(j=0;j<i;j++)							//循环发送数据
00001e  2400              MOVS     r4,#0
000020  e00d              B        |L2.62|
                  |L2.34|
;;;153    	{
;;;154    	  while(USART_GetFlagStatus(USART3,USART_FLAG_TC)==RESET); //循环发送,直到发送完毕   
000022  bf00              NOP      
                  |L2.36|
000024  2140              MOVS     r1,#0x40
000026  4809              LDR      r0,|L2.76|
000028  f7fffffe          BL       USART_GetFlagStatus
00002c  2800              CMP      r0,#0
00002e  d0f9              BEQ      |L2.36|
;;;155    		USART_SendData(USART3,USART3_TX_BUF[j]); 
000030  4805              LDR      r0,|L2.72|
000032  5d01              LDRB     r1,[r0,r4]
000034  4805              LDR      r0,|L2.76|
000036  f7fffffe          BL       USART_SendData
00003a  1c60              ADDS     r0,r4,#1              ;152
00003c  b284              UXTH     r4,r0                 ;152
                  |L2.62|
00003e  42ac              CMP      r4,r5                 ;152
000040  dbef              BLT      |L2.34|
;;;156    	} 
;;;157    }
000042  bc38              POP      {r3-r5}
000044  f85dfb14          LDR      pc,[sp],#0x14
;;;158    
                          ENDP

                  |L2.72|
                          DCD      USART3_TX_BUF
                  |L2.76|
                          DCD      0x40004800

                          AREA ||i.u3_printf_neat||, CODE, READONLY, ALIGN=2

                  u3_printf_neat PROC
;;;124    //确保一次发送数据不超过USART3_MAX_SEND_LEN字节
;;;125    void u3_printf_neat(u8 *data,u32 len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;126    {
000004  4607              MOV      r7,r0
000006  460e              MOV      r6,r1
;;;127    	u32 i,j,k=0;
000008  2500              MOVS     r5,#0
;;;128    	char *tmp_data;
;;;129    	while(k<len) 
00000a  e003              B        |L3.20|
                  |L3.12|
;;;130    	{
;;;131    		USART3_TX_BUF[k] = data[k];
00000c  5d78              LDRB     r0,[r7,r5]
00000e  490c              LDR      r1,|L3.64|
000010  5548              STRB     r0,[r1,r5]
;;;132    		k++;
000012  1c6d              ADDS     r5,r5,#1
                  |L3.20|
000014  42b5              CMP      r5,r6                 ;129
000016  d3f9              BCC      |L3.12|
;;;133    	}
;;;134    	i = len;		//此次发送数据的长度
000018  46b0              MOV      r8,r6
;;;135    	//printf("in u3_printf_neat(%d)\r\n",i);
;;;136    	for(j=0;j<i;j++)							//循环发送数据
00001a  2400              MOVS     r4,#0
00001c  e00c              B        |L3.56|
                  |L3.30|
;;;137    	{
;;;138    	  while(USART_GetFlagStatus(USART3,USART_FLAG_TC)==RESET); //循环发送,直到发送完毕   
00001e  bf00              NOP      
                  |L3.32|
000020  2140              MOVS     r1,#0x40
000022  4808              LDR      r0,|L3.68|
000024  f7fffffe          BL       USART_GetFlagStatus
000028  2800              CMP      r0,#0
00002a  d0f9              BEQ      |L3.32|
;;;139    		//while(USART_GetFlagStatus(USART3,USART_FLAG_CTS)==RESET);
;;;140    		//printf("actually gets here\r\n");
;;;141    		USART_SendData(USART3,USART3_TX_BUF[j]); 
00002c  4804              LDR      r0,|L3.64|
00002e  5d01              LDRB     r1,[r0,r4]
000030  4804              LDR      r0,|L3.68|
000032  f7fffffe          BL       USART_SendData
000036  1c64              ADDS     r4,r4,#1              ;136
                  |L3.56|
000038  4544              CMP      r4,r8                 ;136
00003a  d3f0              BCC      |L3.30|
;;;142    	} 
;;;143    }
00003c  e8bd81f0          POP      {r4-r8,pc}
;;;144    void u3_printf(char* fmt,...)  
                          ENDP

                  |L3.64|
                          DCD      USART3_TX_BUF
                  |L3.68|
                          DCD      0x40004800

                          AREA ||i.usart3_enable_flow_control||, CODE, READONLY, ALIGN=2

                  usart3_enable_flow_control PROC
;;;117    }
;;;118    void usart3_enable_flow_control(void)
000000  4802              LDR      r0,|L4.12|
;;;119    {
;;;120    	USART_TypeDef* usart3 = USART3;
;;;121    	usart3->CR3 |= USART_HardwareFlowControl_CTS;
000002  8a81              LDRH     r1,[r0,#0x14]
000004  f4417100          ORR      r1,r1,#0x200
000008  8281              STRH     r1,[r0,#0x14]
;;;122    }
00000a  4770              BX       lr
;;;123    //串口3,printf 函数
                          ENDP

                  |L4.12|
                          DCD      0x40004800

                          AREA ||i.usart3_init||, CODE, READONLY, ALIGN=2

                  usart3_init PROC
;;;66     //bound:波特率	  
;;;67     void usart3_init(u32 bound)
000000  b510              PUSH     {r4,lr}
;;;68     {  
000002  b086              SUB      sp,sp,#0x18
000004  4604              MOV      r4,r0
;;;69     
;;;70     	NVIC_InitTypeDef NVIC_InitStructure;
;;;71     	GPIO_InitTypeDef GPIO_InitStructure;
;;;72     	USART_InitTypeDef USART_InitStructure;
;;;73     
;;;74     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);	// GPIOB时钟
000006  2101              MOVS     r1,#1
000008  2008              MOVS     r0,#8
00000a  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;75     	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3,ENABLE); //串口3时钟使能
00000e  2101              MOVS     r1,#1
000010  0488              LSLS     r0,r1,#18
000012  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;76     
;;;77      	USART_DeInit(USART3);  //复位串口3
000016  482a              LDR      r0,|L5.192|
000018  f7fffffe          BL       USART_DeInit
;;;78     		 //USART3_TX   PB10
;;;79       GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10; //PB10
00001c  f44f6080          MOV      r0,#0x400
000020  f8ad0010          STRH     r0,[sp,#0x10]
;;;80       GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000024  2003              MOVS     r0,#3
000026  f88d0012          STRB     r0,[sp,#0x12]
;;;81       GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;	//复用推挽输出
00002a  2018              MOVS     r0,#0x18
00002c  f88d0013          STRB     r0,[sp,#0x13]
;;;82       GPIO_Init(GPIOB, &GPIO_InitStructure); //初始化PB10
000030  a904              ADD      r1,sp,#0x10
000032  4824              LDR      r0,|L5.196|
000034  f7fffffe          BL       GPIO_Init
;;;83        
;;;84         //USART3_RX	  PB11
;;;85       GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
000038  f44f6000          MOV      r0,#0x800
00003c  f8ad0010          STRH     r0,[sp,#0x10]
;;;86       GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;//浮空输入
000040  2004              MOVS     r0,#4
000042  f88d0013          STRB     r0,[sp,#0x13]
;;;87       GPIO_Init(GPIOB, &GPIO_InitStructure);  //初始化PB11
000046  a904              ADD      r1,sp,#0x10
000048  481e              LDR      r0,|L5.196|
00004a  f7fffffe          BL       GPIO_Init
;;;88     	
;;;89     	USART_InitStructure.USART_BaudRate = bound;//波特率一般设置为9600;
00004e  9400              STR      r4,[sp,#0]
;;;90     	USART_InitStructure.USART_WordLength = USART_WordLength_8b;//字长为8位数据格式
000050  2000              MOVS     r0,#0
000052  f8ad0004          STRH     r0,[sp,#4]
;;;91     	USART_InitStructure.USART_StopBits = USART_StopBits_1;//一个停止位
000056  f8ad0006          STRH     r0,[sp,#6]
;;;92     	USART_InitStructure.USART_Parity = USART_Parity_No;//无奇偶校验位
00005a  f8ad0008          STRH     r0,[sp,#8]
;;;93     	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;//无硬件数据流控制
00005e  f8ad000c          STRH     r0,[sp,#0xc]
;;;94     	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;	//收发模式
000062  200c              MOVS     r0,#0xc
000064  f8ad000a          STRH     r0,[sp,#0xa]
;;;95       
;;;96     	USART_Init(USART3, &USART_InitStructure); //初始化串口	3
000068  4669              MOV      r1,sp
00006a  4815              LDR      r0,|L5.192|
00006c  f7fffffe          BL       USART_Init
;;;97       
;;;98     
;;;99     	USART_Cmd(USART3, ENABLE);                    //使能串口 
000070  2101              MOVS     r1,#1
000072  4813              LDR      r0,|L5.192|
000074  f7fffffe          BL       USART_Cmd
;;;100    	
;;;101    	//使能接收中断
;;;102      USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);//开启中断   
000078  2201              MOVS     r2,#1
00007a  f2405125          MOV      r1,#0x525
00007e  4810              LDR      r0,|L5.192|
000080  f7fffffe          BL       USART_ITConfig
;;;103    	
;;;104    	//设置中断优先级
;;;105    	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
000084  2027              MOVS     r0,#0x27
000086  f88d0014          STRB     r0,[sp,#0x14]
;;;106    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=2 ;//抢占优先级2
00008a  2002              MOVS     r0,#2
00008c  f88d0015          STRB     r0,[sp,#0x15]
;;;107    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;		//子优先级3
000090  2003              MOVS     r0,#3
000092  f88d0016          STRB     r0,[sp,#0x16]
;;;108    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			//IRQ通道使能
000096  2001              MOVS     r0,#1
000098  f88d0017          STRB     r0,[sp,#0x17]
;;;109    	
;;;110    	NVIC_Init(&NVIC_InitStructure);	//根据指定的参数初始化VIC寄存器
00009c  a805              ADD      r0,sp,#0x14
00009e  f7fffffe          BL       NVIC_Init
;;;111    	
;;;112    	
;;;113    	TIM7_Int_Init(50-1,7200-1);		//50ms中断,排除数据收不完的可能性
0000a2  f641411f          MOV      r1,#0x1c1f
0000a6  2031              MOVS     r0,#0x31
0000a8  f7fffffe          BL       TIM7_Int_Init
;;;114    	USART3_RX_STA=0;		//清零
0000ac  2000              MOVS     r0,#0
0000ae  4906              LDR      r1,|L5.200|
0000b0  8008              STRH     r0,[r1,#0]
;;;115    	TIM_Cmd(TIM7,DISABLE);			//关闭定时器7
0000b2  2100              MOVS     r1,#0
0000b4  4805              LDR      r0,|L5.204|
0000b6  f7fffffe          BL       TIM_Cmd
;;;116    
;;;117    }
0000ba  b006              ADD      sp,sp,#0x18
0000bc  bd10              POP      {r4,pc}
;;;118    void usart3_enable_flow_control(void)
                          ENDP

0000be  0000              DCW      0x0000
                  |L5.192|
                          DCD      0x40004800
                  |L5.196|
                          DCD      0x40010c00
                  |L5.200|
                          DCD      USART3_RX_STA
                  |L5.204|
                          DCD      0x40001400

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  USART3_RX_BUF
                          %        6001
                  USART3_TX_BUF
                          %        6001

                          AREA ||.data||, DATA, ALIGN=2

                  USART3_RX_STA
000000  0000              DCW      0x0000
000002  0000              DCB      0x00,0x00
                  new_data
                          DCD      0x00000000
